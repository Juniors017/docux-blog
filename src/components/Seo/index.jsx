/**
 * Composant SEO Principal - D√©velopp√© par Docux avec GitHub Copilot
 * 
 * Ce composant g√®re intelligemment toutes les m√©tadonn√©es SEO de votre site Docusaurus :
 * - D√©tection automatique du type de page (blog, statique, accueil...)
 * - G√©n√©ration des balises meta HTML, Open Graph et Twitter Cards
 * - Cr√©ation du Schema.org JSON-LD pour les Rich Results Google
 * - Syst√®me de fallback robuste pour √©viter les erreurs
 * - Panel de debug int√©gr√© pour le d√©veloppement
 * 
 * üéØ ARCHITECTURE : Utilise SEULEMENT les donn√©es prioris√©es de usePageMetadata
 */

import React from 'react';
import { useLocation } from '@docusaurus/router';
import useDocusaurusContext from '@docusaurus/useDocusaurusContext';
import Head from '@docusaurus/Head';
import useBaseUrl from '@docusaurus/useBaseUrl';
import ExecutionEnvironment from '@docusaurus/ExecutionEnvironment';
import SeoDebugPanel from '../SeoDebugPanel';
import usePageMetadata from './utils/usePageMetadata';
import  {getPageType}  from './utils/getPageType';
import { createOptimizedBreadcrumb, generateGenericBreadcrumb } from './utils/breadcrumbUtils';
import { getSchemaImageUrl } from './utils/seoImageUtils';
import { normalizeAuthorName, getSchemaPrimaryAuthor } from './utils/authorUtils';
import { 
  getSchemaLanguage, 
  getSchemaPublishedDate, 
  getSchemaModifiedDate, 
  getSchemaTitle, 
  getSchemaDescription,
  getSchemaKeywords,
  getSchemaArticleSection,
  getSchemaTechArticleProperties
} from './utils/schemaDataUtils';


import { 
  normalizeUrl, 
  generateCanonicalId, 
  generateCanonicalUrl, 
  validateSchemaUrls, 
  fixAllSchemaUrls 
} from './utils/urlNormalizer';

export default function Seo({ pageData, frontMatter: propsFrontMatter, forceRender = false } = {}) {
  // R√©cup√©ration du contexte Docusaurus et de la localisation
  const location = useLocation(); // URL et chemin actuels
  const { siteConfig } = useDocusaurusContext(); // Configuration globale du site
  

 

// R√©cup√®re les m√©tadonn√©es enrichies et prioris√©es directement depuis le hook
// blogPostData = source la plus riche (blog > page)
// pageMetadata = m√©tadonn√©es prioritaires (page > blog)
const { blogPostData, pageMetadata } = usePageMetadata(pageData, propsFrontMatter);
  if (process.env.NODE_ENV === 'development') {
    console.log('üü£ R√©sultat usePageMetadata dans Seo:', { blogPostData, pageMetadata });
  }

   /* 
   * Analyse de l'URL pour d√©terminer le type de contenu.
   * Cette d√©tection influence les m√©tadonn√©es Schema.org g√©n√©r√©es.
   */

   
  /* ============================================================================
   * D√âTECTION ET G√âN√âRATION DES M√âTADONN√âES DE BASE
   * ============================================================================ */
  
  // 1.1 D√©tection du type de page pour Schema.org
  const pageInfo = getPageType({ location, blogPostData, pageMetadata });
  
  // 1.2 G√©n√©ration des URLs canoniques (ordre des param√®tres corrig√©)
  const canonicalId = generateCanonicalId(siteConfig, location.pathname);
  const canonicalUrl = generateCanonicalUrl(siteConfig, location.pathname);
  
  // 1.3 G√©n√©ration du titre avec utilitaire de donn√©es prioris√©es
  const title = getSchemaTitle(pageMetadata, siteConfig);
  
  // 1.4 G√©n√©ration de la description avec utilitaire de donn√©es prioris√©es
  const description = getSchemaDescription(pageMetadata, siteConfig);
  
  // 1.5 Variables bool√©ennes r√©cup√©r√©es directement depuis la d√©tection pageInfo
  // (√©vite la duplication avec detectPageType)
  const { 
    isBlogPost = false, 
    isBlogListPage = false, 
    isSeriesPage = false, 
    isSpecificSeriesPage = false, 
    isHomePage = false, 
    isThanksPage = false, 
    isRepositoryPage = false 
  } = pageInfo;
  
  
  /* ============================================================================
   * √âTAPE 2 : FONCTION BREADCRUMB IMPORT√âE
   * ============================================================================ */
  
  // La fonction generateGenericBreadcrumb est maintenant import√©e depuis :
  // src/components/Seo/utils/breadcrumbUtils.js
  // Plus besoin de la red√©finir localement - plus efficace et r√©utilisable !

  /**
   * √âTAPE 8 : Gestion intelligente des images avec donn√©es prioris√©es
   * 
   * Utilise les donn√©es d√©j√† prioris√©es par usePageMetadata au lieu de refaire la logique
   */
  const imageUrl = getSchemaImageUrl(pageMetadata, siteConfig, useBaseUrl);
  if (process.env.NODE_ENV === 'development') {
      console.log('üñºÔ∏è Schema Image Url (donn√©es prioris√©es):', imageUrl);
    }
  /**
   * √âTAPE 9 : Gestion des auteurs avec donn√©es prioris√©es
   * 
   * Utilise les donn√©es d√©j√† prioris√©es par usePageMetadata au lieu de refaire la logique
   */
  const primaryAuthor = getSchemaPrimaryAuthor(pageMetadata, siteConfig);
if (process.env.NODE_ENV === 'development') {
      console.log('üë• Mode auteur activ√© (donn√©es prioris√©es):', primaryAuthor);
    }
  /**
   * √âTAPE 11 : Construction du JSON-LD Schema.org
   * 
   * Cr√©ation de la structure de donn√©es structur√©es selon le type de page.
   * Cette structure est cruciale pour les Rich Results Google.
   */
  
  // R√©cup√©ration des types de sch√©mas depuis le frontmatter
  const schemaTypes = blogPostData?.frontMatter?.schemaTypes || 
                     pageMetadata?.frontMatter?.schemaTypes;
  
  let allSchemas = [];
  
  if (Array.isArray(schemaTypes) && schemaTypes.length > 0) {
    // ‚úÖ APPROCHE EXPLICITE : G√©n√©rer tous les types demand√©s
    if (process.env.NODE_ENV === 'development') {
      console.log('üéØ Mode sch√©mas multiples activ√©:', schemaTypes);
    }
    
    schemaTypes.forEach((schemaType, index) => {
      // G√©n√©ration d'IDs diff√©renci√©s pour √©viter les conflits
      const schemaId = index === 0 ? canonicalId : `${canonicalId}#${schemaType.toLowerCase()}`;
      
      const schemaName = blogPostData?.frontMatter?.name || 
                        pageMetadata?.frontMatter?.name || 
                        blogPostData?.frontMatter?.title || 
                        pageMetadata?.frontMatter?.title || 
                        title;
      
      let schemaStructure = {
        '@context': 'https://schema.org',
        '@id': schemaId,
        '@type': schemaType,
        url: canonicalUrl,
        name: schemaName, // ‚úÖ Utilise la valeur du frontMatter
        headline: title,
        description: description,
        image: {
          '@type': 'ImageObject',
          url: imageUrl,
          caption: `Image pour: ${title}`
        },
        // ‚úÖ UTILISE l'utilitaire pour inLanguage avec donn√©es prioris√©es
        inLanguage: getSchemaLanguage(pageMetadata, siteConfig),
        isPartOf: {
          '@type': 'WebSite',
          name: siteConfig.title,
          url: siteConfig.url
        }
      };
      
      // Enrichissement selon le type de sch√©ma
      if (schemaType === 'BlogPosting' || schemaType === 'TechArticle') {
        schemaStructure = {
          ...schemaStructure,
          author: primaryAuthor ? {
            '@type': 'Person',
            name: normalizeAuthorName(primaryAuthor.name),
            url: primaryAuthor.url || primaryAuthor.github,
            description: primaryAuthor.title || 'Contributeur Docux',
            // ‚úÖ CORRECTION : Correction de l'URL image auteur
            image: primaryAuthor.imageUrl?.startsWith('http') 
              ? primaryAuthor.imageUrl 
              : `${siteConfig.url}${primaryAuthor.imageUrl || '/img/docusaurus-social-card.jpg'}`
          } : {
            '@type': 'Person',
            name: '√âquipe Docux',
            url: siteConfig.url
          },
          datePublished: getSchemaPublishedDate(pageMetadata),
          dateModified: getSchemaModifiedDate(pageMetadata),
          publisher: {
            '@type': 'Organization',
            name: siteConfig.title,
            url: siteConfig.url,
            logo: {
              '@type': 'ImageObject',
              url: siteConfig.url + useBaseUrl('/img/docux.png')
            }
          },
          mainEntityOfPage: {
            '@type': 'WebPage',
            '@id': canonicalId
          },
          keywords: getSchemaKeywords(pageMetadata),
          articleSection: getSchemaArticleSection(pageMetadata)
        };
        
        // Propri√©t√©s sp√©cifiques √† TechArticle
        if (schemaType === 'TechArticle') {
          const techProperties = getSchemaTechArticleProperties(pageMetadata);
          
          schemaStructure = {
            ...schemaStructure,
            ...techProperties
          };
        }
      }
      
      allSchemas.push(schemaStructure);
    });
    
    // Ajout du breadcrumb comme sch√©ma s√©par√©
    const breadcrumbJsonLd = generateGenericBreadcrumb(location.pathname, title, siteConfig);
    if (breadcrumbJsonLd && !allSchemas.some(schema => schema['@type'] === 'BreadcrumbList')) {
      allSchemas.push(breadcrumbJsonLd);
    }
    
  } else {
    // ‚úÖ MODE FALLBACK SIMPLE : Si pas de schemaTypes d√©fini
    if (process.env.NODE_ENV === 'development') {
      console.log('üìç Mode fallback activ√© - sch√©ma WebPage par d√©faut');
    }
    
    const fallbackSchema = {
      '@context': 'https://schema.org',
      '@id': canonicalId,
      '@type': 'WebPage',
      url: canonicalUrl,
      name: title,
      description: description,
      image: {
        '@type': 'ImageObject',
        url: imageUrl,
        caption: `Image pour: ${title}`
      },
      inLanguage: getSchemaLanguage(pageMetadata, siteConfig),
      isPartOf: {
        '@type': 'WebSite',
        name: siteConfig.title,
        url: siteConfig.url
      }
    };
    
    allSchemas.push(fallbackSchema);
    
    // Breadcrumb pour fallback
    const breadcrumbJsonLd = generateGenericBreadcrumb(location.pathname, title, siteConfig);
    if (breadcrumbJsonLd) {
      allSchemas.push(breadcrumbJsonLd);
    }
  }

  // Validation et correction automatique des URLs
  const urlValidation = validateSchemaUrls(allSchemas);
  const finalSchemas = urlValidation.isValid 
    ? allSchemas 
    : fixAllSchemaUrls(allSchemas, canonicalId, canonicalUrl);

  // S√©lectionne le sch√©ma primaire pour l'affichage (le premier)
  const primarySchema = finalSchemas[0];

  // ‚úÖ LOGIQUE DE DEBUG NETTOY√âE
  const detections = {
    isBlogPost,
    isBlogListPage,
    isSeriesPage,
    isSpecificSeriesPage,
    isHomePage,
    isThanksPage,
    isRepositoryPage,
    hasAuthor: !!primaryAuthor,
    hasBlogData: !!blogPostData,
    hasPageData: !!pageMetadata,
    hasImage: !!imageUrl,
    schemasCount: finalSchemas.length,
    schemaTypes: schemaTypes || ['WebPage']
  };

  /**
   * √âTAPE 13 : Rendu du composant avec toutes les m√©tadonn√©es
   * 
   * G√©n√©ration de toutes les balises HTML n√©cessaires pour le SEO :
   * - Balises meta de base (title, description, canonical)
   * - Open Graph pour les r√©seaux sociaux
   * - Twitter Cards pour Twitter
   * - M√©tadonn√©es sp√©cifiques aux articles
   * - JSON-LD structur√© pour Google Rich Results
   * - Panel de debug en mode d√©veloppement
   */
  return (
    <>
      <Head>
        {/* ===== BALISES META DE BASE ===== */}
        <title>{title}</title>
        <meta name="description" content={description} />
        <link rel="canonical" href={canonicalUrl} />
        
        {/* ===== OPEN GRAPH (Facebook, LinkedIn, etc.) ===== */}
        <meta property="og:type" content={pageInfo.type === 'BlogPosting' ? 'article' : 'website'} />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:url" content={canonicalUrl} />
        <meta property="og:image" content={imageUrl} />
        <meta property="og:image:alt" content={`Image pour: ${title}`} />
        <meta property="og:site_name" content={siteConfig.title} />
        <meta property="og:locale" content="fr_FR" />
        
        {/* ===== TWITTER CARDS ===== */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content={description} />
        <meta name="twitter:image" content={imageUrl} />
        <meta name="twitter:image:alt" content={`Image pour: ${title}`} />
        
        {/* ===== M√âTADONN√âES SP√âCIFIQUES AUX ARTICLES ===== */}
        {pageInfo.type === 'BlogPosting' && blogPostData && (
          <>
            <meta property="article:published_time" content={blogPostData.date} />
            <meta property="article:modified_time" content={blogPostData.lastUpdatedAt || blogPostData.date} />
            {primaryAuthor && <meta property="article:author" content={normalizeAuthorName(primaryAuthor.name)} />}
            {/* Cat√©gorie de l'article */}
            {(blogPostData.frontMatter?.category || pageMetadata?.frontMatter?.category) && (
              <meta property="article:section" content={blogPostData.frontMatter?.category || pageMetadata?.frontMatter?.category} />
            )}
            
            {/* Tags/mots-cl√©s de l'article (un meta tag par mot-cl√©) */}
            {blogPostData.frontMatter?.keywords?.map((keyword) => (
              <meta key={keyword} property="article:tag" content={keyword} />
            ))}
            {pageMetadata?.frontMatter?.keywords?.map((keyword) => (
              <meta key={keyword} property="article:tag" content={keyword} />
            ))}
            {pageMetadata?.frontMatter?.tags?.map((tag) => (
              <meta key={tag} property="article:tag" content={tag} />
            ))}
          </>
        )}
        
        {/* ===== M√âTADONN√âES SUPPL√âMENTAIRES ===== */}
        <meta name="robots" content="index, follow" />      {/* Autoriser l'indexation */}
        <meta name="googlebot" content="index, follow" />   {/* Sp√©cifique √† Googlebot */}
        
        {/* ===== JSON-LD POUR LES RICH RESULTS GOOGLE ===== */}
        {finalSchemas.map((schema, index) => (
          <script key={index} type="application/ld+json">
            {JSON.stringify(schema)}
          </script>
        ))}
      </Head>
      
      {/* 
        ===== PANEL DE DEBUG SEO ===== 
        
        Composant d√©velopp√© par Docux pour faciliter le d√©veloppement.
        Affiche un panel flottant avec :
        - Vue d'ensemble des d√©tections de page
        - Validation SEO en temps r√©el avec score
        - M√©triques de performance
        - Actions rapides (export, test Google, etc.)
        
        Le panel ne s'affiche qu'en mode d√©veloppement (NODE_ENV !== 'production')
      */}
      <SeoDebugPanel 
        jsonLd={primarySchema}             // Sch√©ma JSON-LD principal
        allSchemas={finalSchemas}          // Tous les sch√©mas g√©n√©r√©s
        urlValidation={urlValidation}      // R√©sultats de validation des URLs
        pageInfo={pageInfo}                // Type et cat√©gorie de page
        location={location}                // Informations URL/navigation
        blogPostData={blogPostData}        // M√©tadonn√©es d'article (si applicable)
        pageMetadata={pageMetadata}        // M√©tadonn√©es de page (si applicable)
        siteConfig={siteConfig}           // Configuration globale Docusaurus
        detections={detections}           // R√©sultats de toutes les d√©tections
      />
    </>
  );
}