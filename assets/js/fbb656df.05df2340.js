"use strict";(globalThis.webpackChunkdocux_blog=globalThis.webpackChunkdocux_blog||[]).push([[6908],{2726:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var a=n(7405),o=n(4848),r=n(8453);let i={title:"Component Avatar",description:"A complete tutorial to design and customize an Avatar component in Docusaurus, based on Infima. Includes JS/TS examples, props, advanced integration and best practices.",schemaTypes:["HowTo","BlogPosting"],slug:"avatarcomponent-docusaurus-infima",image:"/img/timeline.webp",authors:["docux"],mainTag:"infima",tags:["avatar","infima","component","tutorial","front-end","customization"],date:new Date("2025-08-29T00:00:00.000Z"),last_update:{date:new Date("2025-08-29T00:00:00.000Z"),author:"docux"},difficulty:"Beginner to Intermediate",totalTime:"PT10M",prepTime:"PT2M",performTime:"PT8M",estimatedCost:"Free",tool:["React","Docusaurus","Infima","VSCode"],supply:["Node.js","Docusaurus","Infima"],yield:"Customizable and reusable Avatar component",genre:"Technical Tutorial",inLanguage:"en",isAccessibleForFree:!0,readingTime:"7 min",articleSection:"Tutorial",copyrightYear:2025,copyrightHolder:"Docux",category:"Web Development",keywords:["avatar","infima","component","tutorial","front-end","customization"],hide_table_of_contents:!1,series:"infima components",blueSkyRecordKey:"3lxoqtinrbc2g"},s=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Avatar : composition of the master folder",id:"avatar--composition-of-the-master-folder",level:2},{value:"Creating the Avatar component",id:"creating-the-avatar-component",level:2},{value:"Creating the AvatarImage component",id:"creating-the-avatarimage-component",level:2},{value:"Creating the AvatarIntro component",id:"creating-the-avatarintro-component",level:2},{value:"Creating the AvatarName component",id:"creating-the-avatarname-component",level:2},{value:"Creating the AvatarSubtitle component",id:"creating-the-avatarsubtitle-component",level:2},{value:"MDX Component Scope",id:"mdx-component-scope",level:2},{value:"Using the Avatar Component in an MDX File",id:"using-the-avatar-component-in-an-mdx-file",level:2},{value:"Avatar classic horizontal",id:"avatar-classic-horizontal",level:3},{value:"Avatar type post horizontal",id:"avatar-type-post-horizontal",level:3},{value:"Avatar classic vertical",id:"avatar-classic-vertical",level:3},{value:"Various  styles",id:"various--styles",level:3},{value:"Various sizes",id:"various-sizes",level:3}];function m(t){let e={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...t.components},{AvatarContainer:a,AvatarImage:i,AvatarIntro:s,AvatarName:l,AvatarSubtitle:c,Column:m,Columns:d,LogoIcon:u,TabItem:x,Tabs:p}=e;return a||h("AvatarContainer",!0),i||h("AvatarImage",!0),s||h("AvatarIntro",!0),l||h("AvatarName",!0),c||h("AvatarSubtitle",!0),m||h("Column",!0),d||h("Columns",!0),u||h("LogoIcon",!0),x||h("TabItem",!0),p||h("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)("center",{children:[(0,o.jsx)("div",{children:(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.a,{href:"https://github.com/Juniors017",children:(0,o.jsx)(e.img,{src:"https://img.shields.io/badge/Developer-Docux-green.svg",alt:"Developer"})}),"\n",(0,o.jsx)(e.a,{href:"https://github.com/Juniors017",children:(0,o.jsx)(e.img,{src:"https://img.shields.io/badge/Developement-validated-green.svg",alt:"Developement"})}),"\n",(0,o.jsx)(e.a,{href:"https://opensource.org/licenses/MIT",children:(0,o.jsx)(e.img,{src:"https://img.shields.io/badge/License-MIT-yellow.svg",alt:"License: MIT"})}),"\n",(0,o.jsx)(e.a,{href:"https://github.com/Juniors017",children:(0,o.jsx)(e.img,{src:"https://img.shields.io/badge/AI-no-blue.svg",alt:"AI 0%"})}),"\n",(0,o.jsx)(e.a,{href:"https://github.com/Juniors017/docux-blog/tree/main/src/components/",children:(0,o.jsx)(e.img,{src:"https://img.shields.io/badge/Documentation-validated-green.svg",alt:"Documentation"})})]})}),(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"infima avatar component",src:n(9979).A+"",width:"1177",height:"757"})})]}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.a,{href:"https://infima.dev/",children:"Infima CSS framework"}),' provides a set of utility classNames that can be used to stylize avatar in Docusaurus.\nThis article will cover how to create a reusable avatar component for your Docusaurus site which can be personalized with different colors, orientations and sizes.\nThe component will create all the avatar design available in Infima and "Custom" disposition, you will be able to create and personalize each avatar independently of each other']}),"\n",(0,o.jsxs)(e.p,{children:["Docusaurus uses the Infima framework for styling layout. The components described here are fully based on the Infima avatar system. More detail on the Infima avatar can be found in the ",(0,o.jsx)(e.a,{href:"https://infima.dev/docs/components/avatar",children:"Infima docs"})]}),"\n",(0,o.jsx)(e.p,{children:"The component is in fact a set of small components that will admit to form the Avatar."}),"\n",(0,o.jsx)(e.h2,{id:"avatar--composition-of-the-master-folder",children:"Avatar : composition of the master folder"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"AvatarContainer (The container of alls parts)"}),"\n",(0,o.jsx)(e.li,{children:"AvatarImage component (Image parts of Avatar)"}),"\n",(0,o.jsx)(e.li,{children:"AvatarIntro component (Intro parts of Avatar)"}),"\n",(0,o.jsx)(e.li,{children:"AvatarName component (Name parts of Avatar)"}),"\n",(0,o.jsx)(e.li,{children:"AvatarSubtitle component (Subtitle parts of Avatar)"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"We will discover that it pairs wonderfully with other components present in our library but this will be the subject of a dedicated page."}),"\n",(0,o.jsx)(e.h2,{id:"creating-the-avatar-component",children:"Creating the Avatar component"}),"\n",(0,o.jsx)(e.p,{children:"Think of this component as the container of all Avatar parts"}),"\n",(0,o.jsxs)(e.p,{children:["First we will create the master folder in:  ",(0,o.jsx)(e.code,{children:"\\src\\components\\Avatar\\"}),". Next we will start by creating a new component called Avatar. It will be the container component of our different parts to come. Also this will give the possibility to manage className and style for each part."]}),"\n",(0,o.jsx)(e.p,{children:"The component will accept the following props:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"vertical"}),": if you want to change orientation."]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Creating the file and adding the source code for the component."}),"\n",(0,o.jsxs)(p,{groupId:"js-ts",children:[(0,o.jsx)(x,{value:"js",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"logos:javascript",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",metastring:"title='\\src\\components\\Avatar\\AvatarContainer\\index.js'",children:"import React,  { CSSProperties } from 'react';\nimport clsx from 'clsx'; \n\nconst AvatarContainer = ({\n  className, // Custom classes for the component\n  style, // Custom styles for the component\n  children, // Content of the component\n  vertical = false, // Default to false for vertical position\n  \n}) => {   \n  const avatarPosition = vertical ? `avatar--vertical` :'';\n  \n  return (\n    <div className={clsx(\n          \"avatar\", \n          className,  \n          avatarPosition\n        )} \n        \n        style={style}>\n   \n    {children}\n  </div>\n  );\n}\n\nexport default AvatarContainer ;\n  \n"})})}),(0,o.jsx)(x,{value:"ts",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"logos:typescript-icon",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",metastring:"title='\\src\\components\\Avatar\\AvatarContainer\\index.tsx'",children:"import React, { CSSProperties, ReactNode } from 'react';\nimport clsx from 'clsx';\n\ninterface AvatarContainerProps {\n  className?: string; // Custom classes for the component\n  style?: CSSProperties; // Custom styles for the component\n  children: ReactNode; // Content of the component\n  vertical?: boolean; // Option for vertical position\n}\n\nconst AvatarContainer: React.FC<AvatarContainerProps> = ({\n  className, // Custom classes for the component\n  style, // Custom styles for the component\n  children, // Content of the component\n  vertical = false, // Default to false for vertical position\n}) => {   \n  const avatarPosition = vertical ? 'avatar--vertical' : '';\n\n  return (\n    <div className={clsx(\n          \"avatar\", \n          className, \n          avatarPosition\n        )} \n        \n        style={style}>\n\n      {children}\n    </div>\n  );\n}\n\nexport default AvatarContainer;\n\n"})})})]}),"\n",(0,o.jsx)(e.h2,{id:"creating-the-avatarimage-component",children:"Creating the AvatarImage component"}),"\n",(0,o.jsx)(e.p,{children:"Think of this component as the image of your futurs avatar element. Creating the file and adding the source code for the component.The component will accept the following props:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"avatarImageUrl"}),": The url of your image"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"avatarSize"}),": The option for avatar image size"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"alt"}),": The alt image text"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"title"}),": The title of image"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"link"}),": The option is for add link on your image, if link = true the component add link code and add Infima className ",(0,o.jsx)(e.code,{children:"avatar__photo-link"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"destination"}),": The option is if link is true for add url of link"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Creating the file and adding the source code for the component."}),"\n",(0,o.jsxs)(p,{groupId:"js-ts",children:[(0,o.jsx)(x,{value:"js",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"logos:javascript",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",metastring:"title='\\src\\components\\Avatar\\AvatarImage\\index.js'",children:"import React, { CSSProperties } from 'react';\nimport clsx from 'clsx'; \nimport useBaseUrl from '@docusaurus/useBaseUrl'; // Import the useBaseUrl function from Docusaurus for generate valide image url\n\nconst AvatarImage = ({\n  className, // Custom classes for the component\n  style, // Custom styles for the component\n  avatarImageUrl, // URL of the avatar image\n  alt, // Alt text for the image\n  title, // Title text for the image\n  link = false, // Default to false Determines if the image should be a link\n  destination = '#', // Link URL if link = true, default value if destination is not provided\n  avatarSize, // Size class for the avatar image\n}) => {   \n\n  const generatedAvatarUrl = useBaseUrl(avatarImageUrl);\n  const avatarimagesize = avatarSize ? `avatar__photo--${avatarSize}` :'';\n  const imgElement = (\n\n    <img\n      className={clsx(\n        \"avatar__photo\", \n        className, \n        avatarimagesize\n      )} \n      \n      style={style}\n\n      src={generatedAvatarUrl} \n      alt={alt} \n      title={title} />\n\n  );\n\n  return link ? (\n    <a\n      className=\"avatar__photo-link \"\n      href={destination}>\n      {imgElement}\n    </a>\n  ) : (\n    imgElement\n  );\n};\n\nexport default AvatarImage;\n  \n"})})}),(0,o.jsx)(x,{value:"ts",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"typescript-icon",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",metastring:"title='\\src\\components\\Avatar\\AvatarImage\\index.tsx'",children:"import React, { CSSProperties } from 'react';\nimport clsx from 'clsx'; \nimport useBaseUrl from '@docusaurus/useBaseUrl'; // Import the useBaseUrl function from Docusaurus for generate valide image url\n\ninterface AvatarImageProps {\n  className?: string; // Custom classes for the component\n  style?: CSSProperties; // Custom styles for the component\n  avatarImageUrl: string; // URL of the avatar image\n  alt: string; // Alt text for the image\n  title?: string; // Title text for the image\n  link?: boolean; // Determines if the image should be a link\n  destination?: string; // Link URL if link = true\n  avatarSize?: string; // Size class for the avatar image\n}\n\nconst AvatarImage: React.FC<AvatarImageProps> = ({\n  className, // Custom classes for the component\n  style, // Custom styles for the component\n  avatarImageUrl, // URL of the avatar image\n  alt, // Alt text for the image\n  title, // Title text for the image\n  link = false, // Default to false Determines if the image should be a link\n  destination = '#', // Link URL if link = true, default value if destination is not provided\n  avatarSize, // Size class for the avatar image\n}) => {   \n  const generatedAvatarUrl = useBaseUrl(avatarImageUrl);\n  const avatarImageSizeClass = avatarSize ? `avatar__photo--${avatarSize}` : '';\n  \n  const imgElement = (\n    <img\n      className={clsx(\n        \"avatar__photo\", \n        className, \n        avatarImageSizeClass\n      )}\n\n      style={style}\n      src={generatedAvatarUrl}\n      alt={alt}\n      title={title}\n\n    />\n  );\n\n  return link ? (\n    <a className=\"avatar__photo-link\" href={destination}>\n      {imgElement}\n    </a>\n  ) : (\n    imgElement\n  );\n};\n\nexport default AvatarImage;\n\n\n"})})})]}),"\n",(0,o.jsx)(e.h2,{id:"creating-the-avatarintro-component",children:"Creating the AvatarIntro component"}),"\n",(0,o.jsx)(e.p,{children:"Think of this component as the container of name and subtitle for your futurs avatar element. Creating the file and adding the source code for the component. The component will accept the following props:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"textAlign"}),": The option for text alignment ",(0,o.jsx)(e.code,{children:"left"})," ",(0,o.jsx)(e.code,{children:"right"})," ",(0,o.jsx)(e.code,{children:"center"})," ",(0,o.jsx)(e.code,{children:"justify"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"variant"}),": (optional)This will be used to apply different colors to the text based on the Infima CSS utility classNames."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"italic"}),": Default value is false, it's for italic text render"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"noDecoration"}),": Default value is false, it's for delete text decoration"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"transform"}),": The option for transform text to ",(0,o.jsx)(e.code,{children:"UPPERCASE TEXT"})," ",(0,o.jsx)(e.code,{children:"lowercase text"})," or ",(0,o.jsx)(e.code,{children:"Capitalize Text"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"breakWord"}),": The option for break text, the text will break at the a word boundary so it will not break in the middle of a word."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"truncate"}),": The option is for very long text that will be truncated if there is not enough space to display it in a single line on the screen. It's truncated by adding..."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"weight"}),": The option for text weight ",(0,o.jsx)(e.code,{children:"Bold"})," ",(0,o.jsx)(e.code,{children:"Semibold"})," ",(0,o.jsx)(e.code,{children:"Normal"})," ",(0,o.jsx)(e.code,{children:"Light"})]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Creating the file and adding the source code for the component."}),"\n",(0,o.jsxs)(p,{groupId:"js-ts",children:[(0,o.jsx)(x,{value:"js",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"javascript",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",metastring:"title='\\src\\components\\Avatar\\AvatarIntro\\index.js'",children:"import React,  { CSSProperties } from 'react';\nimport clsx from 'clsx'; \n\n\nconst AvatarIntro = ({\n  className, // Custom classes for the component\n  style, // Custom styles for the component\n  children, // Content of the component\n  textAlign, // Text alignment \n  variant, // Variant for text color \n  italic = false, // Default to false for italic text\n  noDecoration = false, // Default to false for no decoration\n  transform, // Text transform option \n  breakWord = false, // Default to false for break words\n  truncate = false, // Default to false for truncate\n  weight, // Weight of the text \n}) => {   \n\n  const textAlignClass = textAlign ? `text--${textAlign}` :'';\n  const textColor = variant ? `text--${variant}` : '';\n  const textItalic = italic ? 'text--italic' : '';\n  const textDecoration = noDecoration ? 'text-no-decoration' : '';\n  const textType = transform ? `text--${transform}` : '';\n  const textBreak = breakWord ? 'text--break' : '';\n  const textTruncate = truncate ? 'text--truncate' : '';\n  const textWeight = weight ? `text--${weight}` : '';\n  \n  return (\n  \n    <div className={clsx(\n        \"avatar__intro\", \n        className, \n        textAlignClass, \n        textType, \n        textColor, \n        textItalic, \n        textDecoration, \n        textBreak, \n        textTruncate, \n        textWeight\n    )} \n\n    style={style}\n    >\n     {children}\n\n    </div>\n\n  );\n}\n\nexport default AvatarIntro ;\n\n"})})}),(0,o.jsx)(x,{value:"ts",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"logos:typescript-icon",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",metastring:"title='\\src\\components\\Avatar\\AvatarIntro\\index.tsx'",children:"import React, { CSSProperties, ReactNode } from 'react';\nimport clsx from 'clsx'; \n\ninterface AvatarIntroProps {\n  className?: string; // Custom classes for the component\n  style?: CSSProperties; // Custom styles for the component\n  children: ReactNode; // Content of the component\n  textAlign?: 'left' | 'center' | 'right'; // Text alignment options\n  variant?: 'primary' | 'secondary' | 'danger' | 'warning' | 'success' | 'info' | 'link' | string;\n  italic?: boolean; // Determines if the text is italic\n  noDecoration?: boolean; // Determines if the text has no decoration\n  transform?: string; // Text transform option\n  breakWord?: boolean; // Determines if the text breaks words\n  truncate?: boolean; // Determines if the text is truncated\n  weight?: string; // Weight of the text \n}\n\nconst AvatarIntro: React.FC<AvatarIntroProps> = ({\n  className, // Custom classes for the component\n  style, // Custom styles for the component\n  children, // Content of the component\n  textAlign, // Text alignment \n  variant, // Variant for text color or style\n  italic = false, // Default to false for italic text\n  noDecoration = false, // Default to false for no decoration\n  transform, // Text transform option\n  breakWord = false, // Default to false for break words\n  truncate = false, // Default to false for truncate\n  weight, // Weight of the text \n}) => {   \n\n  const textAlignClass = textAlign ? `text--${textAlign}` : '';\n  const textColor = variant ? `text--${variant}` : '';\n  const textItalic = italic ? 'text--italic' : '';\n  const textDecoration = noDecoration ? 'text-no-decoration' : '';\n  const textType = transform ? `text--${transform}` : '';\n  const textBreak = breakWord ? 'text--break' : '';\n  const textTruncate = truncate ? 'text--truncate' : '';\n  const textWeight = weight ? `text--${weight}` : '';\n  \n  return (\n    <div \n      className={clsx(\n          \"avatar__intro\",\n          className,\n          textAlignClass,\n          textType,\n          textColor,\n          textItalic,\n          textDecoration,\n          textBreak,\n          textTruncate,\n          textWeight\n      )}\n      style={style}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default AvatarIntro;\n\n\n"})})})]}),"\n",(0,o.jsx)(e.h2,{id:"creating-the-avatarname-component",children:"Creating the AvatarName component"}),"\n",(0,o.jsx)(e.p,{children:"Think of this component as the Name or pseudonym of your futurs avatar element. Creating the file and adding the source code for the component. The component will accept the following props:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"textAlign"}),": The option for text alignment ",(0,o.jsx)(e.code,{children:"left"})," ",(0,o.jsx)(e.code,{children:"right"})," ",(0,o.jsx)(e.code,{children:"center"})," ",(0,o.jsx)(e.code,{children:"justify"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"variant"}),": (optional)This will be used to apply different colors to the text based on the Infima CSS utility classNames."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"italic"}),": Default value is false, it's for italic text render"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"noDecoration"}),": Default value is false, it's for delete text decoration"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"transform"}),": The option for transform text to ",(0,o.jsx)(e.code,{children:"UPPERCASE TEXT"})," ",(0,o.jsx)(e.code,{children:"lowercase text"})," or ",(0,o.jsx)(e.code,{children:"Capitalize Text"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"breakWord"}),": The option for break text, the text will break at the a word boundary so it will not break in the middle of a word."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"truncate"}),": The option is for very long text that will be truncated if there is not enough space to display it in a single line on the screen. It's truncated by adding..."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"weight"}),": The option for text weight ",(0,o.jsx)(e.code,{children:"Bold"})," ",(0,o.jsx)(e.code,{children:"Semibold"})," ",(0,o.jsx)(e.code,{children:"Normal"})," ",(0,o.jsx)(e.code,{children:"Light"})]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Creating the file and adding the source code for the component."}),"\n",(0,o.jsxs)(p,{groupId:"js-ts",children:[(0,o.jsx)(x,{value:"js",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"javascript",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",metastring:"title='\\src\\components\\Avatar\\AvatarName\\index.js'",children:"import React,  { CSSProperties } from 'react';\nimport clsx from 'clsx'; // Assurez-vous d'avoir clsx install\xe9 et import\xe9 correctement\n\n\nconst AvatarName = ({\n  className, // Custom classes for the component\n  style, // Custom styles for the component\n  children, // Content of the component\n  textAlign, // Text alignment \n  variant, // Variant for text color or style\n  italic = false, // Default to false for italic text\n  noDecoration = false, // Default to false for no decoration\n  transform, // Text transform option\n  breakWord = false, // Default to false for break words\n  truncate = false, // Default to false for truncate\n  weight, // Weight of the text \n  }) => {   \n    const textAlignClass = textAlign ? `text--${textAlign}` :'';\n    const textColor = variant ? `text--${variant}` : '';\n    const textItalic = italic ? 'text--italic' : '';\n    const textDecoration = noDecoration ? 'text-no-decoration' : '';\n    const textType = transform ? `text--${transform}` : '';\n    const textBreak = breakWord ? 'text--break' : '';\n    const textTruncate = truncate ? 'text--truncate' : '';\n    const textWeight = weight ? `text--${weight}` : '';\n  return (\n  \n    <div className={clsx(\n        \"avatar__name\", \n        className, \n        textAlignClass, \n        textType, \n        textColor, \n        textItalic, \n        textDecoration, \n        textBreak, \n        textTruncate, \n        textWeight\n    )} \n    style={style}>\n\n     {children}\n    </div>\n\n  );\n}\n\nexport default AvatarName ;\n\n"})})}),(0,o.jsx)(x,{value:"ts",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"typescript-icon",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",metastring:"title='\\src\\components\\Avatar\\AvatarName\\index.tsx'",children:"import React, { CSSProperties, ReactNode } from 'react';\nimport clsx from 'clsx'; \n\ninterface AvatarNameProps {\n  className?: string; // Custom classes for the component\n  style?: CSSProperties; // Custom styles for the component\n  children: ReactNode; // Content of the component\n  textAlign?: 'left' | 'center' | 'right'; // Text alignment options\n  variant?: 'primary' | 'secondary' | 'danger' | 'warning' | 'success' | 'info' | 'link' | string;\n  italic?: boolean; // Determines if the text is italic\n  noDecoration?: boolean; // Determines if the text has no decoration\n  transform?: string; // Text transform option \n  breakWord?: boolean; // Determines if the text breaks words\n  truncate?: boolean; // Determines if the text is truncated\n  weight?: string; // Weight of the text\n}\n\nconst AvatarName: React.FC<AvatarNameProps> = ({\n  className, // Custom classes for the component\n  style, // Custom styles for the component\n  children, // Content of the component\n  textAlign, // Text alignment \n  variant, // Variant for text color or style\n  italic = false, // Default to false for italic text\n  noDecoration = false, // Default to false for no decoration\n  transform, // Text transform option\n  breakWord = false, // Default to false for break words\n  truncate = false, // Default to false for truncate\n  weight, // Weight of the text \n}) => {   \n  const textAlignClass = textAlign ? `text--${textAlign}` : '';\n  const textColor = variant ? `text--${variant}` : '';\n  const textItalic = italic ? 'text--italic' : '';\n  const textDecoration = noDecoration ? 'text-no-decoration' : '';\n  const textType = transform ? `text--${transform}` : '';\n  const textBreak = breakWord ? 'text--break' : '';\n  const textTruncate = truncate ? 'text--truncate' : '';\n  const textWeight = weight ? `text--${weight}` : '';\n  \n  return (\n    <div \n      className={clsx(\n        \"avatar__name\", \n        className, \n        textAlignClass, \n        textType, \n        textColor, \n        textItalic, \n        textDecoration, \n        textBreak, \n        textTruncate, \n        textWeight\n      )} \n      style={style}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default AvatarName;\n\n\n"})})})]}),"\n",(0,o.jsx)(e.h2,{id:"creating-the-avatarsubtitle-component",children:"Creating the AvatarSubtitle component"}),"\n",(0,o.jsx)(e.p,{children:"Think of this component as the Subtitle (for exemple : Company Position at the company or bio) of your futurs avatar element. Creating the file and adding the source code for the component. The component will accept the following props:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"textAlign"}),": The option for text alignment ",(0,o.jsx)(e.code,{children:"left"})," ",(0,o.jsx)(e.code,{children:"right"})," ",(0,o.jsx)(e.code,{children:"center"})," ",(0,o.jsx)(e.code,{children:"justify"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"variant"}),": (optional)This will be used to apply different colors to the text based on the Infima CSS utility classNames."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"italic"}),": Default value is false, it's for italic text render"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"noDecoration"}),": Default value is false, it's for delete text decoration"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"transform"}),": The option for transform text to ",(0,o.jsx)(e.code,{children:"UPPERCASE TEXT"})," ",(0,o.jsx)(e.code,{children:"lowercase text"})," or ",(0,o.jsx)(e.code,{children:"Capitalize Text"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"breakWord"}),": The option for break text, the text will break at the a word boundary so it will not break in the middle of a word."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"truncate"}),": The option is for very long text that will be truncated if there is not enough space to display it in a single line on the screen. It's truncated by adding..."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"weight"}),": The option for text weight ",(0,o.jsx)(e.code,{children:"Bold"})," ",(0,o.jsx)(e.code,{children:"Semibold"})," ",(0,o.jsx)(e.code,{children:"Normal"})," ",(0,o.jsx)(e.code,{children:"Light"})]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Creating the file and adding the source code for the component."}),"\n",(0,o.jsxs)(p,{groupId:"js-ts",children:[(0,o.jsx)(x,{value:"js",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"javascript",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",metastring:"title='\\src\\components\\Avatar\\AvatarSubtitle\\index.js'",children:"import React,  { CSSProperties } from 'react';\nimport clsx from 'clsx'; \n\n\nconst AvatarSubtitle = ({\n  className, // Custom classes for the component\n  style, // Custom styles for the component\n  children, // Content of the component\n  textAlign, // Text alignment\n  variant, // Variant for text color or style\n  italic = false, // Default to false for italic text\n  noDecoration = false, // Default to false for no decoration\n  transform, // Text transform option\n  breakWord = false, // Default to false for break words\n  truncate = false, // Default to false for truncate\n  weight, // Weight of the text \n  }) => {   \n    const text = textAlign ? `text--${textAlign}` :'';\n    const textColor = variant ? `text--${variant}` : '';\n    const textItalic = italic ? 'text--italic' : '';\n    const textDecoration = noDecoration ? 'text-no-decoration' : '';\n    const textType = transform ? `text--${transform}` : '';\n    const textBreak = breakWord ? 'text--break' : '';\n    const textTruncate = truncate ? 'text--truncate' : '';\n    const textWeight = weight ? `text--${weight}` : '';\n  return (\n  \n    <small  className={clsx(\n          \"avatar__subtitle\", \n          className,\n          text, \n          textType, \n          textColor, \n          textItalic, \n          textDecoration, \n          textBreak, \n          textTruncate, \n          textWeight\n        )} \n        style={style}>\n\n    <> {children}</>\n    </small >\n\n  );\n}\n\n\nexport default AvatarSubtitle ;\n\n\n"})})}),(0,o.jsx)(x,{value:"ts",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"typescript-icon",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",metastring:"title='\\src\\components\\Avatar\\AvatarSubtitle\\index.tsx'",children:"import React, { CSSProperties, ReactNode } from 'react';\nimport clsx from 'clsx'; \n\ninterface AvatarSubtitleProps {\n  className?: string; // Custom classes for the component\n  style?: CSSProperties; // Custom styles for the component\n  children: ReactNode; // Content of the component\n  textAlign?: 'left' | 'center' | 'right'; // Text alignment options\n  variant?: 'primary' | 'secondary' | 'danger' | 'warning' | 'success' | 'info' | 'link' | string;\n  italic?: boolean; // Determines if the text is italic\n  noDecoration?: boolean; // Determines if the text has no decoration\n  transform?: string; // Text transform option \n  breakWord?: boolean; // Determines if the text breaks words\n  truncate?: boolean; // Determines if the text is truncated\n  weight?: string; // Weight of the text\n}\n\nconst AvatarSubtitle: React.FC<AvatarSubtitleProps> = ({\n  className, // Custom classes for the component\n  style, // Custom styles for the component\n  children, // Content of the component\n  textAlign, // Text alignment\n  variant, // Variant for text color or style\n  italic = false, // Default to false for italic text\n  noDecoration = false, // Default to false for no decoration\n  transform, // Text transform option\n  breakWord = false, // Default to false for break words\n  truncate = false, // Default to false for truncate\n  weight, // Weight of the text \n}) => {   \n  const textAlignClass = textAlign ? `text--${textAlign}` : '';\n  const textColor = variant ? `text--${variant}` : '';\n  const textItalic = italic ? 'text--italic' : '';\n  const textDecoration = noDecoration ? 'text-no-decoration' : '';\n  const textType = transform ? `text--${transform}` : '';\n  const textBreak = breakWord ? 'text--break' : '';\n  const textTruncate = truncate ? 'text--truncate' : '';\n  const textWeight = weight ? `text--${weight}` : '';\n  \n  return (\n    <small\n      className={clsx(\n        \"avatar__subtitle\",\n        className,\n        textAlignClass,\n        textType,\n        textColor,\n        textItalic,\n        textDecoration,\n        textBreak,\n        textTruncate,\n        textWeight\n      )}\n      style={style}\n    >\n      {children}\n    </small>\n  );\n}\n\nexport default AvatarSubtitle;\n\n"})})})]}),"\n",(0,o.jsx)(e.h2,{id:"mdx-component-scope",children:"MDX Component Scope"}),"\n",(0,o.jsxs)(e.p,{children:["To follow the Docusaurus documentation, we create a theme folder that will host the ",(0,o.jsx)(e.code,{children:"MDXComponents"})," file. This gives us ",(0,o.jsx)(e.code,{children:"src\\theme\\MDXComponents.*"}),". You may already have a ",(0,o.jsx)(e.code,{children:"src\\theme"})," folder or an ",(0,o.jsx)(e.code,{children:"MDXComponents"})," file if so - merge the changes described here with yours."]}),"\n",(0,o.jsxs)(p,{groupId:"js-ts",children:[(0,o.jsx)(x,{value:"js",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"javascript",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",metastring:'title="src\\theme\\MDXComponents.js"',children:"  import React from 'react';\n  // Importing the original mapper + our components according to the Docusaurus doc\n  import MDXComponents from '@theme-original/MDXComponents';\n  import AvatarContainer from '@site/src/components/Avatar/AvatarContainer';\n  import AvatarImage from '@site/src/components/Avatar/AvatarImage';\n  import AvatarIntro from '@site/src/components/Avatar/AvatarIntro';\n  import AvatarName from '@site/src/components/Avatar/AvatarName';\n  import AvatarSubtitle from '@site/src/components/Avatar/AvatarSubtitle';\n    \n\n  export default {\n    // Reusing the default mapping\n    ...MDXComponents,\n    AvatarContainer, \n    AvatarImage,\n    AvatarIntro,\n    AvatarName,\n    AvatarSubtitle,\n  };\n"})})}),(0,o.jsx)(x,{value:"ts",label:(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u,{name:"typescript-icon",size:24})," "]}),children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",metastring:'title="src\\theme\\MDXComponents.tsx"',children:"\n\n  import React from 'react';\n  // Importing the original mapper + our components according to the Docusaurus doc\n  import MDXComponents from '@theme-original/MDXComponents';\n  import AvatarContainer from '@site/src/components/Avatar/AvatarContainer';\n  import AvatarImage from '@site/src/components/Avatar/AvatarImage';\n  import AvatarIntro from '@site/src/components/Avatar/AvatarIntro';\n  import AvatarName from '@site/src/components/Avatar/AvatarName';\n  import AvatarSubtitle from '@site/src/components/Avatar/AvatarSubtitle';\n\n\n  export default {\n    // Reusing the default mapping\n    ...MDXComponents,\n    AvatarContainer, \n    AvatarImage,\n    AvatarIntro,\n    AvatarName,\n    AvatarSubtitle, \n  };\n"})})})]}),"\n",(0,o.jsx)(e.h2,{id:"using-the-avatar-component-in-an-mdx-file",children:"Using the Avatar Component in an MDX File"}),"\n",(0,o.jsx)(e.h3,{id:"avatar-classic-horizontal",children:"Avatar classic horizontal"}),"\n",(0,o.jsxs)(d,{children:[(0,o.jsx)(m,{className:"col--5",children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",children:"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n<AvatarContainer>  \n<AvatarImage avatarSize='lg' avatarImageUrl=\"https://avatars.githubusercontent.com/u/97809069?v=4\" link destination='https://github.com/Juniors017'/>\n<AvatarIntro>\n<AvatarName style={{color:'white'}} > Docux </AvatarName>\n<AvatarSubtitle  className='primary'>humble contributor on :   <a style={{ color:'white'}}  href=\"https://docusaurus.community/\">@Doc.Community</a></AvatarSubtitle>\n</AvatarIntro>\n</AvatarContainer>\n"})})}),(0,o.jsxs)(m,{className:"col--7 text--justify",children:[(0,o.jsx)("p",{children:"Lorem ipsum dolor sit amet, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}),(0,o.jsxs)(a,{children:[(0,o.jsx)(i,{avatarSize:"lg",avatarImageUrl:"https://avatars.githubusercontent.com/u/97809069?v=4",link:!0,destination:"https://github.com/Juniors017"}),(0,o.jsxs)(s,{children:[(0,o.jsx)(l,{style:{color:"white"},children:" Docux "}),(0,o.jsxs)(c,{className:"primary",children:["humble contributor on :   ",(0,o.jsx)("a",{style:{color:"white"},href:"https://docusaurus.community/",children:"@Doc.Community"})]})]})]})]})]}),"\n",(0,o.jsx)(e.h3,{id:"avatar-type-post-horizontal",children:"Avatar type post horizontal"}),"\n",(0,o.jsxs)(d,{children:[(0,o.jsx)(m,{className:"col--6",children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",children:"<AvatarContainer>  \n<AvatarImage avatarSize='xs' avatarImageUrl=\"https://avatars.githubusercontent.com/u/97809069?v=4\" link destination='https://github.com/Juniors017'/>\n<AvatarIntro>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n<AvatarName style={{color:'white'}} > Docux </AvatarName>\n<AvatarSubtitle  className='primary'>humble contributor on :   <a style={{ color:'white'}}  href=\"https://docusaurus.community/\">@Doc.Community</a></AvatarSubtitle>\n</AvatarIntro>\n</AvatarContainer>\n"})})}),(0,o.jsx)(m,{className:"col--6 text--justify",children:(0,o.jsxs)(a,{children:[(0,o.jsx)(i,{avatarSize:"xs",avatarImageUrl:"https://avatars.githubusercontent.com/u/97809069?v=4",link:!0,destination:"https://github.com/Juniors017"}),(0,o.jsxs)(s,{children:[(0,o.jsx)("p",{children:"Lorem ipsum dolor sit amet, eprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}),(0,o.jsx)(l,{style:{color:"white"},children:" Docux "}),(0,o.jsxs)(c,{className:"primary",children:["humble contributor on :   ",(0,o.jsx)("a",{style:{color:"white"},href:"https://docusaurus.community/",children:"@Doc.Community"})]})]})]})})]}),"\n",(0,o.jsx)(e.h3,{id:"avatar-classic-vertical",children:"Avatar classic vertical"}),"\n",(0,o.jsxs)(d,{children:[(0,o.jsx)(m,{className:"col--5",children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",children:"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n<AvatarContainer vertical>  \n<AvatarImage  avatarSize='lg' avatarImageUrl=\"https://avatars.githubusercontent.com/u/97809069?v=4\" link destination='https://github.com/Juniors017'/>\n<AvatarIntro>\n<AvatarName className='text--info' > Docux </AvatarName>\n<AvatarSubtitle  className='text--primary'>humble contributor on :   <a style={{ color:'white'}}  href=\"https://docusaurus.community/\">@Doc.Community</a></AvatarSubtitle>\n</AvatarIntro>\n</AvatarContainer>\n"})})}),(0,o.jsxs)(m,{className:"col--7 text--justify",children:[(0,o.jsx)("p",{children:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}),(0,o.jsx)(e.hr,{}),(0,o.jsxs)(a,{vertical:!0,children:[(0,o.jsx)(i,{avatarSize:"lg",avatarImageUrl:"https://avatars.githubusercontent.com/u/97809069?v=4",link:!0,destination:"https://github.com/Juniors017"}),(0,o.jsxs)(s,{children:[(0,o.jsx)(l,{className:"text--info",children:" Docux "}),(0,o.jsxs)(c,{className:"text--primary",children:["humble contributor on :   ",(0,o.jsx)("a",{style:{color:"white"},href:"https://docusaurus.community/",children:"@Doc.Community"})]})]})]})]})]}),"\n",(0,o.jsx)(e.h3,{id:"various--styles",children:"Various  styles"}),"\n",(0,o.jsxs)(d,{children:[(0,o.jsx)(m,{className:"col--6",children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",children:"<AvatarContainer vertical>  \n<AvatarIntro>\n<AvatarName className='text--danger' > Docux </AvatarName>\n<AvatarSubtitle  className='text--danger'>humble contributor on :   <a style={{ color:'white'}}  href=\"https://docusaurus.community/\">@Doc.Community</a></AvatarSubtitle>\n</AvatarIntro>\n<AvatarImage  avatarSize='xs' avatarImageUrl=\"https://avatars.githubusercontent.com/u/97809069?v=4\" link destination='https://github.com/Juniors017'/>\n</AvatarContainer>\n"})})}),(0,o.jsx)(m,{children:(0,o.jsxs)(a,{vertical:!0,className:"padding-vert--lg",children:[(0,o.jsxs)(s,{children:[(0,o.jsx)(l,{className:"text--danger",children:" Docux "}),(0,o.jsxs)(c,{className:"text--danger",children:["humble contributor on :   ",(0,o.jsx)("a",{style:{color:"white"},href:"https://docusaurus.community/",children:"@Doc.Community"})]})]}),(0,o.jsx)(i,{avatarSize:"xs",avatarImageUrl:"https://avatars.githubusercontent.com/u/97809069?v=4",link:!0,destination:"https://github.com/Juniors017"})]})}),(0,o.jsx)(m,{className:"col--6",children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",children:"<AvatarContainer className='padding-vert--lg' > \n<AvatarIntro>\n<AvatarName className='text--warning' > Docux </AvatarName>\n</AvatarIntro>\n<AvatarImage  avatarSize='xs' avatarImageUrl=\"https://avatars.githubusercontent.com/u/97809069?v=4\" link destination='https://github.com/Juniors017'/>\n</AvatarContainer>\n"})})}),(0,o.jsx)(m,{className:"col--6",children:(0,o.jsx)("center",{children:(0,o.jsxs)(a,{className:"padding-vert--lg padding-horiz--xl",children:[(0,o.jsx)(s,{children:(0,o.jsx)(l,{className:"text--warning",children:" Docux "})}),(0,o.jsx)(i,{avatarSize:"xs",avatarImageUrl:"https://avatars.githubusercontent.com/u/97809069?v=4",link:!0,destination:"https://github.com/Juniors017"})]})})})]}),"\n",(0,o.jsxs)(d,{children:[(0,o.jsx)(m,{className:"col--8",children:(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",children:"<AvatarContainer vertical>  \n<AvatarIntro>\n<AvatarImage  avatarSize='xs' avatarImageUrl=\"https://avatars.githubusercontent.com/u/97809069?v=4\" link destination='https://github.com/Juniors017'/>\n<AvatarName className='text--warning' >Docux</AvatarName>\n</AvatarIntro>\n</AvatarContainer>\n"})})}),(0,o.jsx)(m,{className:"col--4",children:(0,o.jsx)(a,{className:"padding-vert--lg",vertical:!0,children:(0,o.jsxs)(s,{children:[(0,o.jsx)(i,{avatarSize:"xs",avatarImageUrl:"https://avatars.githubusercontent.com/u/97809069?v=4",link:!0,destination:"https://github.com/Juniors017"}),(0,o.jsx)(l,{className:"text--warning",children:"Docux"})]})})})]}),"\n",(0,o.jsx)(e.h3,{id:"various-sizes",children:"Various sizes"}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsx)(i,{avatarSize:"xl",avatarImageUrl:"https://avatars.githubusercontent.com/u/97809069?v=4",link:!0,destination:"https://github.com/Juniors017"}),(0,o.jsxs)(s,{children:[(0,o.jsx)(l,{className:"text--info",children:" Docux "}),(0,o.jsxs)(c,{className:"text--primary",children:["humble contributor on :   ",(0,o.jsx)("a",{style:{color:"white"},href:"https://docusaurus.community/",children:"@Doc.Community"})]})]})]}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsx)(i,{avatarSize:"lg",avatarImageUrl:"https://avatars.githubusercontent.com/u/97809069?v=4",link:!0,destination:"https://github.com/Juniors017"}),(0,o.jsxs)(s,{children:[(0,o.jsx)(l,{className:"text--info",children:" Docux "}),(0,o.jsxs)(c,{className:"text--primary",children:["humble contributor on :   ",(0,o.jsx)("a",{style:{color:"white"},href:"https://docusaurus.community/",children:"@Doc.Community"})]})]})]}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsx)(i,{avatarSize:"xs",avatarImageUrl:"https://avatars.githubusercontent.com/u/97809069?v=4",link:!0,destination:"https://github.com/Juniors017"}),(0,o.jsxs)(s,{children:[(0,o.jsx)(l,{className:"text--info",children:" Docux "}),(0,o.jsxs)(c,{className:"text--primary",children:["humble contributor on :   ",(0,o.jsx)("a",{style:{color:"white"},href:"https://docusaurus.community/",children:"@Doc.Community"})]})]})]})]})}function d(t={}){let{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(m,{...t})}):m(t)}function h(t,e){throw Error("Expected "+(e?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}},7405:t=>{t.exports=JSON.parse('{"permalink":"/blog/avatarcomponent-docusaurus-infima","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/08/29/avatarcomponent/index.mdx","source":"@site/blog/2025/08/29/avatarcomponent/index.mdx","title":"Component Avatar","description":"A complete tutorial to design and customize an Avatar component in Docusaurus, based on Infima. Includes JS/TS examples, props, advanced integration and best practices.","date":"2025-08-29T00:00:00.000Z","tags":[{"inline":true,"label":"avatar","permalink":"/blog/tags/avatar"},{"inline":true,"label":"infima","permalink":"/blog/tags/infima"},{"inline":true,"label":"component","permalink":"/blog/tags/component"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"front-end","permalink":"/blog/tags/front-end"},{"inline":true,"label":"customization","permalink":"/blog/tags/customization"}],"readingTime":20.23,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Component Avatar","description":"A complete tutorial to design and customize an Avatar component in Docusaurus, based on Infima. Includes JS/TS examples, props, advanced integration and best practices.","schemaTypes":["HowTo","BlogPosting"],"slug":"avatarcomponent-docusaurus-infima","image":"/img/timeline.webp","authors":["docux"],"mainTag":"infima","tags":["avatar","infima","component","tutorial","front-end","customization"],"date":"2025-08-29T00:00:00.000Z","last_update":{"date":"2025-08-29T00:00:00.000Z","author":"docux"},"difficulty":"Beginner to Intermediate","totalTime":"PT10M","prepTime":"PT2M","performTime":"PT8M","estimatedCost":"Free","tool":["React","Docusaurus","Infima","VSCode"],"supply":["Node.js","Docusaurus","Infima"],"yield":"Customizable and reusable Avatar component","genre":"Technical Tutorial","inLanguage":"en","isAccessibleForFree":true,"readingTime":"7 min","articleSection":"Tutorial","copyrightYear":2025,"copyrightHolder":"Docux","category":"Web Development","keywords":["avatar","infima","component","tutorial","front-end","customization"],"hide_table_of_contents":false,"series":"infima components","blueSkyRecordKey":"3lxoqtinrbc2g"},"unlisted":false,"prevItem":{"title":"Component Columns","permalink":"/blog/columns-component-docusaurus-infima"}}')},8453:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>s});var a=n(6540);let o={},r=a.createContext(o);function i(t){let e=a.useContext(r);return a.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:i(t.components),a.createElement(r.Provider,{value:e},t.children)}},9979:(t,e,n)=>{n.d(e,{A:()=>a});let a=n.p+"assets/images/timeline-6a5a8fc35f4c129db06378c2f0d43e6b.webp"}}]);