"use strict";(globalThis.webpackChunkdocux_blog=globalThis.webpackChunkdocux_blog||[]).push([[8483],{6228:(e,n,o)=>{o.d(n,{A:()=>t});let t=o.p+"assets/images/remarkreplace-47864ac06af185b1511cd4ff23a23153.webp"},6831:e=>{e.exports=JSON.parse('{"permalink":"/blog/remark-replace-words-plugin","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/10/06/remarkreplace/index.mdx","source":"@site/blog/2025/10/06/remarkreplace/index.mdx","title":"Plugin Remark Replace Words","description":"Automatically replace words with text, icons, or MDX components (Tooltip, buttons\u2026) in your pages/blog/docs with a configurable Remark plugin.","date":"2025-10-07T00:00:00.000Z","tags":[{"inline":true,"label":"remark","permalink":"/blog/tags/remark"},{"inline":true,"label":"mdx","permalink":"/blog/tags/mdx"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"glossary","permalink":"/blog/tags/glossary"},{"inline":true,"label":"tooltip","permalink":"/blog/tags/tooltip"},{"inline":true,"label":"icon","permalink":"/blog/tags/icon"},{"inline":true,"label":"replacement","permalink":"/blog/tags/replacement"}],"readingTime":6.68,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Plugin Remark Replace Words","slug":"remark-replace-words-plugin","description":"Automatically replace words with text, icons, or MDX components (Tooltip, buttons\u2026) in your pages/blog/docs with a configurable Remark plugin.","schemaTypes":["HowTo","BlogPosting"],"image":"/img/remarkreplace.webp","authors":["docux"],"mainTag":"remarkPlugins","tags":["remark","mdx","plugin","glossary","tooltip","icon","replacement"],"date":"2025-10-07T00:00:00.000Z","difficulty":"intermediate","totalTime":"PT30M","yield":"Configurable word replacement plugin.","genre":"Technical Tutorial","inLanguage":"en","readingTime":"16 min","copyrightYear":2025,"copyrightHolder":"Docux","keywords":["docusaurus","remark replace words","mdx replace","glossary","tooltip","icons","replacements json"],"hide_table_of_contents":false,"series":"Docusaurus Plugins","blueSkyRecordKey":"3m2ljvfomz22t"},"unlisted":false,"prevItem":{"title":"Component Trees","permalink":"/blog/trees-component-docusaurus"},"nextItem":{"title":"ScrollToTopButton Component","permalink":"/blog/docusaurus-scroll-to-top-button"}}')},8230:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});var t=o(6831),i=o(4848),r=o(8453);let s={title:"Plugin Remark Replace Words",slug:"remark-replace-words-plugin",description:"Automatically replace words with text, icons, or MDX components (Tooltip, buttons\u2026) in your pages/blog/docs with a configurable Remark plugin.",schemaTypes:["HowTo","BlogPosting"],image:"/img/remarkreplace.webp",authors:["docux"],mainTag:"remarkPlugins",tags:["remark","mdx","plugin","glossary","tooltip","icon","replacement"],date:new Date("2025-10-07T00:00:00.000Z"),difficulty:"intermediate",totalTime:"PT30M",yield:"Configurable word replacement plugin.",genre:"Technical Tutorial",inLanguage:"en",readingTime:"16 min",copyrightYear:2025,copyrightHolder:"Docux",keywords:["docusaurus","remark replace words","mdx replace","glossary","tooltip","icons","replacements json"],hide_table_of_contents:!1,series:"Docusaurus Plugins",blueSkyRecordKey:"3m2ljvfomz22t"},l=void 0,a={authorsImageUrls:[void 0]},c=[{value:"Why this plugin?",id:"why-this-plugin",level:2},{value:"Plugin code",id:"plugin-code",level:2},{value:"JSON configuration",id:"json-configuration",level:3},{value:"Installation and setup",id:"installation-and-setup",level:2},{value:"Strategy",id:"strategy",level:3},{value:"Concrete replacement examples",id:"concrete-replacement-examples",level:2},{value:"Word \u2192 Word (plain text)",id:"word--word-plain-text",level:3},{value:"Word \u2192 Icon (LogoIcon)",id:"word--icon-logoicon",level:3},{value:"Word \u2192 Tooltip",id:"word--tooltip",level:3},{value:"Word \u2192 Clickable image (ImageOnClick)",id:"word--clickable-image-imageonclick",level:3},{value:"Important behaviors to know",id:"important-behaviors-to-know",level:2},{value:"Why MDX/MD instead of JSX/TSX pages?",id:"why-mdxmd-instead-of-jsxtsx-pages",level:2},{value:"Example of the report log",id:"example-of-the-report-log",level:2}];function d(e){let n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{ImageOnClick:t,LogoIcon:s,Snippet:l,Tooltip:a}=n;return t||h("ImageOnClick",!0),s||h("LogoIcon",!0),l||h("Snippet",!0),a||h("Tooltip",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("center",{children:(0,i.jsxs)("div",{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/Juniors017",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/Developer-Docux-green.svg",alt:"Developer"})}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/Juniors017",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/Development-passed-green.svg",alt:"Development"})}),"\n",(0,i.jsx)(n.a,{href:"https://opensource.org/licenses/MIT",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/License-MIT-yellow.svg",alt:"License: MIT"})}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/Juniors017",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/AI-90%25-blue.svg",alt:"AI 90%"})})]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:o(6228).A+"",width:"1056",height:"633"})})]})}),"\n",(0,i.jsxs)("div",{className:"text--justify",children:[(0,i.jsx)(n.p,{children:"This remark/MDX plugin automatically replaces certain words in your .mdx/.md content with other text, an icon, or even a React component (e.g., Tooltip). It\u2019s ideal for keeping terminology consistent, adding contextual help, or \u201Cstyling\u201D recurring keywords."}),(0,i.jsxs)(n.p,{children:["The plugin walks Markdown/MDX text nodes, skips certain parents (links, headings, code\u2026), merges ",(0,i.jsx)(n.code,{children:"all"})," + the current section (",(0,i.jsx)(n.code,{children:"blog"}),"/",(0,i.jsx)(n.code,{children:"pages"}),"/",(0,i.jsx)(n.code,{children:"docs"}),"), sorts keys by decreasing length, then replaces with plain text or MDX components. Matching is Unicode\u2011safe to avoid false positives inside words."]}),(0,i.jsx)(n.admonition,{title:"Interactive glossary",type:"tip",children:(0,i.jsxs)(n.p,{children:["Combined with a ",(0,i.jsx)(n.code,{children:"Tooltip"})," component, this plugin lets you build a real interactive glossary: authors write plain Markdown, and the plugin replaces terms with rich components (tooltips, icons, buttons) without extra effort."]})})]}),"\n","\n",(0,i.jsx)(n.h2,{id:"why-this-plugin",children:"Why this plugin?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Standardize brand or team terms (e.g., product names)"}),"\n",(0,i.jsx)(n.li,{children:"Automatically substitute words or components"}),"\n",(0,i.jsx)(n.li,{children:"Centralize replacement rules in a simple per\u2011section JSON file (blog, pages, docs)"}),"\n",(0,i.jsx)(n.li,{children:"Keep Markdown/MDX clean and readable, without intrusive tags or components"}),"\n",(0,i.jsx)(n.li,{children:"Easier maintenance: a change in JSON propagates everywhere"}),"\n",(0,i.jsx)(n.li,{children:"And why not?"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"plugin-code",children:"Plugin code"}),"\n",(0,i.jsxs)(n.p,{children:["Create a folder ",(0,i.jsx)(n.code,{children:"plugins/remark-replace-words"})," in your Docusaurus project, with a file: ",(0,i.jsx)(n.code,{children:"index.js"})," (the plugin)."]}),"\n",(0,i.jsx)(l,{filename:"plugins/remark-replace-words/index.js",source:"plugins/remark-replace-words/index.js",code:"import { visit } from 'unist-util-visit';\nimport mapping from './replacements.json' with { type: \"json\" };\n\nconst DEBUG = true;\nconst stats = {};\n\nfunction escapeRegex(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n\nfunction isForbiddenParent(parent, replacementComponentNames) {\n  if (!parent) return false;\n\n  if (\n    parent.type === 'link' ||\n    parent.type === 'linkReference' ||\n    parent.type === 'definition' ||\n    parent.type === 'code' ||\n    parent.type === 'inlineCode' ||\n    parent.type === 'heading' || \n    parent.type === 'image' ||\n    parent.type === 'imageReference'\n  ) {\n    return true;\n  }\n\n  if (\n    (parent.type === 'mdxJsxFlowElement' || parent.type === 'mdxJsxTextElement') && (\n      parent.name === 'a' || \n      replacementComponentNames.has(parent.name)  )\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport default function remarkReplaceFromJson() {\n  return (tree, file) => {\n    const filePath = (file.path || '').replace(/\\\\/g, '/');\n    let type = 'pages';\n    if (filePath.includes('/blog/')) type = 'blog';\n    else if (filePath.includes('/docs/')) type = 'docs';\n    else if (filePath.includes('/pages/')) type = 'pages';\n\n    const allMapping = mapping.all || {};\n    const typeMapping = mapping[type] || {};\n    const mergedMapping = { ...allMapping, ...typeMapping };\n\n    const replacementComponentNames = new Set(\n      Object.values(mergedMapping)\n        .map((c) => c.component)\n        .filter(Boolean)\n    );\n\n    const entries = Object.entries(mergedMapping).sort((a, b) => b[0].length - a[0].length);\n\n    visit(tree, 'text', (node, index, parent) => {\n      if (isForbiddenParent(parent, replacementComponentNames)) return;\n      if (!node.value || typeof node.value !== 'string') return;\n\n      node.value = node.value.normalize('NFC');\n\n      let fragments = [{ type: 'text', value: node.value }];\n      let replaced = false;\n\n      for (const [word, conf] of entries) {\n        if (!word) continue;\n        const safe = escapeRegex(word);\n\n       const regex = new RegExp(\n  `(?<![\\\\p{L}\\\\p{N}_/\"'\u2019-])${safe}(?!(?:[\\\\p{L}\\\\p{N}_/\"'\u2019-]|\\\\.[\\\\p{L}\\\\p{N}]))`,\n  'giu'\n);\n\n        fragments = fragments.flatMap((frag) => {\n          if (frag.type !== 'text') return [frag];\n          if (!regex.test(frag.value)) return [frag];\n          regex.lastIndex = 0;\n\n          const parts = frag.value.split(regex);\n            const matches = frag.value.match(regex) || [];\n          if (!matches.length) return [frag];\n\n          replaced = true;\n          if (DEBUG) {\n            stats[filePath] = stats[filePath] || {};\n            stats[filePath][word] = (stats[filePath][word] || 0) + matches.length;\n          }\n\n          const newNodes = [];\n          parts.forEach((part, i) => {\n            if (part) newNodes.push({ type: 'text', value: part });\n            if (i < matches.length) {\n              const compName = conf.component;\n              const replacementLabel = conf.children || matches[i];\n\n              if (compName) {\n                const isInline =\n                  parent.type === 'paragraph' ||\n                  parent.type === 'mdxJsxFlowElement' ||\n                  parent.type === 'emphasis' ||\n                  parent.type === 'strong' ||\n                  parent.type === 'delete' ||\n                  parent.type === 'listItem';\n                const nodeType = isInline ? 'mdxJsxTextElement' : 'mdxJsxFlowElement';\n                newNodes.push({\n                  type: nodeType,\n                  name: compName,\n                  attributes: Object.entries(conf.props || {}).map(([key, value]) => ({\n                    type: 'mdxJsxAttribute',\n                    name: key,\n                    value,\n                  })),\n                  children: replacementLabel ? [{ type: 'text', value: replacementLabel }] : [],\n                });\n              } else {\n\n                newNodes.push({ type: 'text', value: replacementLabel });\n              }\n            }\n          });\n          return newNodes;\n        });\n      }\n\n      if (replaced) {\n        parent.children.splice(index, 1, ...fragments);\n      }\n    });\n\n    if (DEBUG && Object.keys(stats).length > 0 && !global.__remarkReplaceWordsReported) {\n      global.__remarkReplaceWordsReported = true;\n      setTimeout(() => {\n        global.__remarkReplaceWordsReported = false;\n        const typeTotals = { blog: {}, pages: {}, docs: {}, all: {} };\n\n        for (const [file, words] of Object.entries(stats)) {\n          let type = 'pages';\n          const normalized = file.replace(/\\\\/g, '/');\n          if (normalized.includes('/blog/')) type = 'blog';\n          else if (normalized.includes('/docs/')) type = 'docs';\n          else if (normalized.includes('/pages/')) type = 'pages';\n\n          for (const [word, count] of Object.entries(words)) {\n            if (mapping.all && Object.prototype.hasOwnProperty.call(mapping.all, word)) {\n              typeTotals.all[word] = (typeTotals.all[word] || 0) + count;\n            } else {\n              typeTotals[type][word] = (typeTotals[type][word] || 0) + count;\n            }\n          }\n        }\n\n        console.log(\"\\n=== Rapport de remplacements Remark ===\");\n        for (const type of ['blog', 'pages', 'docs', 'all']) {\n          const words = typeTotals[type];\n          if (Object.keys(words).length > 0) {\n            console.log(`[${type}]`);\n            for (const [word, count] of Object.entries(words)) {\n              console.log(`- \\\"${word}\\\" remplac\xe9 ${count} fois`);\n            }\n          }\n        }\n        console.log(\"======================================\\n\");\n      }, 5000);\n    }\n  };\n}\n\n",lang:"javascript"}),"\n",(0,i.jsx)(n.h3,{id:"json-configuration",children:"JSON configuration"}),"\n",(0,i.jsxs)(n.p,{children:["In your ",(0,i.jsx)(n.code,{children:"plugins/remark-replace-words"})," folder, add a file: ",(0,i.jsx)(n.code,{children:"replacements.json"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Replacements are driven by ",(0,i.jsx)(n.code,{children:"plugins/remark-replace-words/replacements.json"}),". It contains 4 top\u2011level keys:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"all"}),": global replacements (all sections)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"blog"}),": replacements specific to blog posts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pages"}),": replacements for pages"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"docs"}),": replacements for documentation"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Each entry uses the word to detect as the key, and an object as the value:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"component"})," (optional): name of the MDX component to inject (e.g., Tooltip, LogoIcon)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"props"})," (optional): props passed to the component"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"children"})," (optional): component\u2019s child text; if missing, the matched word is reused"]}),"\n"]}),"\n",(0,i.jsx)(l,{filename:"plugins/remark-replace-words/replacements.json",source:"plugins/remark-replace-words/replacements.json",code:'{\n  "all": {\n    "Giti": {\n      "component": "Tooltip",\n      "props": { "text": "DocuxLab" },\n      "children": "Global replacement"\n    },\n    "doculab": {\n      "component": "Tooltip",\n      "props": { "text": "dokidoki" },\n      "children": "Global replacement"\n    }\n  },\n  "blog": {\n    "kiki": {\n      "component": "Tooltip",\n      "props": { "text": "Appears at the bottom", "position": "bottom", "model": "teacher" },\n      "children": "my new word"\n    },\n    \n    "schema-diagram": {\n      "component": "ImageOnClick",\n      "props": {\n        "imageUrl": "/img/remarkreplace.png",\n        "altText": "Architecture diagram",\n        "buttonName": "Click me"\n      }\n    },\n    "Cavo": {\n      "children": "grandpa Christophe"\n    },\n    "goatcounter": {\n      "component": "a",\n      "props": { "href":"https://www.goatcounter.com/" },\n      "children": "Goatcounter"\n    },\n    "cta-docs": {\n      "component": "DocusaurusButton",\n      "props": { "to": "/img/remarkreplace.png", "label": "Read Docs" },\n      "children": "Read the documentation"\n    },\n    "nana": {\n      "component": "LogoIcon",\n      "props": { "name": "logos:css-3", "size": "124" }\n    },\n    "roki": {\n      "component": "LogoIcon",\n      "props": { "name": "docusaurus", "size": "124" }\n    },\n    "node": {\n      "component": "LogoIcon",\n      "props": { "name": "logos:nodejs-icon", "size": 64 }\n    }\n  },\n  "pages": {\n    "nana": {\n      "component": "LogoIcon",\n      "props": { "name": "ccs-3", "size": "124" }\n    },\n    "roki": {\n      "component": "LogoIcon",\n      "props": { "name": "docusaurus", "size": "124" }\n    },\n    "node": {\n      "component": "LogoIcon",\n      "props": { "name": "logos:nodejs-icon", "size": 64 }\n    },\n    "schema-diagram": {\n      "component": "ImageOnClick",\n      "props": {\n        "imageUrl": "/img/DocuxLab.png",\n        "altText": "Architecture diagram",\n        "buttonName": "View diagram"\n      }\n    }\n  },\n  "docs": {\n    "kiki": {\n      "component": "Tooltip",\n      "props": { "text": "Documentation" },\n      "children": "Docux Docs"\n    }\n  }\n}',lang:"json"}),"\n",(0,i.jsx)(n.h2,{id:"installation-and-setup",children:"Installation and setup"}),"\n",(0,i.jsxs)(n.p,{children:["The plugin is already present in this repo under ",(0,i.jsx)(n.code,{children:"plugins/remark-replace-words"}),". To enable it in Docusaurus, it\u2019s referenced in ",(0,i.jsx)(n.code,{children:"docusaurus.config.js"})," at the Blog, Pages, and Docs presets level."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="docusaurus.config.js"',children:'// ...imports\nimport remarkReplaceWords from "./plugins/remark-replace-words/index.js"\n\nexport default {\n  // ...\n  presets: [\n    [\n      \'classic\',\n      ({\n        blog: {\n          remarkPlugins: [\n            // ...\n            [remarkReplaceWords, "blog"],\n          ],\n        },\n        pages: {\n          remarkPlugins: [\n            // ...\n            [remarkReplaceWords, "pages"],\n          ],\n        },\n        // If you have a Docs section\n        docs: {\n          remarkPlugins: [\n            // ...\n            [remarkReplaceWords, "docs"],\n          ],\n        },\n      })\n    ]\n  ]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:['The second argument ("blog" | "pages" | "docs") selects a specific section in the configuration JSON. An ',(0,i.jsx)(n.code,{children:"all"})," block is also available for global replacements."]}),"\n",(0,i.jsx)(n.h3,{id:"strategy",children:"Strategy"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Section detection from the file path (",(0,i.jsx)(n.code,{children:"/blog/"}),", ",(0,i.jsx)(n.code,{children:"/pages/"}),", ",(0,i.jsx)(n.code,{children:"/docs/"}),"), otherwise fallback to ",(0,i.jsx)(n.code,{children:"pages"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Mapping merge: ",(0,i.jsx)(n.code,{children:"merged = { ...mapping.all, ...mapping[section] }"})," to support global then section\u2011specific rules."]}),"\n",(0,i.jsx)(n.li,{children:"Unicode NFC normalization to stabilize accents (\xe9, \xe8, \xea, \xf4, \xe7, \u0153, \xef, \u2026)."}),"\n",(0,i.jsxs)(n.li,{children:["Ignored parents to avoid unwanted replacements:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Markdown/MDX: ",(0,i.jsx)(n.code,{children:"link"}),", ",(0,i.jsx)(n.code,{children:"linkReference"}),", ",(0,i.jsx)(n.code,{children:"definition"}),", ",(0,i.jsx)(n.code,{children:"code"}),", ",(0,i.jsx)(n.code,{children:"inlineCode"}),", ",(0,i.jsx)(n.code,{children:"heading"}),", ",(0,i.jsx)(n.code,{children:"image"}),", ",(0,i.jsx)(n.code,{children:"imageReference"}),", ",(0,i.jsx)(n.code,{children:"blockquote"}),", ",(0,i.jsx)(n.code,{children:"url"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["MDX JSX: ",(0,i.jsx)(n.code,{children:"a"})," tag and any component already inserted by a previous replacement (prevents re\u2011traversal)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Pre\u2011collect replacement component names (Set) to detect them during the visit and short\u2011circuit."}),"\n",(0,i.jsx)(n.li,{children:"Sort replacement keys by decreasing length to prevent overlaps (longest first)."}),"\n",(0,i.jsxs)(n.li,{children:["Robust Unicode word\u2011boundary regex to avoid matching inside a word and when adjacent to ",(0,i.jsx)(n.code,{children:"_ - / \" ' \u2019"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"(?<![\\p{L}\\p{N}_/\"'\u2019-])word(?![\\p{L}\\p{N}_/\"'\u2019-])"})," with ",(0,i.jsx)(n.code,{children:"giu"})," flags."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Replace by fragments: split the text and insert either plain text or an MDX element (",(0,i.jsx)(n.code,{children:"mdxJsxTextElement"})," inline, ",(0,i.jsx)(n.code,{children:"mdxJsxFlowElement"})," block) with ",(0,i.jsx)(n.code,{children:"name"}),", ",(0,i.jsx)(n.code,{children:"attributes"})," (props) and ",(0,i.jsx)(n.code,{children:"children"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"children"})," choice: if ",(0,i.jsx)(n.code,{children:"children"})," is defined in JSON, use it; otherwise reuse the captured value."]}),"\n",(0,i.jsxs)(n.li,{children:["DEBUG report (optional): aggregate by type (",(0,i.jsx)(n.code,{children:"blog"}),", ",(0,i.jsx)(n.code,{children:"pages"}),", ",(0,i.jsx)(n.code,{children:"docs"}),", ",(0,i.jsx)(n.code,{children:"all"}),") and print once at the end of build/dev."]}),"\n",(0,i.jsx)(n.li,{children:"Performance goal: avoid replacements in undesired areas, reduce false positives with the Unicode regex, and limit re\u2011traversal via the Set and longest\u2011first sort."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"concrete-replacement-examples",children:"Concrete replacement examples"}),"\n",(0,i.jsx)(n.p,{children:"Here are several use cases, based on this project\u2019s JSON."}),"\n",(0,i.jsx)(n.h3,{id:"word--word-plain-text",children:"Word \u2192 Word (plain text)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Key: ",(0,i.jsx)(n.code,{children:"Cavo"})," in the ",(0,i.jsx)(n.code,{children:"blog"})," section:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"Cavo": { "children": "grandpa Christophe" }\n'})}),"\n","In a post, typing","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-md",children:"\u201CCavo\u201D will render grandpa Christophe\n"})}),"\n","Rendered ",(0,i.jsx)(n.code,{children:"Cavo"})," = ","grandpa Christophe"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"word--icon-logoicon",children:"Word \u2192 Icon (LogoIcon)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Keys: ",(0,i.jsx)(n.code,{children:"nana"})," and ",(0,i.jsx)(n.code,{children:"roki"})," in the ",(0,i.jsx)(n.code,{children:"pages"})," section:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"nana": { "component": "LogoIcon", "props": { "name": "ccs-3", "size": "124" } }\n"roki": { "component": "LogoIcon", "props": { "name": "docusaurus", "size": "124" } }\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mdx",children:"On an MDX page, typing \u201Cnana\u201D will display the CSS\u20113 icon and \u201Croki\u201D the Docusaurus icon.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Rendered:\nOn an MDX page, typing \u201C",(0,i.jsx)(s,{name:"logos:css-3",size:"124",children:"nana"}),"\u201D will display the CSS\u20113 icon and \u201C",(0,i.jsx)(s,{name:"docusaurus",size:"124",children:"roki"}),"\u201D the Docusaurus icon."]}),"\n",(0,i.jsx)(n.p,{children:"Additional example with an explicit Iconify set:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"node": { "component": "LogoIcon", "props": { "name": "logos:nodejs", "size": 64 } }\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Rendered ",(0,i.jsx)(n.code,{children:"node"})," = ",(0,i.jsx)(s,{name:"logos:nodejs-icon",size:"64",children:"Node"})," icon of node.js technology"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"word--tooltip",children:"Word \u2192 Tooltip"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Keys: ",(0,i.jsx)(n.code,{children:"Giti"})," and ",(0,i.jsx)(n.code,{children:"kiki"}),":","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"Giti": { "component": "Tooltip", "props": { "text": "DocuxLab" }, "children": "Global replacement" }\n"kiki": { "component": "Tooltip", "props": { "text": "Documentation" }, "children": "Docux Docs" }\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mdx",children:'The word \u201CGiti\u201D anywhere will be replaced by `<Tooltip text="DocuxLab">Global replacement</Tooltip>`. In docs, \u201Ckiki\u201D becomes `<Tooltip text="Documentation">Docux Docs</Tooltip>`.\n'})}),"\n","Rendered: The word \u201C",(0,i.jsx)(a,{text:"DocuxLab",children:"Global replacement"}),"\u201D anywhere will be replaced by ",(0,i.jsx)(n.code,{children:'<Tooltip text="DocuxLab">Global replacement</Tooltip>'}),". In docs, \u201C",(0,i.jsx)(a,{text:"Appears at the bottom",position:"bottom",model:"teacher",children:"my new word"}),"\u201D becomes ",(0,i.jsx)(n.code,{children:'<Tooltip text="Documentation">Docux Docs</Tooltip>'}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"word--clickable-image-imageonclick",children:"Word \u2192 Clickable image (ImageOnClick)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ImageOnClick"})," is a local component that displays an image overlay on click."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mdx",children:"In a post, typing \u201Cschema-diagram\u201D will display a clickable link opening the image `/img/diagram.png` fullscreen.\n"})}),"\n",(0,i.jsx)(n.p,{children:"Replacement example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "pages": {\n    "schema-diagram": {\n      "component": "ImageOnClick",\n      "props": {\n        "imageUrl": "/img/rocket_1f680.gif",\n        "altText": "Architecture diagram",\n        "buttonName": "Click me"\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["On a page, typing ",(0,i.jsx)(t,{imageUrl:"/img/remarkreplace.png",altText:"Architecture diagram",buttonName:"Click me",children:"schema-diagram"})," will display a clickable link opening the image ",(0,i.jsx)(n.code,{children:"/img/rocket_1f680.gif"})," fullscreen."]}),"\n",(0,i.jsx)(n.h2,{id:"important-behaviors-to-know",children:"Important behaviors to know"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ignored parents: no replacement inside links, headings, code blocks/inline code, images."}),"\n",(0,i.jsxs)(n.li,{children:["Merged sections: for a blog file, merge ",(0,i.jsx)(n.code,{children:"all"})," then ",(0,i.jsx)(n.code,{children:"blog"})," (the latter wins on conflict). Same logic for ",(0,i.jsx)(n.code,{children:"pages"})," and ",(0,i.jsx)(n.code,{children:"docs"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Replacement order: sort by decreasing word length to avoid overlaps."}),"\n",(0,i.jsx)(n.li,{children:"Unicode boundaries: the regex uses lookarounds and Unicode classes to avoid matching substrings (e.g., don\u2019t replace \u201CTS\u201D inside \u201Cint\xe9r\xeats\u201D)."}),"\n",(0,i.jsx)(n.li,{children:"Build report: with DEBUG on, a console report per section shows how many times each word was replaced."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"why-mdxmd-instead-of-jsxtsx-pages",children:"Why MDX/MD instead of JSX/TSX pages?"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["File compatibility: the plugin works in both ",(0,i.jsx)(n.code,{children:".md"})," and ",(0,i.jsx)(n.code,{children:".mdx"})," pages.\nOpinion: I chose to convert all my pages to ",(0,i.jsx)(n.code,{children:".mdx"})," to guarantee consistent support for MDX components and the plugin everywhere. Handling ",(0,i.jsx)(n.code,{children:".jsx"})," or ",(0,i.jsx)(n.code,{children:".tsx"})," pages would require a different, more complex approach with a dedicated React component for pages."]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Remark/rehype pipeline: Remark plugins only run on Markdown/MDX content. JSX/TSX pages are plain React components compiled by Babel/TS and bypass the Markdown pipeline, so the plugin never \u201Csees\u201D their text."}),"\n",(0,i.jsx)(n.li,{children:"AST expectations: This plugin operates on the Markdown AST (mdast) text nodes. In JSX, text is split across JSXText/StringLiteral and mixed with elements/props. Safe replacement there would require a Babel/SWC transform or a runtime React tree walk, with high risk of touching code, props, or links."}),"\n",(0,i.jsx)(n.li,{children:"Word-boundaries and Unicode: The plugin relies on contiguous text to apply robust Unicode word-boundary regexes. In JSX, sentences are often fragmented across nodes/components, making accurate matching and ordering (inline vs block) unreliable."}),"\n",(0,i.jsx)(n.li,{children:"MDX is a perfect fit: MDX gives a Markdown-first AST where narrative text lives in text nodes, and it officially supports injecting MDX components as replacements\u2014exactly what the plugin generates."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If you must keep JSX/TSX pages, possible alternatives:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Build-time: write a Babel/SWC plugin that transforms JSXText/StringLiteral using the same rules (harder to maintain)."}),"\n",(0,i.jsx)(n.li,{children:"Runtime: create a React wrapper that recursively walks children and replaces strings (perf and correctness caveats)."}),"\n",(0,i.jsx)(n.li,{children:"Hybrid: wrap JSX pages with a thin MDX shell and keep textual content in MDX so the plugin can process it."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-of-the-report-log",children:"Example of the report log"}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.code,{children:"DEBUG"})," is enabled, the plugin prints a summary of replacements to the console after build/dev:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'=== Remark replacements report ===\n[blog]\n- "Cavo" replaced 4 times\n- "kiki" replaced 4 times\n[all]\n- "Giti" replaced 4 times\n======================================\n'})})]})}function p(e={}){let{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function h(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>l});var t=o(6540);let i={},r=t.createContext(i);function s(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);