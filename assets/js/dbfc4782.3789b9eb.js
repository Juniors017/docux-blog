"use strict";(globalThis.webpackChunkdocux_blog=globalThis.webpackChunkdocux_blog||[]).push([[8749],{1895:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"404-custom-page-tutorial","metadata":{"permalink":"/blog/404-custom-page-tutorial","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/10/28/404/index.mdx","source":"@site/blog/2025/10/28/404/index.mdx","title":"Creating Custom 404 Page","description":"Learn how to build a stylish, responsive custom 404 error page in Docusaurus using swizzle, modern CSS, and optimized WebP images.","date":"2025-10-29T00:00:00.000Z","tags":[{"inline":true,"label":"404","permalink":"/blog/tags/404"},{"inline":true,"label":"custom-page","permalink":"/blog/tags/custom-page"},{"inline":true,"label":"swizzle","permalink":"/blog/tags/swizzle"},{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"responsive-design","permalink":"/blog/tags/responsive-design"}],"readingTime":3.27,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Creating Custom 404 Page","description":"Learn how to build a stylish, responsive custom 404 error page in Docusaurus using swizzle, modern CSS, and optimized WebP images.","slug":"404-custom-page-tutorial","schemaTypes":["HowTo","BlogPosting"],"image":"/img/404bg.webp","authors":["docux"],"mainTag":"design","tags":["404","custom-page","swizzle","react","responsive-design"],"date":"2025-10-29T00:00:00.000Z","difficulty":"Beginner-Intermediate","estimatedCost":"Free","tool":["Docusaurus","React","CSS","WebP"],"supply":["Node.js","Docusaurus","React","CSS Modules"],"genre":"Technical Tutorial","inLanguage":"en","category":"Frontend","keywords":["404 page","custom error page","docusaurus swizzle","responsive design","react component","webp optimization"],"hide_table_of_contents":false,"series":"Design your site","blueSkyRecordKey":null,"copyrightYear":2025,"copyrightHolder":"Docux"},"unlisted":false,"nextItem":{"title":"GoatCountViews Component","permalink":"/blog/goatcounter-json-views"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Development](https://img.shields.io/badge/Development-passed-green.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 0%](https://img.shields.io/badge/AI-0%-blue.svg)](https://github.com/Juniors017)\\n\\n![](/img/404bg.webp)\\n</div>\\n</center>\\nThe default 404 page in Docusaurus is functional, but quite basic. For many years now, it has become a page that allows you to stand out even though it\'s the result of a website flaw (broken link or unredirected URL).\\nBuilding a stylish 404 page is therefore an opportunity to provide a better experience when a link breaks. Here\'s how I set up a custom 404 with Docusaurus, keeping the page lightweight and responsive.\\n{/* truncate */}\\n## Objectives for the custom 404 page\\n\\n- Full screen with a dedicated background image\\n- Simple, readable, centered text\\n- Optimized mobile version (image and adapted viewport units)\\n- Minimal implementation via Docusaurus swizzle mechanism\\n\\nI could have added home or search buttons, but I wanted to keep the page very lightweight.\\n\\n## Swizzle the NotFound/Content component\\n\\nDocusaurus exposes a 404 view via `@theme/NotFound`. We\'ll swizzle its `Content` part to customize the rendering.\\n\\n### Command\\n<Terminal title=\\"user@machine: ~/yourproject\\">\\n\\nnpm run swizzle @docusaurus/theme-classic NotFound --eject\\n\\n</Terminal>\\n\\n- `@docusaurus/theme-classic` \u2192 the theme you want to modify (default for most sites).\\n\\n- `NotFound` \u2192 the 404 page component.\\n\\n- `--eject` \u2192 creates a real local copy of the component you can edit.\\n\\nThis creates the override in `src/theme/NotFound/Content/`.\\n\\n## The React component\\n\\nWe just created what will allow us to customize the 404 page rendering.\\n\\n### Basic file\\n\\n<Snippet filename=\\"src/theme/NotFound/Content/index.js\\" >\\n\\n```js title=\\"src/theme/NotFound/Content/index.js\\"\\nimport React from \'react\';\\nimport Content from \'@theme-original/NotFound/Content\';\\n\\nexport default function ContentWrapper(props) {\\n  return (\\n    <>\\n      <Content {...props} />\\n    </>\\n  );\\n}\\n```\\n</Snippet>\\n\\n### Custom file\\n\\n<Snippet filename=\\"src/theme/NotFound/Content/index.js\\" source=\\"src/theme/NotFound/Content/index.js\\"/>   \\n\\n\\nNote: I keep an `<h1>` for semantics and accessibility, but I hide it visually with CSS since the image meets my needs.\\n\\n## Full screen, responsive and lightweight styling\\n\\n<Snippet filename=\\"src/theme/NotFound/Content/styles.module.css\\" source=\\"src/theme/NotFound/Content/styles.module.css\\"/>   \\n\\n### Key points:\\n\\n- Optimized WebP images: `static/img/404bg.webp` (desktop) and `static/img/404mobile.webp` (mobile) *to learn more about image optimization [See Cavo789\'s tutorial](https://www.avonture.be/blog/reduce-image-size)*\\n- Modern viewport units: `dvh`/`svh` handle URL bars/mobile bounds better than `vh`\\n- `background-attachment: scroll` on mobile to avoid stuttering and improve iOS compatibility (yes I love apples)\\n- Adaptive typography via `clamp()` to stay readable on small screens\\n\\n## Add the assets\\n\\nPlace your images in `static/img/` so they\'re served from the site root. Naming is up to you, but here are mine:\\n\\n- `/img/404bg.webp`\\n- `/img/404mobile.webp`\\n\\nYou can generate two versions (desktop/mobile) to reduce the weight transferred on mobile and have a cleaner rendering.\\n\\n## Quick testing\\n\\nFor quick testing use this command\\n\\n<Terminal title=\\"user@machine: ~/yourproject\\">\\n\\nnpm start\\n\\n</Terminal>\\n\\nIn development, launch the site and visit a non-existent URL (for example `/url-that-does-not-exist`). You should see the full-screen background and the centered message.\\n\\n## This is just the beginning\\n\\n### Some ideas to go further:\\n\\n- Add a \\"Back to home\\" or \\"Search\\" button\\n- Instrument an analytics event to know how often the 404 is viewed\\n- Adapt the illustration in dark mode (if you force a light/dark image)\\n- Add light CSS animations to make the page more dynamic\\n- Add a more personalized error message (for example, based on the URL)\\n- Indicate useful links (FAQ, support, etc.)\\n- Record the initial request\\n\\n\\n\\nIn the end, swizzling only `NotFound/Content` is enough to create a custom, expressive and performant 404, while staying aligned with Docusaurus theme architecture.\\n\\nNow it\'s your turn! For inspiration, you can check out creative 404 page sites like [https://www.404s.design/](https://www.404s.design/) or [https://www.awwwards.com/40-inspiring-404-error-pages.html](https://www.awwwards.com/40-inspiring-404-error-pages.html)"},{"id":"goatcounter-json-views","metadata":{"permalink":"/blog/goatcounter-json-views","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/10/26/counterpage/index.mdx","source":"@site/blog/2025/10/26/counterpage/index.mdx","title":"GoatCountViews Component","description":"Add a clean view counter in Docusaurus with GoatCounter, the JSON API, and an explicit per-post path (path={metadata.permalink}).","date":"2025-10-26T00:00:00.000Z","tags":[{"inline":true,"label":"goatcounter","permalink":"/blog/tags/goatcounter"},{"inline":true,"label":"analytics","permalink":"/blog/tags/analytics"},{"inline":true,"label":"SEO","permalink":"/blog/tags/seo"},{"inline":true,"label":"views","permalink":"/blog/tags/views"}],"readingTime":2.74,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"GoatCountViews Component","description":"Add a clean view counter in Docusaurus with GoatCounter, the JSON API, and an explicit per-post path (path={metadata.permalink}).","slug":"goatcounter-json-views","schemaTypes":["HowTo","BlogPosting"],"image":"/img/goatcounterviews.webp","authors":["docux"],"mainTag":"analytics","tags":["goatcounter","analytics","SEO","views"],"date":"2025-10-26T00:00:00.000Z","difficulty":"Beginner-Intermediate","estimatedCost":"Free","tool":["GoatCounter","Docusaurus","React","MDX"],"supply":["Node.js","Docusaurus","React","Hooks"],"genre":"Technical Tutorial","inLanguage":"en","category":"Frontend","keywords":["goatcounter","view counter","analytics","json api","docusaurus","mdx","react"],"hide_table_of_contents":false,"series":"SEO & Analytics","copyrightYear":2025,"copyrightHolder":"Docux"},"unlisted":false,"prevItem":{"title":"Creating Custom 404 Page","permalink":"/blog/404-custom-page-tutorial"},"nextItem":{"title":"GoatCounter analytics","permalink":"/blog/goatcounter"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Development](https://img.shields.io/badge/Development-passed-green.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 65%](https://img.shields.io/badge/AI-55%-blue.svg)](https://github.com/Juniors017)\\n\\n![](/img/goatcounterviews.webp)\\n</div>\\n</center>\\n\\nAfter adding GoatCounter to my blog, my goal was to test the following:\\n- Display the number of views for a page.\\n- In the article list, show the views for each post individually.\\n- Avoid HTML injection and the \u201Cflash\u201D of unparsed content (common when using JavaScript or the iframe).\\n\\nOfficial GoatCounter docs for this: [View counts](https://www.goatcounter.com/help/visitor-counter)\\n\\t{/* truncate */}\\n## Why use the JSON API instead of `visit_count()`?\\n\\n- Inline `<script>` tags aren\u2019t well supported by MDX/Docusaurus (acorn parsing errors).\\n- `visit_count()` injects raw HTML, which causes a visible \u201Cflash\u201D before we can parse/format it. <ImageOnClick imageUrl=\\"/img/vuegoatcounteriframe.webp\\" altText=\\"Flash\\" buttonName=\\"here\'s what flashes for 1\u20133 seconds\\"  />\\n- The JSON API only returns data (no HTML). We keep full control of the rendering: icon, localized formatting, accessibility, etc.\\n\\n**Conclusion:** Using JSON avoids third\u2011party HTML injection, removes the flash, and keeps the rendering fully under your control.\\n\\n\\n\\n## Load GoatCounter globally\\n\\nLearn more here: [Goatcounter Analytics](/blog/goatcounter/)\\n\\n```js \\"title=\\"docusaurus.config.js\\"\\n///...existing config...\\nscripts: [\\n\\t{\\n\\t\\tsrc: \'https://gc.zgo.at/count.js\',\\n\\t\\tasync: true,\\n\\t\\t\'data-goatcounter\': \'https://yourName.goatcounter.com/count\',\\n\\t\\tcrossOrigin: \'anonymous\',\\n\\t},\\n],\\n```\\n\\n\\nThis script records visits. The JSON API is only used to read/display them.\\n\\n## React component: JSON fetch + accessible rendering\\n\\n### The component\\n- Detects the base `https://yourName.goatcounter.com` from the `data-goatcounter` attribute injected into the page;\\n- Determines the target path (prop `path` takes precedence, otherwise it uses the current path);\\n- Calls `/counter/<path>.json` and formats according to `navigator.language`;\\n- Renders an \u201Ceyes\u201D icon (twemoji) + the number, with `aria-label=\\"views\\"`.\\n\\n### Logic\\nOn errors or blockers:\\n- Display rule: if total views < 100 \u2192 show \u201CNew!\u201D, otherwise show the formatted number (useful for young blogs).\\n- If the JSON endpoint returns 404 (page never seen by GoatCounter in prod), also show \u201CNew!\u201D.\\n- On `localhost`, GoatCounter doesn\u2019t count, but will display whatever is already stored.\\n- On network/ad\u2011blocker errors (JSON request fails), the fallback shows 0 in dev and nothing in prod; if the return is `null` we render nothing.\\n\\nThe 100\u2011views rule can be adjusted to your needs. After a chat with a Belgian meerkat, it\u2019s true that showing low view counts can be perceived as a negative signal when the numbers are relatively small.\\n\\n### Full component code\\n\\n<Snippet filename=\\"src/components/GoatCountViews/index.js\\" source=\\"src/components/GoatCountViews/index.js\\" />\\n\\n\\n\\n## Usage in an MDX page\\n\\n### In a standard post\\n\\n```mdx\\n---\\ntitle: \\"View counter\\"\\n---\\n\\nSeen by: <GoatCounterViews />  meerkats\\n```\\n\\nThe component will display the views for the current page.\\n\\nSeen by: 2600 meerkats\\n\\n## Post list\\n\\n### On a listing page (e.g., Blog)\\n\\nIf you display *multiple* posts, you must request the counter for **each post** by passing its exact path. For example, in a swizzled component (header of a blog post item):\\n\\nProvide the path `path={metadata.permalink}` for each post\\n```jsx \\"title=\\"src/theme/BlogPostItem/Header/index.js\\"\\nimport GoatCounterViews from \'@site/src/components/GoatCountViews\';\\n\\nexport default function BlogPostItemHeader({metadata, ...props}) {\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t{/* ...existing code... */}\\n\\t\\t\\t<GoatCounterViews path={metadata.permalink} />\\n\\t\\t</>\\n\\t);\\n}\\n```\\n![](/img/vuedesviewgoat.webp)\\n\\n**This way, each card shows the views of its own article, not the views of the listing page.**"},{"id":"goatcounter","metadata":{"permalink":"/blog/goatcounter","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/10/24/goatcounter/index.mdx","source":"@site/blog/2025/10/24/goatcounter/index.mdx","title":"GoatCounter analytics","description":"Discover GoatCounter (open\u2011source, cookieless) and 3 ways to integrate it with Docusaurus, including SPA route change tracking.","date":"2025-10-24T00:00:00.000Z","tags":[{"inline":true,"label":"analytics","permalink":"/blog/tags/analytics"},{"inline":true,"label":"goatcounter","permalink":"/blog/tags/goatcounter"},{"inline":true,"label":"docusaurus","permalink":"/blog/tags/docusaurus"},{"inline":true,"label":"privacy","permalink":"/blog/tags/privacy"},{"inline":true,"label":"spa","permalink":"/blog/tags/spa"}],"readingTime":5.42,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"GoatCounter analytics","description":"Discover GoatCounter (open\u2011source, cookieless) and 3 ways to integrate it with Docusaurus, including SPA route change tracking.","slug":"goatcounter","date":"2025-10-24T00:00:00.000Z","authors":["docux"],"tags":["analytics","goatcounter","docusaurus","privacy","spa"],"image":"/img/docuxgoatcounter.webp","schemaTypes":["HowTo","BlogPosting"],"mainTag":"analytics","difficulty":"intermediate","totalTime":"PT15M","yield":"Working GoatCounter integration on Docusaurus (SPA).","genre":"Technical Tutorial","inLanguage":"en","readingTime":"10 min","keywords":["goatcounter","analytics","privacy","docusaurus","spa","web analytics","cookieless"],"hide_table_of_contents":false,"series":"SEO & Analytics","blueSkyRecordKey":"3m44h2gbwhs2x"},"unlisted":false,"prevItem":{"title":"GoatCountViews Component","permalink":"/blog/goatcounter-json-views"},"nextItem":{"title":"Component Trees","permalink":"/blog/trees-component-docusaurus"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Development](https://img.shields.io/badge/Development-passed-green.svg)](https://github.com/Juniors017)\\n[![AI 50%](https://img.shields.io/badge/AI-50%-blue.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n\\n![](/img/docuxgoatcounter.webp)\\n</div>\\n</center>\\n\\nAnalyzing website traffic while respecting user privacy is an increasing challenge. GoatCounter is an open\u2011source, cookieless analytics solution that addresses this need. In this post, we\u2019ll look at GoatCounter\u2019s essential options and three simple ways to integrate it with a Docusaurus site, including tracking page changes in a single\u2011page application (SPA).\\n\\n\\t{/* truncate */}\\n\\n## GoatCounter\\n\\nGoatCounter is a lightweight, privacy\u2011friendly, open\u2011source analytics tool by [Martin Tournoij](https://www.arp242.net/).\\nIt sets no cookies, doesn\u2019t track individuals, and provides enough stats to understand real site usage (pageviews, referrers, devices, etc.).\\n\\n- Open source (AGPL), self\u2011hostable or hosted service.\\n- Cookieless and privacy\u2011compliant in most cases.\\n- Tiny script (~3\u20137 KB gzipped) and fast.\\n- Simple API to count pageviews or events manually.\\n\\n:::tip[Bonus]\\nCompared to other free analytics solutions, it lets you exclude your IP and more.\\n:::\\n\\nOfficial site: [GoatCounter](https://www.goatcounter.com/) \u2014 [Documentation](https://www.goatcounter.com/help)\\n\\n\\n\\n## Basics: add the script\\n\\nThe minimal method (hosted by GoatCounter) is to add this script to your pages:\\n\\n```html\\n<script\\n\\tdata-goatcounter=\\"https://yourSite.goatcounter.com/count\\"\\n\\tasync\\n\\tsrc=\\"https://gc.zgo.at/count.js\\"\\n><\/script>\\n```\\n\\nFor a self\u2011hosted GoatCounter, the `data-goatcounter` attribute must point to your `/count` endpoint:\\n\\n```html\\n<script\\n\\tdata-goatcounter=\\"https://stats.yourdomain.tld/count\\"\\n\\tasync\\n\\tsrc=\\"https://stats.yourdomain.tld/count.js\\"\\n><\/script>\\n```\\n\\nNoscript tip (counts a view even if JS is disabled):\\n\\n```html\\n<noscript>\\n\\t<img src=\\"https://yourSite.goatcounter.com/count?p=/\\" alt=\\"\\" />\\n</noscript>\\n```\\n\\n\\n\\n## Essential options\\n\\nOptions are set via a global `window.goatcounter` object before loading the script,\\nor via the `<script>` tag\u2019s `data-goatcounter` attribute.\\n\\n- `data-goatcounter`: Counting endpoint URL (e.g. `https://abc.goatcounter.com/count`).\\n- `window.goatcounter.no_onload` (bool): disable automatic counting on initial load.\\n  Useful for SPAs (like Docusaurus) so you call `count()` manually on each route change.\\n- `window.goatcounter.endpoint` (string): explicitly set the counting endpoint if you don\u2019t use `data-goatcounter`.\\n- `window.goatcounter.allow_local` (bool): allow (or not) local counts (by default, local is ignored).\\n- `window.goatcounter.path` (function): customize the path being counted (include query/hash if desired).\\n- `window.goatcounter.count({ ... })`: JS API to count a pageview or an event manually.\\n  - `path`: path to count (e.g. `\\"/docs/intro\\"`).\\n  - `title`: page/event title.\\n  - `referrer`: referrer to use.\\n  - `event: true` to record an event (CTA click, etc.).\\n\\n_(Source: official documentation)_\\n\\n:::warning\\nFor single\u2011page sites like Docusaurus (SPA), you need a bit of setup to avoid double counting and to track client\u2011side page changes.\\n:::\\n\\n## Integration with Docusaurus (3 approaches)\\n\\n### 1- Basic add via `docusaurus.config.js`\\n\\nFor a simple static site (no route change tracking),\\nadd the script in `docusaurus.config.js`.\\n\\n#### Basic:\\n```js title=\\"docusaurus.config.js\\"\\n\\nmodule.exports = {\\n\\t// ... your other configuration ...\\n  scripts: [{\\n  \\tsrc: \\"https://gc.zgo.at/count.js\\",\\n  \\tasync: true,\\n  \\t\'data-goatcounter\': \'https://myProject.goatcounter.com/count\',\\n  }, ],\\n  };\\n``` \\n> Note that by default, localhost is not counted by GoatCounter.\\n\\n#### Production\u2011only variant:\\n```js title=\\"docusaurus.config.js\\"\\n\\nconst isProd = process.env.NODE_ENV === \'production\';\\n\\nmodule.exports = {\\n\\n\\tscripts: isProd ?\\n\\t\\t[{\\n\\t\\t\\t\\tcontent: \'window.goatcounter = { no_onload: true };\'\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tsrc: \'https://gc.zgo.at/count.js\',\\n\\t\\t\\t\\tasync: true,\\n\\t\\t\\t\\t\'data-goatcounter\': \'https://yourSite.goatcounter.com/count\',\\n\\t\\t\\t},\\n\\t\\t] :\\n\\t\\t[],\\n};\\n```\\n\\n\\nPros: simple and immediate. Limitation: counts only the initial load; in a SPA, client\u2011side page changes won\u2019t be tracked automatically.\\n\\n### 2- Minimal SPA tracking with a client module\\n\\nDocusaurus can run JS on each route change via [`onRouteDidUpdate`](https://docusaurus.io/docs/advanced/client#client-module-lifecycles).\\n\\nCreate a file `src/utils/goatcounter.js`:\\n\\n\\n```js title=\\"src/utils/goatcounter.js\\"\\n\\nexport function onRouteDidUpdate({\\n\\tlocation\\n}) {\\n\\tif (typeof window === \'undefined\') return;\\n\\tconst gc = window.goatcounter;\\n\\tif (!gc || typeof gc.count !== \'function\') return;\\n\\n\\t// full path (include query/hash if useful)\\n\\tconst path = location.pathname + location.search + location.hash;\\n\\tgc.count({\\n\\t\\tpath,\\n\\t\\ttitle: document.title\\n\\t});\\n}\\n```\\n\\nThen reference this module on the client side in `docusaurus.config.js`:\\n\\n```js  title=\\"docusaurus.config.js\\"\\nconst isProd = process.env.NODE_ENV === \'production\';\\n\\nmodule.exports = {\\n\\t\\n\\tscripts: isProd ?\\n\\t\\t[{\\n\\t\\t\\t\\tcontent: \'window.goatcounter = { no_onload: true };\'\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tsrc: \'https://gc.zgo.at/count.js\',\\n\\t\\t\\t\\tasync: true,\\n\\t\\t\\t\\t\'data-goatcounter\': \'https://yourSite.goatcounter.com/count\',\\n\\t\\t\\t},\\n\\t\\t] :\\n\\t\\t[],\\n\\t\\tclientModules: [require.resolve(\'./src/utils/goatcounter.js\')],\\n\\t};\\n```\\n\\n\\t**Result:** the initial view and all internal navigations are counted properly.\\n\\n\\t#### Choose a pattern for the initial view (A/B)\\n\\n\\tTwo equivalent approaches \u2014 pick just one to avoid duplicates:\\n\\n\\t- Pattern A \u2014 `no_onload: true` + count everywhere via `onRouteDidUpdate` (snippet above). Advantage: everything is driven by your code.\\n\\t- Pattern B \u2014 Let GoatCounter auto\u2011count the initial view, then count only subsequent SPA navigations.\\n\\n\\tExample Pattern B (with small dedup):\\n\\n\\t```js  title=\\"src/utils/goatcounter.js\\"\\n\\tlet lastCountedPath;\\n\\texport function onRouteDidUpdate({ location, previousLocation }) {\\n\\t\\tif (typeof window === \'undefined\') return;\\n\\n\\t\\t// Ignore the very first render (already auto\u2011counted by GoatCounter)\\n\\t\\tif (!previousLocation) return;\\n\\n\\t\\tconst gc = window.goatcounter;\\n\\t\\tif (!gc || typeof gc.count !== \'function\') return;\\n\\n\\t\\tconst path = `${location.pathname}${location.search}${location.hash}`;\\n\\t\\tif (path === lastCountedPath) return;\\n\\t\\tlastCountedPath = path;\\n\\n\\t\\tgc.count({ path, title: document.title });\\n\\t}\\n\\t```\\n\\n\\tAnd in config, don\u2019t set `no_onload: true`; just inject the script:\\n\\n\\t```js  title=\\"docusaurus.config.js\\" \\n\\tscripts: [\\n\\t\\t{\\n\\t\\t\\tsrc: \'https://gc.zgo.at/count.js\',\\n\\t\\t\\tasync: true,\\n\\t\\t\\t\'data-goatcounter\': \'https://yourSite.goatcounter.com/count\',\\n\\t\\t},\\n\\t],\\n\\t```\\n\\n\\n\\n### 3- Small Docusaurus plugin (optional, more structured)\\n\\nIf you prefer to encapsulate the logic, create a small plugin that injects the script and handles navigations.\\nConceptually, it exposes `getClientModules()` and a client module with `onRouteDidUpdate`.\\nThis makes reuse (multi\u2011projects) and options (endpoint, allow_local, etc.) easier.\\n\\n#### Example config\u2011side API (idea):\\n\\n```js  title=\\"docusaurus.config.js\\"\\nplugins: [\\n\\t[\\n\\t\\trequire.resolve(\'./plugins/goatcounter\'),\\n\\t\\t{\\n\\t\\t\\tendpoint: \'https://yourSite.goatcounter.com/count\',\\n\\t\\t\\tno_onload: true,\\n\\t\\t\\tallow_local: false,\\n\\t\\t},\\n\\t],\\n],\\n```\\n\\n\\n\\n## Custom events (clicks, CTAs, etc.)\\n\\nYou can also count events (in addition to pageviews):\\n\\n```js\\n// Example: sign\u2011up button click\\nwindow.goatcounter?.count({\\n\\tpath: \'/event/signup-cta\',\\n\\ttitle: \'Signup CTA click\',\\n\\tevent: true,\\n});\\n```\\n\\nBest practices:\\n- Prefix events with `/event/` or use a clear scheme.\\n- Avoid sending personal data (PII).\\n- Throttle/deduplicate on the UI side if needed to avoid spam.\\n\\n\\n\\n## Self\u2011hosting vs hosted service\\n\\n- Hosted service: get started in minutes, no infrastructure to manage.\\n- Self\u2011hosting: full control of data, custom domains/CDN; you need to deploy the GoatCounter app and expose `/count.js` and `/count`.\\n\\nIn both cases, the Docusaurus integration is the same (only the URL changes).\\n\\n\\n\\n## Verify everything works\\n\\n1) Run the site in production mode (build + serve) to test conditional scripts.\\n2) Open the browser console: no GoatCounter\u2011related errors.\\n3) Navigate between several pages: you should see hits arriving in your GoatCounter dashboard.\\n4) Trigger a custom event (see section above) and validate it appears.\\n\\n:::note\\nBy default, GoatCounter ignores the local environment; enable `allow_local` if you want to test without deploying.\\n:::\\n\\nIf everything is OK, you should see your multi\u2011page navigation appear in the GoatCounter dashboard.\\n<center>\\n![GoatCounter dashboard](/img/tdbgoatcounter.webp)\\n</center>\\n\\n## Exclude your IP address\\n\\nIn the GoatCounter dashboard, go to `Settings` \u2192 `Main` and add your IP address under \\"Ignore these IP addresses\\" so your own visits aren\u2019t counted.\\n\\nHappy GoatCounter integration!"},{"id":"trees-component-docusaurus","metadata":{"permalink":"/blog/trees-component-docusaurus","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/10/22/trees/index.mdx","source":"@site/blog/2025/10/22/trees/index.mdx","title":"Component Trees","description":"Create interactive file and folder trees in your Docusaurus pages with the Trees component. Works with or without custom icons.","date":"2025-10-22T00:00:00.000Z","tags":[{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"mdx","permalink":"/blog/tags/mdx"},{"inline":true,"label":"component","permalink":"/blog/tags/component"},{"inline":true,"label":"tree","permalink":"/blog/tags/tree"},{"inline":true,"label":"file-structure","permalink":"/blog/tags/file-structure"},{"inline":true,"label":"Iconify","permalink":"/blog/tags/iconify"}],"readingTime":8.43,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Component Trees","slug":"trees-component-docusaurus","description":"Create interactive file and folder trees in your Docusaurus pages with the Trees component. Works with or without custom icons.","schemaTypes":["HowTo","BlogPosting"],"image":"/img/treesmap.webp","authors":["docux"],"mainTag":"Design","tags":["react","mdx","component","tree","file-structure","Iconify"],"date":"2025-10-22T00:00:00.000Z","difficulty":"intermediate","totalTime":"PT20M","yield":"Interactive tree component for Docusaurus.","genre":"Technical Tutorial","inLanguage":"en","readingTime":"10 min","copyrightYear":2025,"copyrightHolder":"Docux","keywords":["docusaurus","trees component","tree view","file tree","folder structure","react component","mdx"],"hide_table_of_contents":false,"series":"Design your site","blueSkyRecordKey":"3m3razakaxc2j"},"unlisted":false,"prevItem":{"title":"GoatCounter analytics","permalink":"/blog/goatcounter"},"nextItem":{"title":"Plugin Remark Replace Words","permalink":"/blog/remark-replace-words-plugin"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Development](https://img.shields.io/badge/Development-passed-green.svg)](https://github.com/Juniors017)\\n[![AI 50%](https://img.shields.io/badge/AI-50%-blue.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n\\n![](/img/treesmap.webp)\\n</div>\\n</center>\\n\\n\\n## Introduction\\n\\nThe **Trees** component allows you to display **interactive file and folder trees** directly in your Docusaurus pages. Perfect for documenting project structure, explaining architecture, or presenting code examples.\\n\\n<Trees title=\\"Project with Icons\\">\\n  <Folder label=\\"src\\" icon=\\"unjs:mkdist\\">\\n    <File label=\\"index.js\\" icon=\\"logos:javascript\\" />\\n    <File label=\\"App.jsx\\" icon=\\"logos:react\\" />\\n    <File label=\\"styles.css\\" icon=\\"logos:css-3\\" />\\n  </Folder>\\n  <File label=\\"package.json\\" icon=\\"vscode-icons:file-type-node\\" />\\n</Trees>\\n\\n{/* truncate */}\\n### \u2728 Key Features\\n\\n- **Intuitive syntax**: Use natural nested JSX tags\\n- **Collapsible folders**: Click to expand/collapse folders\\n- **Two display modes**:\\n  - Native emojis by default (\u{1F4C1} \u{1F4C4})\\n  - Custom icons via LogoIcon (Iconify)\\n- **Dark mode**: Full dark theme support\\n- **Accessible**: Keyboard navigation and smooth animations\\n- **Optional badges**: Add extra information\\n\\n\\n\\n## Installation\\n\\n### Copy/Create Files\\n\\nCreate the following folder structure in your Docusaurus project:\\n\\n_(Note that I\'m intentionally not using my component here, ha ha!)_\\n\\n```\\nsrc/components/Trees/\\n\u251C\u2500\u2500 index.js              # Main Trees component\\n\u251C\u2500\u2500 Folder/\\n\u2502   \u2514\u2500\u2500 index.js          # Folder component\\n\u251C\u2500\u2500 File/\\n\u2502   \u2514\u2500\u2500 index.js          # File component\\n\u251C\u2500\u2500 utils/\\n\u2502   \u2514\u2500\u2500 TreeItem.js       # Shared internal component\\n\u2514\u2500\u2500 styles.module.css     # CSS styles\\n```\\nThe component follows a **modular architecture** inspired by React best practices\\n\\n## Component Architecture\\n\\n### File **`Trees/index.js`**\\n\\n#### Main Component\\n\\n- Tree container\\n- Displays an optional title\\n- Manages children rendering (Folder/File)\\n- Applies initial indentation level (0)\\n\\n<Snippet filename=\\"src/components/Trees/index.js\\" source=\\"src/components/Trees/index.js\\" />\\n\\n### **`Trees/Folder/index.js`** \\n\\n#### Folder Component\\n\\n- Represents a folder in the tree\\n- Wrapper around `TreeItem` with `defaultEmoji=\\"\u{1F4C1}\\"`\\n- Can contain children (sub-folders and files)\\n- Props: `label`, `icon`, `expanded`, `badge`, `iconSize`\\n\\n<Snippet filename=\\"src/components/Trees/Folder/index.js\\" source=\\"src/components/Trees/Folder/index.js\\" />\\n\\n\\n\\n### **`Trees/File/index.js`** \\n#### File Component\\n\\n- Represents a file in the tree\\n- Wrapper around `TreeItem` with `defaultEmoji=\\"\u{1F4C4}\\"`\\n- Cannot contain children\\n- Props: `label`, `icon`, `badge`, `iconSize`\\n\\n<Snippet filename=\\"src/components/Trees/File/index.js\\" source=\\"src/components/Trees/File/index.js\\" />\\n\\n### File `Trees/utils/TreeItem.js`\\n\\n#### Internal Utility Component\\n\\n**Shared component** that factors all common logic:\\n\\n- \u2705 Expansion state management (`useState`)\\n- \u2705 Valid React children detection\\n- \u2705 Icon display (LogoIcon or native emojis)\\n- \u2705 Recursive sub-element rendering\\n- \u2705 Dynamic indentation calculation (`level * 20px`)\\n- \u2705 User interaction (click to expand/collapse)\\n\\n**Icon display logic**:\\n1. If `icon` is provided \u2192 Uses LogoIcon (Iconify)\\n2. If `icon` is absent \u2192 Uses `defaultEmoji` (\u{1F4C1} or \u{1F4C4})\\n3. If `icon={null}` \u2192 No icon\\n\\n<Snippet filename=\\"src/components/Trees/utils/TreeItem.js\\" source=\\"src/components/Trees/utils/TreeItem.js\\" />\\n\\n\\n\\n### File **`styles.module.css`** \\n\\n#### Component CSS Styles File\\n\\nSingle CSS shared by all components with:\\n- CSS variables for colors and spacing\\n- Dark mode support (`[data-theme=\'dark\']`)\\n- Smooth animations for transitions\\n- Modular classes (`.treeContainer`, `.nodeContent`, etc.)\\n\\n<Snippet filename=\\"src/components/Trees/styles.module.css\\" source=\\"src/components/Trees/styles.module.css\\" />\\n\\n\\n\\n## MDX Integration\\n\\n### Register in MDXComponents\\n\\nOpen the file `src/theme/MDXComponents.js` and add the imports:\\n\\n```javascript title=\\"src/theme/MDXComponents.js\\"\\nimport React from \'react\';\\nimport MDXComponents from \'@theme-original/MDXComponents\';\\nimport Trees from \'@site/src/components/Trees\';\\nimport Folder from \'@site/src/components/Trees/Folder\';\\nimport File from \'@site/src/components/Trees/File\';\\n\\nexport default {\\n  ...MDXComponents,\\n  Trees,\\n  Folder,\\n  File\\n};\\n```\\n\\n### Use in Your MDX Files\\n\\nOnce registered in MDXComponents, the components are **automatically available** in all your `.mdx` files:\\n[See official documentation](https://docusaurus.io/docs/markdown-features/react#mdx-component-scope)\\n```mdx title=\\"blog/my-article.mdx\\"\\n## Project Structure\\n\\n<Trees title=\\"My Project\\">\\n  <Folder label=\\"src\\">\\n    <File label=\\"index.js\\" />\\n    <File label=\\"App.jsx\\" />\\n  </Folder>\\n  <File label=\\"package.json\\" />\\n</Trees>\\n```\\n\\n\\n\\n## Usage Examples\\n\\n### Example 1: Simple Tree with Native Emojis\\n\\n**Without LogoIcon icons**, the component automatically uses native emojis (\u{1F4C1} for folders, \u{1F4C4} for files).\\n\\n<Trees title=\\"Simple Project\\">\\n  <Folder label=\\"src\\" expanded={true}>\\n    <File label=\\"index.js\\" />\\n    <File label=\\"App.jsx\\" />\\n  </Folder>\\n  <Folder label=\\"public\\" expanded={true}>\\n    <File label=\\"index.html\\" />\\n  </Folder>\\n  <File label=\\"package.json\\" />\\n  <File label=\\"README.md\\" />\\n</Trees>\\n\\n```jsx\\n<Trees title=\\"Simple Project\\">\\n  <Folder label=\\"src\\" expanded={true}>\\n    <File label=\\"index.js\\" />\\n    <File label=\\"App.jsx\\" />\\n  </Folder>\\n  <Folder label=\\"public\\" expanded={true}>\\n    <File label=\\"index.html\\" />\\n  </Folder>\\n  <File label=\\"package.json\\" />\\n  <File label=\\"README.md\\" />\\n</Trees>\\n```\\n\\n---\\n\\n### Example 2: Collapsed Folders by Default\\n\\nUse the `expanded={false}` prop to have folders collapsed on load.\\n\\n<Trees title=\\"Compact Tree\\">\\n  <Folder label=\\"node_modules\\" expanded={false}>\\n    <Folder label=\\"react\\">\\n      <File label=\\"index.js\\" />\\n    </Folder>\\n    <Folder label=\\"react-dom\\">\\n      <File label=\\"index.js\\" />\\n    </Folder>\\n  </Folder>\\n  <Folder label=\\"src\\">\\n    <File label=\\"App.jsx\\" />\\n  </Folder>\\n</Trees>\\n\\n```jsx\\n<Trees title=\\"Compact Tree\\">\\n  <Folder label=\\"node_modules\\" expanded={false}>\\n    <Folder label=\\"react\\">\\n      <File label=\\"index.js\\" />\\n    </Folder>\\n  </Folder>\\n  <Folder label=\\"src\\">\\n    <File label=\\"App.jsx\\" />\\n  </Folder>\\n</Trees>\\n```\\n\\n---\\n\\n### Example 3: With LogoIcon Icons (Simple)\\n\\nAdd the `icon` prop to use [Iconify](https://icon-sets.iconify.design/) icons via [LogoIcon](/blog/logoicon-component-docusaurus/).\\n\\n<Trees title=\\"Project with Icons\\">\\n  <Folder label=\\"src\\" icon=\\"unjs:mkdist\\">\\n    <File label=\\"index.js\\" icon=\\"logos:javascript\\" />\\n    <File label=\\"App.jsx\\" icon=\\"logos:react\\" />\\n    <File label=\\"styles.css\\" icon=\\"logos:css-3\\" />\\n  </Folder>\\n  <File label=\\"package.json\\" icon=\\"vscode-icons:file-type-node\\" />\\n</Trees>\\n\\n```jsx\\n<Trees title=\\"Project with Icons\\">\\n  <Folder label=\\"src\\" icon=\\"unjs:mkdist\\">\\n    <File label=\\"index.js\\" icon=\\"logos:javascript\\" />\\n    <File label=\\"App.jsx\\" icon=\\"logos:react\\" />\\n    <File label=\\"styles.css\\" icon=\\"logos:css-3\\" />\\n  </Folder>\\n  <File label=\\"package.json\\" icon=\\"vscode-icons:file-type-node\\" />\\n</Trees>\\n```\\n\\n\\n\\n### Example 4: Complex Tree with Badges\\n\\nUse the `badge` prop to display additional information.\\n\\n<Trees title=\\"Backend Architecture\\">\\n  <Folder label=\\"src\\" icon=\\"vscode-icons:default-folder\\">\\n    <Folder label=\\"controllers\\" icon=\\"vscode-icons:folder-type-controller\\" badge=\\"5 files\\">\\n      <File label=\\"userController.js\\" icon=\\"vscode-icons:file-type-js\\" />\\n      <File label=\\"authController.js\\" icon=\\"vscode-icons:file-type-js\\" />\\n      <File label=\\"productController.js\\" icon=\\"vscode-icons:file-type-js\\" />\\n    </Folder>\\n    <Folder label=\\"models\\" icon=\\"vscode-icons:folder-type-model\\" badge=\\"3 files\\">\\n      <File label=\\"User.js\\" icon=\\"vscode-icons:file-type-js\\" />\\n      <File label=\\"Product.js\\" icon=\\"vscode-icons:file-type-js\\" />\\n    </Folder>\\n    <Folder label=\\"routes\\" icon=\\"vscode-icons:folder-type-route\\">\\n      <File label=\\"api.js\\" icon=\\"vscode-icons:file-type-js\\" />\\n    </Folder>\\n    <File label=\\"server.js\\" icon=\\"vscode-icons:file-type-node\\" badge=\\"main\\" />\\n  </Folder>\\n  <Folder label=\\"tests\\" icon=\\"vscode-icons:folder-type-test\\" expanded={false}>\\n    <File label=\\"user.test.js\\" icon=\\"vscode-icons:file-type-testjs\\" />\\n  </Folder>\\n  <File label=\\".env\\" icon=\\"vscode-icons:file-type-dotenv\\" />\\n  <File label=\\"package.json\\" icon=\\"vscode-icons:file-type-node\\" />\\n</Trees>\\n\\n```jsx\\n<Trees title=\\"Backend Architecture\\">\\n  <Folder label=\\"src\\" icon=\\"vscode-icons:default-folder\\">\\n    <Folder label=\\"controllers\\" icon=\\"vscode-icons:folder-type-controller\\" badge=\\"5 files\\">\\n      <File label=\\"userController.js\\" icon=\\"vscode-icons:file-type-js\\" />\\n      <File label=\\"authController.js\\" icon=\\"vscode-icons:file-type-js\\" />\\n    </Folder>\\n    <Folder label=\\"models\\" icon=\\"vscode-icons:folder-type-model\\" badge=\\"3 files\\">\\n      <File label=\\"User.js\\" icon=\\"vscode-icons:file-type-js\\" />\\n    </Folder>\\n    <File label=\\"server.js\\" icon=\\"vscode-icons:file-type-node\\" badge=\\"main\\" />\\n  </Folder>\\n  <File label=\\".env\\" icon=\\"vscode-icons:file-type-dotenv\\" />\\n</Trees>\\n```\\n\\n---\\n\\n### Example 5: Complete Docusaurus Project\\n\\nRealistic example of a Docusaurus structure.\\n\\n<Trees title=\\"Docusaurus Project\\">\\n  <Folder label=\\"blog\\" icon=\\"vscode-icons:folder-type-docs\\">\\n    <Folder label=\\"2025\\" icon=\\"vscode-icons:default-folder\\">\\n      <Folder label=\\"10\\" icon=\\"vscode-icons:default-folder\\">\\n        <File label=\\"index.mdx\\" icon=\\"vscode-icons:file-type-mdx\\" />\\n      </Folder>\\n    </Folder>\\n    <File label=\\"authors.yml\\" icon=\\"vscode-icons:file-type-yaml\\" />\\n  </Folder>\\n  <Folder label=\\"docs\\" icon=\\"vscode-icons:folder-type-docs\\">\\n    <File label=\\"intro.md\\" icon=\\"vscode-icons:file-type-markdown\\" />\\n  </Folder>\\n  <Folder label=\\"src\\" icon=\\"vscode-icons:default-folder\\">\\n    <Folder label=\\"components\\" icon=\\"vscode-icons:folder-type-component\\">\\n      <Folder label=\\"Trees\\" icon=\\"vscode-icons:default-folder\\" badge=\\"new\\">\\n        <File label=\\"index.js\\" icon=\\"vscode-icons:file-type-reactjs\\" />\\n        <File label=\\"styles.module.css\\" icon=\\"vscode-icons:file-type-css\\" />\\n      </Folder>\\n    </Folder>\\n    <Folder label=\\"pages\\" icon=\\"vscode-icons:folder-type-route\\">\\n      <File label=\\"index.js\\" icon=\\"vscode-icons:file-type-reactjs\\" />\\n    </Folder>\\n  </Folder>\\n  <Folder label=\\"static\\" icon=\\"vscode-icons:folder-type-public\\">\\n    <Folder label=\\"img\\" icon=\\"vscode-icons:folder-type-images\\">\\n      <File label=\\"logo.svg\\" icon=\\"vscode-icons:file-type-svg\\" />\\n    </Folder>\\n  </Folder>\\n  <File label=\\"docusaurus.config.js\\" icon=\\"vscode-icons:file-type-docusaurus\\" />\\n  <File label=\\"package.json\\" icon=\\"vscode-icons:file-type-node\\" />\\n  <File label=\\"sidebars.js\\" icon=\\"vscode-icons:file-type-js\\" />\\n</Trees>\\n\\n```jsx\\n<Trees title=\\"Docusaurus Project\\">\\n  <Folder label=\\"blog\\" icon=\\"vscode-icons:folder-type-docs\\">\\n    <Folder label=\\"2025\\" icon=\\"vscode-icons:default-folder\\">\\n      <File label=\\"index.mdx\\" icon=\\"vscode-icons:file-type-mdx\\" />\\n    </Folder>\\n  </Folder>\\n  <Folder label=\\"src\\" icon=\\"vscode-icons:default-folder\\">\\n    <Folder label=\\"components\\" icon=\\"vscode-icons:folder-type-component\\">\\n      <Folder label=\\"Trees\\" icon=\\"vscode-icons:default-folder\\" badge=\\"new\\">\\n        <File label=\\"index.js\\" icon=\\"vscode-icons:file-type-reactjs\\" />\\n      </Folder>\\n    </Folder>\\n  </Folder>\\n  <File label=\\"docusaurus.config.js\\" icon=\\"vscode-icons:file-type-docusaurus\\" />\\n</Trees>\\n```\\n\\n---\\n\\n## Component Props\\n\\n### Component `<Trees>`\\n\\n<center>\\n\\n| Prop       | Type     | Default | Description                          |\\n| ---------- | -------- | ------- | ------------------------------------ |\\n| `title`    | `string` | -       | Optional tree title                  |\\n| `children` | `node`   | -       | Content (Folder and File components) |\\n\\n</center>\\n\\n### Component `<Folder>`\\n\\n<center>\\n\\n| Prop       | Type      | Default         | Description                        |\\n| ---------- | --------- | --------------- | ---------------------------------- |\\n| `label`    | `string`  | \u274C **Required** | Folder name                        |\\n| `icon`     | `string`  | -               | Iconify icon name (via LogoIcon)   |\\n| `iconSize` | `number`  | `24`            | Icon size in pixels                |\\n| `badge`    | `string`  | -               | Optional badge to display          |\\n| `expanded` | `boolean` | `false`         | Initial state (expanded/collapsed) |\\n| `children` | `node`    | -               | Sub-folders and files              |\\n\\n</center>\\n\\n### Component `<File>`\\n\\n<center>\\n\\n| Prop       | Type     | Default         | Description                      |\\n| ---------- | -------- | --------------- | -------------------------------- |\\n| `label`    | `string` | \u274C **Required** | File name                        |\\n| `icon`     | `string` | -               | Iconify icon name (via LogoIcon) |\\n| `iconSize` | `number` | `20`            | Icon size in pixels              |\\n| `badge`    | `string` | -               | Optional badge to display        |\\n\\n</center>\\n\\n\\n## Usage With and Without LogoIcon\\n\\n### Mode 1: Native Emojis (without LogoIcon)\\n\\n**Advantages**:\\n- \u2705 No external dependencies\\n- \u2705 Works immediately\\n- \u2705 Lightweight and performant\\n\\n```jsx\\n<Trees title=\\"Simple\\">\\n  <Folder label=\\"Documents\\">\\n    <File label=\\"report.pdf\\" />\\n  </Folder>\\n</Trees>\\n```\\n\\nResult: \u{1F4C1} Documents / \u{1F4C4} report.pdf\\n\\n### Mode 2: LogoIcon Icons (with Iconify)\\n\\n**Prerequisites**: Have the LogoIcon component installed in your project.\\n\\n**Advantages**:\\n- \u2705 Specific icons by file type\\n- \u2705 Over 150,000 icons available\\n- \u2705 Professional rendering\\n\\n```jsx\\n<Trees title=\\"With Icons\\">\\n  <Folder label=\\"src\\" icon=\\"vscode-icons:default-folder\\">\\n    <File label=\\"App.jsx\\" icon=\\"vscode-icons:file-type-reactjs\\" />\\n  </Folder>\\n</Trees>\\n```\\n\\n### Mode 3: No Icon at All\\n\\nPass `icon={null}` to completely disable icons.\\n\\n```jsx\\n<File label=\\"file.txt\\" icon={null} />\\n```\\n\\n\\n\\n## Dark Mode Support\\n\\nThe component automatically supports Docusaurus **dark mode** through CSS variables:\\n\\n```css\\n/* Light mode */\\n.nodeContent {\\n  background-color: var(--ifm-background-surface-color);\\n  color: var(--ifm-font-color-base);\\n}\\n\\n/* Dark mode (automatic) */\\n[data-theme=\'dark\'] .nodeContent:hover {\\n  background-color: rgba(255, 255, 255, 0.05);\\n}\\n```\\n\\n\\n\\n## Best Practices\\n\\n### \u2705 Do\\n\\n- Use `expanded={false}` for large folders (e.g., `node_modules`)\\n- Add badges for important information\\n- Use consistent icons (same Iconify pack)\\n- Limit depth to 4-5 levels maximum\\n\\n### \u274C Don\'t\\n\\n- Don\'t create overly deep trees (readability)\\n- Avoid mixing native emojis and LogoIcon in the same tree\\n- Don\'t overuse badges (visual pollution)\\n\\n\\n\\n## Conclusion\\n\\nThe **Trees** component offers a **simple and flexible** solution for displaying trees in Docusaurus:\\n\\n- **Two modes**: native emojis or custom icons\\n- **Interactive**: collapsible/expandable folders\\n- **Dark mode** natively supported\\n- **Accessible** and performant\\n- **Modular architecture** easy to maintain\\n\\n**Perfect for**:\\n- Documenting project structures\\n- Presenting file architectures\\n- Creating installation guides\\n- Illustrating code examples\\n\\nTry it in your next article and let me know your feedback! \u{1F680}"},{"id":"remark-replace-words-plugin","metadata":{"permalink":"/blog/remark-replace-words-plugin","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/10/06/remarkreplace/index.mdx","source":"@site/blog/2025/10/06/remarkreplace/index.mdx","title":"Plugin Remark Replace Words","description":"Automatically replace words with text, icons, or MDX components (Tooltip, buttons\u2026) in your pages/blog/docs with a configurable Remark plugin.","date":"2025-10-07T00:00:00.000Z","tags":[{"inline":true,"label":"remark","permalink":"/blog/tags/remark"},{"inline":true,"label":"mdx","permalink":"/blog/tags/mdx"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"glossary","permalink":"/blog/tags/glossary"},{"inline":true,"label":"tooltip","permalink":"/blog/tags/tooltip"},{"inline":true,"label":"icon","permalink":"/blog/tags/icon"},{"inline":true,"label":"replacement","permalink":"/blog/tags/replacement"}],"readingTime":6.68,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Plugin Remark Replace Words","slug":"remark-replace-words-plugin","description":"Automatically replace words with text, icons, or MDX components (Tooltip, buttons\u2026) in your pages/blog/docs with a configurable Remark plugin.","schemaTypes":["HowTo","BlogPosting"],"image":"/img/remarkreplace.webp","authors":["docux"],"mainTag":"remarkPlugins","tags":["remark","mdx","plugin","glossary","tooltip","icon","replacement"],"date":"2025-10-07T00:00:00.000Z","difficulty":"intermediate","totalTime":"PT30M","yield":"Configurable word replacement plugin.","genre":"Technical Tutorial","inLanguage":"en","readingTime":"16 min","copyrightYear":2025,"copyrightHolder":"Docux","keywords":["docusaurus","remark replace words","mdx replace","glossary","tooltip","icons","replacements json"],"hide_table_of_contents":false,"series":"Docusaurus Plugins","blueSkyRecordKey":"3m2ljvfomz22t"},"unlisted":false,"prevItem":{"title":"Component Trees","permalink":"/blog/trees-component-docusaurus"},"nextItem":{"title":"ScrollToTopButton Component","permalink":"/blog/docusaurus-scroll-to-top-button"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Development](https://img.shields.io/badge/Development-passed-green.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 90%](https://img.shields.io/badge/AI-90%-blue.svg)](https://github.com/Juniors017)\\n\\n![](/img/remarkreplace.webp)\\n</div>\\n</center>\\n\\n<div className=\\"text--justify\\">\\nThis remark/MDX plugin automatically replaces certain words in your .mdx/.md content with other text, an icon, or even a React component (e.g., Tooltip). It\u2019s ideal for keeping terminology consistent, adding contextual help, or \u201Cstyling\u201D recurring keywords.\\n\\nThe plugin walks Markdown/MDX text nodes, skips certain parents (links, headings, code\u2026), merges `all` + the current section (`blog`/`pages`/`docs`), sorts keys by decreasing length, then replaces with plain text or MDX components. Matching is Unicode\u2011safe to avoid false positives inside words.\\n\\n\\n:::tip Interactive glossary\\nCombined with a `Tooltip` component, this plugin lets you build a real interactive glossary: authors write plain Markdown, and the plugin replaces terms with rich components (tooltips, icons, buttons) without extra effort.\\n:::\\n</div>\\n{/* truncate */}\\n\\n## Why this plugin?\\n\\n- Standardize brand or team terms (e.g., product names)\\n- Automatically substitute words or components\\n- Centralize replacement rules in a simple per\u2011section JSON file (blog, pages, docs)\\n- Keep Markdown/MDX clean and readable, without intrusive tags or components\\n- Easier maintenance: a change in JSON propagates everywhere\\n- And why not?\\n\\n\\n\\n## Plugin code\\n\\nCreate a folder `plugins/remark-replace-words` in your Docusaurus project, with a file: `index.js` (the plugin).\\n\\n<Snippet filename=\\"plugins/remark-replace-words/index.js\\" source=\\"plugins/remark-replace-words/index.js\\" />\\n\\n\\n### JSON configuration\\n\\nIn your `plugins/remark-replace-words` folder, add a file: `replacements.json`.\\n\\nReplacements are driven by `plugins/remark-replace-words/replacements.json`. It contains 4 top\u2011level keys:\\n- `all`: global replacements (all sections)\\n- `blog`: replacements specific to blog posts\\n- `pages`: replacements for pages\\n- `docs`: replacements for documentation\\n\\nEach entry uses the word to detect as the key, and an object as the value:\\n- `component` (optional): name of the MDX component to inject (e.g., Tooltip, LogoIcon)\\n- `props` (optional): props passed to the component\\n- `children` (optional): component\u2019s child text; if missing, the matched word is reused\\n\\n<Snippet filename=\\"plugins/remark-replace-words/replacements.json\\" source=\\"plugins/remark-replace-words/replacements.json\\" />\\n\\n\\n## Installation and setup\\n\\nThe plugin is already present in this repo under `plugins/remark-replace-words`. To enable it in Docusaurus, it\u2019s referenced in `docusaurus.config.js` at the Blog, Pages, and Docs presets level.\\n\\n```js title=\\"docusaurus.config.js\\"\\n// ...imports\\nimport remarkReplaceWords from \\"./plugins/remark-replace-words/index.js\\"\\n\\nexport default {\\n  // ...\\n  presets: [\\n    [\\n      \'classic\',\\n      ({\\n        blog: {\\n          remarkPlugins: [\\n            // ...\\n            [remarkReplaceWords, \\"blog\\"],\\n          ],\\n        },\\n        pages: {\\n          remarkPlugins: [\\n            // ...\\n            [remarkReplaceWords, \\"pages\\"],\\n          ],\\n        },\\n        // If you have a Docs section\\n        docs: {\\n          remarkPlugins: [\\n            // ...\\n            [remarkReplaceWords, \\"docs\\"],\\n          ],\\n        },\\n      })\\n    ]\\n  ]\\n}\\n```\\n\\nThe second argument (\\"blog\\" | \\"pages\\" | \\"docs\\") selects a specific section in the configuration JSON. An `all` block is also available for global replacements.\\n\\n\\n\\n### Strategy\\n\\n- Section detection from the file path (`/blog/`, `/pages/`, `/docs/`), otherwise fallback to `pages`.\\n- Mapping merge: `merged = { ...mapping.all, ...mapping[section] }` to support global then section\u2011specific rules.\\n- Unicode NFC normalization to stabilize accents (\xe9, \xe8, \xea, \xf4, \xe7, \u0153, \xef, \u2026).\\n- Ignored parents to avoid unwanted replacements:\\n  - Markdown/MDX: `link`, `linkReference`, `definition`, `code`, `inlineCode`, `heading`, `image`, `imageReference`, `blockquote`, `url`.\\n  - MDX JSX: `a` tag and any component already inserted by a previous replacement (prevents re\u2011traversal).\\n- Pre\u2011collect replacement component names (Set) to detect them during the visit and short\u2011circuit.\\n- Sort replacement keys by decreasing length to prevent overlaps (longest first).\\n- Robust Unicode word\u2011boundary regex to avoid matching inside a word and when adjacent to `_ - / \\" \' \u2019`:\\n  - `(?<![\\\\p{L}\\\\p{N}_/\\"\'\u2019-])word(?![\\\\p{L}\\\\p{N}_/\\"\'\u2019-])` with `giu` flags.\\n- Replace by fragments: split the text and insert either plain text or an MDX element (`mdxJsxTextElement` inline, `mdxJsxFlowElement` block) with `name`, `attributes` (props) and `children`.\\n- `children` choice: if `children` is defined in JSON, use it; otherwise reuse the captured value.\\n- DEBUG report (optional): aggregate by type (`blog`, `pages`, `docs`, `all`) and print once at the end of build/dev.\\n- Performance goal: avoid replacements in undesired areas, reduce false positives with the Unicode regex, and limit re\u2011traversal via the Set and longest\u2011first sort.\\n\\n\\n\\n## Concrete replacement examples\\n\\nHere are several use cases, based on this project\u2019s JSON.\\n\\n### Word \u2192 Word (plain text)\\n\\n- Key: `Cavo` in the `blog` section:\\n    ```json\\n    \\"Cavo\\": { \\"children\\": \\"grandpa Christophe\\" }\\n    ```\\n    In a post, typing \\n    ```md\\n    \u201CCavo\u201D will render grandpa Christophe\\n    ```\\n    Rendered `Cavo` = Cavo\\n\\n### Word \u2192 Icon (LogoIcon)\\n\\n- Keys: `nana` and `roki` in the `pages` section:\\n  ```json\\n  \\"nana\\": { \\"component\\": \\"LogoIcon\\", \\"props\\": { \\"name\\": \\"ccs-3\\", \\"size\\": \\"124\\" } }\\n  \\"roki\\": { \\"component\\": \\"LogoIcon\\", \\"props\\": { \\"name\\": \\"docusaurus\\", \\"size\\": \\"124\\" } }\\n  ```\\n  ```mdx\\n  On an MDX page, typing \u201Cnana\u201D will display the CSS\u20113 icon and \u201Croki\u201D the Docusaurus icon.\\n  ```\\n  Rendered: \\n  On an MDX page, typing \u201Cnana\u201D will display the CSS\u20113 icon and \u201Croki\u201D the Docusaurus icon.\\n\\n  Additional example with an explicit Iconify set:\\n  ```json\\n  \\"node\\": { \\"component\\": \\"LogoIcon\\", \\"props\\": { \\"name\\": \\"logos:nodejs\\", \\"size\\": 64 } }\\n  ```\\n    Rendered `node` = Node icon of node.js technology\\n\\n### Word \u2192 Tooltip\\n\\n- Keys: `Giti` and `kiki`:\\n    ```json\\n    \\"Giti\\": { \\"component\\": \\"Tooltip\\", \\"props\\": { \\"text\\": \\"DocuxLab\\" }, \\"children\\": \\"Global replacement\\" }\\n    \\"kiki\\": { \\"component\\": \\"Tooltip\\", \\"props\\": { \\"text\\": \\"Documentation\\" }, \\"children\\": \\"Docux Docs\\" }\\n    ```\\n    ```mdx\\n    The word \u201CGiti\u201D anywhere will be replaced by `<Tooltip text=\\"DocuxLab\\">Global replacement</Tooltip>`. In docs, \u201Ckiki\u201D becomes `<Tooltip text=\\"Documentation\\">Docux Docs</Tooltip>`.\\n    ```\\n    Rendered: The word \u201CGiti\u201D anywhere will be replaced by `<Tooltip text=\\"DocuxLab\\">Global replacement</Tooltip>`. In docs, \u201Ckiki\u201D becomes `<Tooltip text=\\"Documentation\\">Docux Docs</Tooltip>`.\\n\\n\\n\\n\\n\\n\\n### Word \u2192 Clickable image (ImageOnClick)\\n\\n`ImageOnClick` is a local component that displays an image overlay on click. \\n\\n```mdx\\nIn a post, typing \u201Cschema-diagram\u201D will display a clickable link opening the image `/img/diagram.png` fullscreen.\\n```\\nReplacement example:\\n\\n```json\\n{\\n  \\"pages\\": {\\n    \\"schema-diagram\\": {\\n      \\"component\\": \\"ImageOnClick\\",\\n      \\"props\\": {\\n        \\"imageUrl\\": \\"/img/rocket_1f680.gif\\",\\n        \\"altText\\": \\"Architecture diagram\\",\\n        \\"buttonName\\": \\"Click me\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\nOn a page, typing schema-diagram will display a clickable link opening the image `/img/rocket_1f680.gif` fullscreen.\\n\\n\\n## Important behaviors to know\\n\\n- Ignored parents: no replacement inside links, headings, code blocks/inline code, images.\\n- Merged sections: for a blog file, merge `all` then `blog` (the latter wins on conflict). Same logic for `pages` and `docs`.\\n- Replacement order: sort by decreasing word length to avoid overlaps.\\n- Unicode boundaries: the regex uses lookarounds and Unicode classes to avoid matching substrings (e.g., don\u2019t replace \u201CTS\u201D inside \u201Cint\xe9r\xeats\u201D).\\n- Build report: with DEBUG on, a console report per section shows how many times each word was replaced.\\n\\n\\n## Why MDX/MD instead of JSX/TSX pages?\\n\\n> File compatibility: the plugin works in both `.md` and `.mdx` pages.\\n> Opinion: I chose to convert all my pages to `.mdx` to guarantee consistent support for MDX components and the plugin everywhere. Handling `.jsx` or `.tsx` pages would require a different, more complex approach with a dedicated React component for pages.\\n\\n\\n- Remark/rehype pipeline: Remark plugins only run on Markdown/MDX content. JSX/TSX pages are plain React components compiled by Babel/TS and bypass the Markdown pipeline, so the plugin never \u201Csees\u201D their text.\\n- AST expectations: This plugin operates on the Markdown AST (mdast) text nodes. In JSX, text is split across JSXText/StringLiteral and mixed with elements/props. Safe replacement there would require a Babel/SWC transform or a runtime React tree walk, with high risk of touching code, props, or links.\\n- Word-boundaries and Unicode: The plugin relies on contiguous text to apply robust Unicode word-boundary regexes. In JSX, sentences are often fragmented across nodes/components, making accurate matching and ordering (inline vs block) unreliable.\\n- MDX is a perfect fit: MDX gives a Markdown-first AST where narrative text lives in text nodes, and it officially supports injecting MDX components as replacements\u2014exactly what the plugin generates.\\n\\nIf you must keep JSX/TSX pages, possible alternatives:\\n- Build-time: write a Babel/SWC plugin that transforms JSXText/StringLiteral using the same rules (harder to maintain).\\n- Runtime: create a React wrapper that recursively walks children and replaces strings (perf and correctness caveats).\\n- Hybrid: wrap JSX pages with a thin MDX shell and keep textual content in MDX so the plugin can process it.\\n\\n\\n## Example of the report log\\n\\nWhen `DEBUG` is enabled, the plugin prints a summary of replacements to the console after build/dev:\\n\\n```text\\n=== Remark replacements report ===\\n[blog]\\n- \\"Cavo\\" replaced 4 times\\n- \\"kiki\\" replaced 4 times\\n[all]\\n- \\"Giti\\" replaced 4 times\\n======================================\\n```"},{"id":"docusaurus-scroll-to-top-button","metadata":{"permalink":"/blog/docusaurus-scroll-to-top-button","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/10/05/scrolltotop/index.mdx","source":"@site/blog/2025/10/05/scrolltotop/index.mdx","title":"ScrollToTopButton Component","description":"Simple React component adding a floating \'back to top\' button with delayed appearance (after scrolling 300px), click animation and smooth scroll behavior in Docusaurus.","date":"2025-10-06T00:00:00.000Z","tags":[{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"scroll","permalink":"/blog/tags/scroll"},{"inline":true,"label":"component","permalink":"/blog/tags/component"}],"readingTime":2.01,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"ScrollToTopButton Component","slug":"docusaurus-scroll-to-top-button","description":"Simple React component adding a floating \'back to top\' button with delayed appearance (after scrolling 300px), click animation and smooth scroll behavior in Docusaurus.","schemaTypes":["HowTo","BlogPosting"],"image":"/img/scrolltotop.webp","authors":["docux"],"mainTag":"ux","tags":["react","scroll","component"],"date":"2025-10-06T00:00:00.000Z","difficulty":"easy","totalTime":"PT20M","yield":"Reusable back-to-top button.","genre":"Technical Tutorial","inLanguage":"en","readingTime":"3 min","copyrightYear":2025,"copyrightHolder":"Docux","keywords":["docusaurus","scroll to top","react","component","ui","scroll"],"hide_table_of_contents":false,"series":"Design your site","blueSkyRecordKey":"3m2ivzblafs2h"},"unlisted":false,"prevItem":{"title":"Plugin Remark Replace Words","permalink":"/blog/remark-replace-words-plugin"},"nextItem":{"title":"Tutorial Docusaurus React Live","permalink":"/blog/docusaurus-react-live-guide"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Development](https://img.shields.io/badge/Development-passed-green.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 25%](https://img.shields.io/badge/AI-25%-blue.svg)](https://github.com/Juniors017)\\n\\n![](/img/scrolltotop.webp)\\n</div>\\n</center>\\n\\nThis component adds a fixed floating Back to Top button. It becomes visible after the user scrolls 300px vertically; on click it triggers a smooth scroll to the top while playing a short visual animation on the icon. It does not expose public props: customization (threshold, image) is done by editing the source (`index.js`). The goal is to keep it lightweight and easy to reuse.\\n\x3c!--truncate--\x3e\\n\\n## Overview\\n\\nImplemented features:\\n- Appears after 300px scroll (hard\u2011coded condition)\\n- Smooth scroll to top on click\\n- CSS animation on click (`fly` + `@keyframes flyUp`)\\n- Show/Hide using opacity + visibility\\n- Scroll listener with cleanup in `useEffect`\\n- Icon image can be swapped by changing the import\\n\\n\\n## Component Code\\n<Snippet filename=\\"src/components/ScrollToTopButton/index.js\\" source=\\"src/components/ScrollToTopButton/index.js\\" />\\n\\n\\n<Snippet filename=\\"src/components/ScrollToTopButton/styles.module.css\\" source=\\"src/components/ScrollToTopButton/styles.module.css\\" />\\n\\n\\n## Installation\\n\\n1. Copy the `ScrollToTopButton` folder into `src/components/`\\n2. Import the component in your global layout (or a specific page)\\n3. Ensure the image import works (`/static/img/buttontop.webp`)\\n4. (Optional) Replace the image with your own\\n\\n## File structure\\n\\n```\\nsrc/components/ScrollToTopButton/\\n\u251C\u2500\u2500 index.js              # Main React component\\n\u2514\u2500\u2500 styles.module.css     # Scoped CSS Module\\n```\\n\\n\\n### Configuration\\n\\n- Threshold: edit `if (window.scrollY > 300)` in `index.js`\\n- Image: replace the imported `buttontop` image\\n\\n## Customization\\n\\n### Change the image\\n\\n1. Place your image inside `static/img/`\\n2. Update the import in `index.js`:\\n\\n```jsx\\nimport buttontop from \'@site/static/img/your-image.webp\'\\n```\\n\\n3. The component uses it like:\\n\\n```jsx\\n<img\\n  src={buttontop}\\n  alt=\\"Back to top\\"\\n  width=\\"30\\"\\n  height=\\"30\\"\\n/>\\n```\\n\\n### Edit styles\\n\\nOpen `styles.module.css` and adjust:\\n\\n- Position: tweak `bottom` / `right`\\n- Size: adjust `width` / `height`\\n- Visual: modify `box-shadow`\\n- Animation: change `flyUp` keyframes\\n\\n## State & Behavior\\n\\n- `isVisible`: true when `window.scrollY > 300`, else false\\n- `fly`: toggled to true on click, reset after 800ms\\n- Scroll listener: handles visibility logic and is cleaned up on unmount\\n\\n## Animations\\n\\n### Show/Hide\\n```css\\ntransition: opacity 0.4s, visibility 0.4s;\\n```\\n\\n### Click animation (flyUp)\\n```css\\n@keyframes flyUp {\\n  0% {\\n    transform: translateY(0) scale(1);\\n    opacity: 1;\\n  }\\n  100% {\\n    transform: translateY(-300px) scale(0.6);\\n    opacity: 0;\\n  }\\n}\\n```\\n\\n## Full example\\n\\n```jsx\\nimport React from \'react\';\\nimport Layout from \'@theme-original/Layout\';\\nimport ScrollToTopButton from \'@site/src/components/ScrollToTopButton\';\\n\\nexport default function LayoutWrapper(props) {\\n  return (\\n    <>\\n      <Layout {...props} />\\n      <ScrollToTopButton />\\n    </>\\n  );\\n}\\n```"},{"id":"docusaurus-react-live-guide","metadata":{"permalink":"/blog/docusaurus-react-live-guide","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/10/01/livecoding/index.mdx","source":"@site/blog/2025/10/01/livecoding/index.mdx","title":"Tutorial Docusaurus React Live","description":"Practical guide to add interactive react-live code playgrounds in Docusaurus: theme installation, configuration, ReactLiveScope swizzle, and maintainable example patterns.","date":"2025-10-01T00:00:00.000Z","tags":[{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"live-code","permalink":"/blog/tags/live-code"},{"inline":true,"label":"playground","permalink":"/blog/tags/playground"},{"inline":true,"label":"swizzle","permalink":"/blog/tags/swizzle"},{"inline":true,"label":"mdx","permalink":"/blog/tags/mdx"}],"readingTime":3.45,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Tutorial Docusaurus React Live","slug":"docusaurus-react-live-guide","description":"Practical guide to add interactive react-live code playgrounds in Docusaurus: theme installation, configuration, ReactLiveScope swizzle, and maintainable example patterns.","schemaTypes":["HowTo","BlogPosting"],"image":"/img/livecoding.webp","authors":["docux"],"mainTag":"live-code","tags":["react","live-code","playground","swizzle","mdx"],"date":"2025-10-01T00:00:00.000Z","difficulty":"Beginner-Intermediate","totalTime":"PT20M","prepTime":"PT5M","performTime":"PT15M","estimatedCost":"Free","tool":["React","Docusaurus","react-live","MDX"],"supply":["Node.js","Docusaurus","React","Hooks"],"yield":"Reusable interactive playground with a custom swizzled scope.","genre":"Technical Tutorial","inLanguage":"en","readingTime":"6 min","copyrightYear":2025,"copyrightHolder":"Docux","category":"Frontend","keywords":["docusaurus","react-live","live code","mdx","swizzle","playground","react"],"hide_table_of_contents":false,"series":"Design your site","blueSkyRecordKey":"3m26ttsgaes2c"},"unlisted":false,"prevItem":{"title":"ScrollToTopButton Component","permalink":"/blog/docusaurus-scroll-to-top-button"},"nextItem":{"title":"Component Tooltip","permalink":"/blog/Tooltip-tools-docusaurus"}},"content":"<center>\\n<div>\\n![](/img/livecoding.webp)\\n</div>\\n</center>\\n\\n## 1. Why a playground?\\nReaders learn faster when they can modify an example inline. The `@docusaurus/theme-live-codeblock` theme integrates **react-live** to evaluate JSX in real time.\\n\\nBenefits:\\n- Instant feedback\\n- Pedagogical demos without an external sandbox\\n- Visual consistency with your site\\n- No page context switching\\n\x3c!--truncate--\x3e\\n\\n\\n## 2. Install the live theme\\n\\n<Terminal title=\\"user@machine: ~/yourproject\\">\\n\\nnpm install @docusaurus/theme-live-codeblock --save\\n\\n</Terminal>\\n\\n:::note\\nEnsure all `@docusaurus/*` versions are aligned (e.g. `3.9.1`).\\n:::\\n\\n## 3. Configure `docusaurus.config.js`\\n\\nAdd (or extend) the `themes` key:\\n<Tabs>\\n<TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size=\'32\' /> </>}>\\n\\n\\n```js title=\\"docusaurus.config.js\\"\\nexport default {\\n\\t// ...other options\\n\\tthemes: [\\n\\t\\t\'@docusaurus/theme-live-codeblock\'\\n\\t],\\n};\\n```\\n</TabItem>\\n</Tabs>\\n\\nOptional: adjust styling with custom CSS (Infima is bundled).\\n\\n\\n\\n## 4. Create your first `jsx live` blocks\\n\\nA MDX fenced block becomes interactive by adding `live` after the language:\\n\\n````mdx\\n```jsx live\\n() => <button style={{padding:8}}>Click me</button>\\n```\\n````\\n\\n\\nYou can also write a function:\\n\\n````mdx\\n```jsx live\\nfunction Counter(){\\n\\tconst [n,setN] = React.useState(0);\\n\\treturn <button onClick={()=>setN(n+1)}>Count: {n}</button>;\\n}\\n<Counter />\\n```\\n````\\n\\n\\n\\n## 5. Effective patterns\\n\\n| Pattern | Use case | Benefit | Example |\\n|---------|-------|----------|---------|\\n| Final expression | Tiny demo | Ultra concise | `(<Badge>Hi</Badge>)` |\\n| Const + final identifier | Readable snippet | Shows value | `const el=<div/>; el` |\\n| Function + call | Internal logic | Reusable | `function Demo(){...}; <Demo />` |\\n| Inline hooks | Small interactions | Direct | `const [x,setX]=useState(0); <button onClick={()=>setX(x+1)}>{x}` |\\n| Export default (avoid) | Legacy habit | Noise here | (do not use) |\\n\\nKey rule: the last **expression** of the block is rendered (no `export`).\\n\\n\\n\\n## 6. Swizzle `ReactLiveScope`\\n\\nProblem: inside a live block, your custom components (`Tooltip`, `LogoIcon`, etc.) are not known by default.\\n\\nSolution: create `src/theme/ReactLiveScope/index.js` to inject a global scope.\\n\\n<Snippet filename=\\"src/theme/ReactLiveScope/index.js\\" source=\\"src/theme/ReactLiveScope/index.js\\" />\\n\\n\\nFrom there on:\\n\\n```jsx live\\n\\n\\t<Tooltip model=\\"teacher\\" text=\\"DocuxLab\\">\\n\\t\\tSwizzle ready!\\n\\t</Tooltip>\\n\\n```\\n\\n\\n## 7. Advanced examples: interactive Tooltip\\n\\n### Simple model\\n```jsx live\\n\\n\\t<Tooltip text=\\"Simple tooltip\\">Short content.</Tooltip>\\n\\n```\\n\\n### Two tooltips side by side\\n```jsx live\\n\\n\\t<div style={{display:\'flex\', gap:16}}>\\n\\t\\t<Tooltip model=\\"teacher\\" text=\\"Teacher\\">\\n\\t\\t\\tExample with model.\\n\\t\\t</Tooltip>\\n\\t\\t<Tooltip model=\\"suricate\\" text=\\"P\xe9p\xe9\\" position=\\"bottom\\">\\n\\t\\t\\tBottom position.\\n\\t\\t</Tooltip>\\n\\t</div>\\n\\n```\\n\\n\\n\\n\\n\\n### Skill (progress bar)\\n```jsx live\\n<div style={{display:\'flex\', flexDirection:\'column\', gap:8}}>\\n\\t<Skill name={<><LogoIcon name=\\"react\\" size=\'24\' /> React</>} value={88} type=\\"bar\\" color=\\"#61DAFB\\" height={25} />\\n\\t<Skill name={<><LogoIcon name=\\"vue\\" size=\'24\' /> Vue.js</>} value={75} type=\\"bar\\" color=\\"#4FC08D\\" height={25} />\\n\\t<Skill name={<><LogoIcon name=\\"nodejs\\" size=\'24\' /> Node.js</>} value={82} type=\\"bar\\" color=\\"#339933\\" height={25} />\\n\\t<Skill name={<><LogoIcon name=\\"python\\" size=\'24\' /> Python</>} value={78} type=\\"bar\\" color=\\"#3776AB\\" height={25} />\\n</div>\\n\\n```\\n\\n### Skill (animated circle)\\n```jsx live\\n<div style={{display: \'grid\', gridTemplateColumns: \'repeat(auto-fit, minmax(150px, 1fr))\', gap: \'20px\', marginTop: \'20px\'}}>\\n  <Skill name={<><LogoIcon name=\\"html-5\\" size=\'24\' /> </>} value={95} type=\\"circle\\" color=\\"#E34F26\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"css-3\\" size=\'24\' /> </>} value={90} type=\\"circle\\" color=\\"#1572B6\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>} value={85} type=\\"circle\\" color=\\"#F7DF1E\\" valuePosition=\\"center\\" size={100} />\\n  </div>\\n```\\n\\n### Contributor (card)\\n```jsx live\\n\\n\\t<Contributor\\n\\t\\tname=\\"Docux\\"\\n\\t\\tgithub=\\"Juniors017\\"\\n\\t\\twebsite=\\"https://github.com/Juniors017\\"\\n\\t\\tavatarUrl=\\"/img/docux.webp\\"\\n\\t\\tcomponents={[\'Tooltip\',\'Skill\',\'etc...\']}\\n\\t\\tdescription=\\"Author of several UI components for this site.\\"\\n        \\n\\t/>\\n\\n```\\n\\n### LogoIcon (variants)\\n```jsx live\\n\\n\\t<div style={{display:\'flex\',gap:24,alignItems:\'center\'}}>\\n\\t\\t<LogoIcon name=\\"docusaurus\\" size={40} />\\n\\t\\t<LogoIcon name=\\"javascript\\" size={40} />\\n\\t\\t<LogoIcon name=\\"css-3\\" size={40} />\\n\\t</div>\\n\\n```\\n\\n\\n\\n## 8. Best practices\\n* Keep snippets short and progressive.\\n* Do not overload the scope (clarity + performance).\\n* Watch for CSS collisions (avoid heavy globals).\\n* Prefer an explicit final expression for readability.\\n* Update `@docusaurus/*` dependencies together.\\n\\n## 9. Quick debugging\\n\\n<center>\\n\\n| Issue | Likely cause | Fix |\\n|----------|----------------|----------|\\n| `X is not defined` | Component not in scope | Add to `ReactLiveScope` |\\n| Nothing displayed | No final expression | End with JSX or identifier |\\n| React import crash | Unnecessary import | Remove `import React` |\\n| Broken style | Infima/custom conflict | Wrap / isolate |\\n| Versions mismatch | Misaligned packages | Align versions |\\n\\n</center>\\n\\n\\n## 10. Going further\\nIdeas:\\n- Add a light/dark theme toggle inside demos.\\n- Persist state (localStorage) in a live block.\\n- Generate dynamic component variations.\\n\\n<Tooltip model=\\"teacher\\" text=\\"Your turn!\\">You can now integrate maintainable, ergonomic interactive examples into your site.</Tooltip>"},{"id":"Tooltip-tools-docusaurus","metadata":{"permalink":"/blog/Tooltip-tools-docusaurus","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/09/18/tooltip/index.mdx","source":"@site/blog/2025/09/18/tooltip/index.mdx","title":"Component Tooltip","description":"A comprehensive guide to creating a dynamic and accessible Tooltip component in React and Docusaurus, featuring smart positioning and custom styling.","date":"2025-09-21T00:00:00.000Z","tags":[{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"component","permalink":"/blog/tags/component"},{"inline":true,"label":"tooltip","permalink":"/blog/tags/tooltip"},{"inline":true,"label":"accessibility","permalink":"/blog/tags/accessibility"}],"readingTime":6.36,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Component Tooltip","description":"A comprehensive guide to creating a dynamic and accessible Tooltip component in React and Docusaurus, featuring smart positioning and custom styling.","schemaTypes":["HowTo","BlogPosting"],"slug":"Tooltip-tools-docusaurus","image":"/img/tooltipcomponent.webp","authors":["docux"],"mainTag":"Design","tags":["react","component","tooltip","accessibility"],"date":"2025-09-21T00:00:00.000Z","last_update":{"date":"2025-09-21T00:00:00.000Z","author":"docux"},"difficulty":"Intermediate","totalTime":"PT35M","prepTime":"PT5M","performTime":"PT30M","estimatedCost":"Free","tool":["React","Docusaurus","JavaScript","CSS Modules","VSCode"],"supply":["Node.js","Docusaurus","React Hooks","ResizeObserver API"],"yield":"A reusable Tooltip component with dynamic positioning and customization.","genre":"Technical Tutorial","inLanguage":"en","isAccessibleForFree":true,"readingTime":"8 min","articleSection":"Tutorial","copyrightYear":2025,"copyrightHolder":"Docux","category":"Web Development","keywords":["tooltip","react","component","dynamic positioning","flipping","react portal","accessibility","docusaurus"],"hide_table_of_contents":false,"series":"Design your site","blueSkyRecordKey":"3lzdqemif3227"},"unlisted":false,"prevItem":{"title":"Tutorial Docusaurus React Live","permalink":"/blog/docusaurus-react-live-guide"},"nextItem":{"title":"Component Skill Bars & Circles","permalink":"/blog/skill-component-animated-progress-docusaurus"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Developement](https://img.shields.io/badge/Developement-docux-green.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 0%](https://img.shields.io/badge/AI-45%-blue.svg)](https://github.com/Juniors017)\\n\\n![](/img/tooltipcomponent.webp)\\n</div>\\n</center>\\n\\n<Tooltip model=\\"teacher\\" text=\\"Tooltips\\">In computing, a tooltip is a message that appears as an overlay when the mouse pointer hovers over certain elements of the graphical user interface. \\nIt gets its name from its resemblance to speech bubbles in comic strips \\n[Source Wikipedia](https://en.wikipedia.org/wiki/Tooltip)</Tooltip> are everywhere on the web. They are essential for providing contextual information without cluttering the interface. But creating one that is robust, aesthetically pleasing, and above all, accessible, is a real challenge.\\n\\nIn this article, I will introduce the `Tooltip` component I developed for <Tooltip model=\\"teacher\\" text=\\"Docusaurus\\" >Docusaurus is a static-site generator. \\nIt builds a single-page application with fast client-side navigation, leveraging the full power of React to make your site interactive. \\nIt provides out-of-the-box documentation features but can be used to create any kind of site (personal website, product, blog, marketing landing pages, etc).</Tooltip>. It doesn\'t just display a simple information box; it integrates intelligent positioning logic, an arrow that always stays aligned, and great customization flexibility.\\n\\n\x3c!--truncate--\x3e\\n\\n## Key Features\\n\\nBefore diving into the demo, here is an overview of the features that make this component so cool.\\n\\n### 1. Smart Positioning (Flipping)\\n\\nThe component is smart enough to know if it has enough space to be displayed. If you ask for a tooltip to appear at the top (`position=\\"top\\"`) but it is too close to the top edge of the screen, it will **automatically flip** to the bottom. This ensures the content always remains visible to the user.\\n\\n### 2. Always-Aligned Arrow\\n\\nThis is the killer detail! The small arrow of the tooltip isn\'t just centered. It is dynamically calculated in JavaScript to **point precisely to the center of the trigger element**, even when the tooltip is shifted by the screen edges. No more arrows pointing into empty space!\\n\\n### 3. Advanced Customization\\n\\nThe `Tooltip` component comes with several predefined \\"models\\" for common use cases (`info`, `success`, `warning`, `error`), but it also allows for full customization via the `style` prop. You can even insert rich content, such as images or other React components.\\n\\n### 4. Accessibility (`a11y`)\\n\\nA good component must be accessible to everyone. The tooltip is linked to its trigger element via the `aria-describedby` attributes, it is focusable, and can be closed with the `Escape` key.\\n\\n##  Component Code\\n\\n\\n<Snippet filename=\\"/src/components/Tooltip/index.js\\" source=\\"src/components/Tooltip/index.js\\" />\\n\\n<Snippet filename=\\"/src/components/Tooltip/styles.module.css\\" source=\\"src/components/Tooltip/styles.module.css\\" />\\n\\n## Models Code\\n<Snippet filename=\\"/src/components/Tooltip/models.js\\" source=\\"src/components/Tooltip/models.js\\" />\\n\\n\\n## Usage in Docusaurus\\n\\nOne of the great advantages of Docusaurus is its ability to \\"swizzle\\" components and make them globally available in MDX files. This is exactly what was done for this `Tooltip` component.\\n\\nThanks to a simple configuration in the `src/theme/MDXComponents.js` file, the component is imported and added to the list of MDX components.\\n\\n```js title=\\"src/theme/MDXComponents.js\\"\\nimport Tooltip from \'@site/src/components/Tooltip\';\\n\\nexport default {\\n  // ... other components\\n  Tooltip\\n};\\n```\\n\\n**What does this mean for you?**\\nSimply that you **never need to import the `Tooltip` component** in your `.mdx` files. You can use it directly, as if it were a native HTML tag.\\n\\n## Usage Examples\\n\\nHere is an overview of the different ways to use the `Tooltip` component.\\n\\n### Positioning\\n\\nThe `position` prop allows you to choose where the tooltip appears. The options are `top`, `bottom`, `left`, and `right`. Don\'t forget that if the tooltip doesn\'t have enough space, it will automatically reposition itself!\\n\\n<Columns className=\\"margin-vert--md text--center\\">\\n<Column>\\n\\n  <Tooltip text=\\"Position Top\\" position=\\"top\\">\\n    Default position.\\n  </Tooltip>\\n  \\n</Column>\\n<Column>\\n  <Tooltip text=\\"Position Bottom\\" position=\\"bottom\\">\\n    Appears below.\\n  </Tooltip>\\n</Column>\\n<Column>\\n  <Tooltip text=\\"Position Left\\" position=\\"left\\">\\n    Appears on the left.\\n  </Tooltip>\\n</Column>\\n<Column>\\n  <Tooltip text=\\"Position Right\\" position=\\"right\\">\\n    Appears on the right.\\n  </Tooltip>\\n</Column>\\n\\n</Columns>\\n\\n\\n```mdx\\n// Top\\n<Tooltip text=\\"Position Top\\" position=\\"top\\">\\n  Default position.\\n</Tooltip>\\n\\n// Bottom\\n<Tooltip text=\\"Position Bottom\\" position=\\"bottom\\">\\n  Appears below.\\n</Tooltip>\\n\\n// Left\\n<Tooltip text=\\"Position Left\\" position=\\"left\\">\\n  Appears on the left.\\n</Tooltip>\\n\\n// Right\\n<Tooltip text=\\"Position Right\\" position=\\"right\\">\\n  Appears on the right.\\n</Tooltip>\\n```\\n\\n### Style Models\\n\\nUse the `model` prop to quickly change the tooltip\'s appearance.\\nYou can create your own reusable models in `models.js`\\n\\n<Columns className=\\"margin-vert--md text--center\\">\\n\\n<Column>\\n  <Tooltip text=\\"Information\\" model=\\"info\\">\\n    This is useful information.\\n  </Tooltip>\\n</Column>\\n<Column>\\n  <Tooltip text=\\"Success\\" model=\\"success\\">\\n    The operation was successful!\\n  </Tooltip>\\n</Column>\\n<Column>\\n  <Tooltip text=\\"Warning\\" model=\\"warning\\">\\n    Be careful here.\\n  </Tooltip>\\n  </Column>\\n  <Column>\\n  <Tooltip text=\\"Error\\" model=\\"error\\">\\n    An error has occurred.\\n  </Tooltip>\\n  </Column>\\n</Columns>\\n\\n\\n```mdx\\n// Info\\n<Tooltip text=\\"Information\\" model=\\"info\\">\\n  This is useful information.\\n</Tooltip>\\n\\n// Success\\n<Tooltip text=\\"Success\\" model=\\"success\\">\\n  The operation was successful!\\n</Tooltip>\\n\\n// Warning\\n<Tooltip text=\\"Warning\\" model=\\"warning\\">\\n  Be careful here.\\n</Tooltip>\\n\\n// Error\\n<Tooltip text=\\"Error\\" model=\\"error\\">\\n  An error has occurred.\\n</Tooltip>\\n\\n```\\n### We can create cool models\\n<Columns className=\\"margin-vert--md text--center\\">\\n<Column>\\n<Tooltip model=\\"teacher\\" text=\\"DocuxLab\\" >\\nMy favorite \\nand the one you will find mostly on this site.\\nWe can really make nice tooltips, \\n it dusts off the classic info bubble.\\n<LogoIcon name=\\"docusaurus\\" size=\'20\' />\\n</Tooltip>\\n</Column>\\n<Column>\\n<Tooltip model=\\"suricate\\" text=\\"But what is it doing here?\\" >\\nMy friend Christophe\'s mascot has sneaked in here.\\n\\n[@avonture.be](https://avonture.be/)\\n</Tooltip>\\n</Column>\\n</Columns>\\n\\n```mdx\\n<Tooltip model=\\"teacher\\" text=\\"DocuxLab\\" >\\nMy favorite \\nand the one you will find mostly on this site.\\nWe can really make nice tooltips, \\n it dusts off the classic info bubble.\\n<LogoIcon name=\\"docusaurus\\" size=\'20\' />\\n</Tooltip>\\n\\n<Tooltip model=\\"suricate\\" text=\\"But what is it doing here?\\" >\\nMy friend Christophe\'s mascot has sneaked in here.\\n\\n[@avonture.be](https://avonture.be/)\\n</Tooltip>\\n```\\n\\n\\n### Rich Content and Customization\\n\\nThe true power of this component lies in its ability to accept rich content and custom styles.\\n\\n<Columns className=\\"margin-vert--md text--center\\">\\n<Column>\\n\\n<Tooltip text=\\"Rich Content\\">\\n  You can use <b>bold</b>, <i>italics</i>, and even links like [this link](https://docusaurus.io).\\n\\n  You can even include other components, and even an image.\\n  <center>\\n  ![](/img/tooltipstest.webp)\\n  </center>\\n</Tooltip>\\n\\n  </Column>\\n  <Column>\\n  <Tooltip text=\\"Custom Style\\" style={{\\n    background: \'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\',\\n    color: \'white\',\\n    border: \'2px solid white\',\\n    borderRadius: \'10px\',\\n    boxShadow: \'0 3px 5px 2px rgba(255, 105, 135, .3)\'\\n  }}>\\n    This tooltip has a unique style passed via the <code>style</code> prop.\\n  </Tooltip>\\n</Column>\\n</Columns>\\n\\n\\n\\n\\n```mdx\\n// Rich Content\\n<Tooltip text=\\"Rich Content\\">\\n  You can use <b>bold</b>, <i>italics</i>, and even links like [this link](https://docusaurus.io).\\n\\n  You can even include other components, and even an image.\\n  <center>\\n  ![](/img/tooltipstest.webp)\\n  </center>\\n</Tooltip>\\n\\n// Custom Style\\n  <Tooltip text=\\"Custom Style\\" style={{\\n    background: \'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\',\\n    color: \'white\',\\n    border: \'2px solid white\',\\n    borderRadius: \'10px\',\\n    boxShadow: \'0 3px 5px 2px rgba(255, 105, 135, .3)\'\\n  }}>\\n    This tooltip has a unique style passed via the <code>style</code> prop.\\n  </Tooltip>\\n```\\n## Play in live with tooltip\\n```jsx live\\n// Thanks to the ReactLiveScope swizzle, Tooltip and LogoIcon are available without import.\\n// You can simply return JSX (last evaluated expression)\\n(\\n  <div style={{display:\'flex\', gap:16}}>\\n    <Tooltip model=\\"teacher\\" text=\\"DocuxLab\\">\\n      My favorite\\n      and the one you will find mostly on this site.\\n      <br />\\n      We can really make nice tooltips,\\n      it dusts off the classic info bubble.\\n      <LogoIcon name=\\"docusaurus\\" size=\'20\' />\\n    </Tooltip>\\n    <Tooltip model=\\"suricate\\" text=\\"P\xe9p\xe9\\" position=\\"bottom\\">\\n      A second tooltip using another model.\\n    </Tooltip>\\n  </div>\\n)\\n```"},{"id":"skill-component-animated-progress-docusaurus","metadata":{"permalink":"/blog/skill-component-animated-progress-docusaurus","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/09/16/skillbar/index.mdx","source":"@site/blog/2025/09/16/skillbar/index.mdx","title":"Component Skill Bars & Circles","description":"A comprehensive React component for displaying skills as animated progress bars or circles with scroll animations, gradients, and theme support in Docusaurus.","date":"2025-09-16T00:00:00.000Z","tags":[{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"components","permalink":"/blog/tags/components"},{"inline":true,"label":"animations","permalink":"/blog/tags/animations"},{"inline":true,"label":"progress","permalink":"/blog/tags/progress"},{"inline":true,"label":"skills","permalink":"/blog/tags/skills"},{"inline":true,"label":"svg","permalink":"/blog/tags/svg"},{"inline":true,"label":"css","permalink":"/blog/tags/css"}],"readingTime":13.3,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Component Skill Bars & Circles","description":"A comprehensive React component for displaying skills as animated progress bars or circles with scroll animations, gradients, and theme support in Docusaurus.","schemaTypes":["HowTo","BlogPosting"],"slug":"skill-component-animated-progress-docusaurus","image":"/img/skillbar.webp","authors":["docux"],"mainTag":"Design","tags":["react","components","animations","progress","skills","svg","css"],"date":"2025-09-16T00:00:00.000Z","last_update":{"date":"2025-09-16T00:00:00.000Z","author":"docux"},"difficulty":"Intermediate","totalTime":"PT30M","prepTime":"PT10M","performTime":"PT20M","estimatedCost":"Free","tool":["React","Docusaurus","JavaScript","CSS Modules","SVG","VSCode"],"supply":["Node.js","Docusaurus","React Hooks","Intersection Observer API"],"yield":"Reusable Skill component with bars/circles and scroll animations","genre":"Technical Tutorial","inLanguage":"en","isAccessibleForFree":true,"readingTime":"8 min","articleSection":"Tutorial","copyrightYear":2025,"copyrightHolder":"Docux","category":"Web Development","keywords":["skill component","react","progress bars","animated circles","scroll animations","svg","gradients","intersection observer"],"hide_table_of_contents":false,"series":"Design your site","blueSkyRecordKey":"3lywqfsemu22l"},"unlisted":false,"prevItem":{"title":"Component Tooltip","permalink":"/blog/Tooltip-tools-docusaurus"},"nextItem":{"title":"Component LogoIcon","permalink":"/blog/logoicon-component-docusaurus"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Developement](https://img.shields.io/badge/Developement-progress-orange.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 55%](https://img.shields.io/badge/AI-55%-blue.svg)](https://github.com/Juniors017)\\n\\n![](/img/skillbar.webp)\\n</div>\\n</center>\\n\\n\\nThe `Skill` component allows displaying skills as **progress bars** or **animated circles** with scroll animations and complete customization.\\n\\nI\'ve added JSDoc comments in the code to explain each prop and its function. I\'ve never done this before but I think I\'ll keep this habit.\\n\\n<Columns>\\n    <Column>\\n        <Card>\\n            <CardBody>\\n                <center>\\n                    <Skill\\n                        name={<><LogoIcon name=\\"docusaurus\\" size=\'64\' /> </>}\\n                        value={85}\\n                        type=\\"circle\\"\\n                        color=\\"#08c921ff\\"\\n                        valuePosition=\\"center\\"\\n                        size={200}/>\\n                </center>\\n            </CardBody>\\n        </Card>\\n    </Column>\\n    <Column>\\n        <Card>\\n            <CardBody>\\n                <Skill\\n                    name={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>}\\n                    value={95}\\n                    type=\\"bar\\"\\n                    color=\\"#d6e326ff\\"\\n                    height={25}/>\\n                <Skill\\n                    name={<><LogoIcon name=\\"react\\" size=\'24\' /></>}\\n                    value={90}\\n                    type=\\"bar\\"\\n                    color=\\"#15b69bff\\"\\n                    height={25}/>\\n                \\n            </CardBody>\\n        </Card>\\n    </Column>\\n</Columns>\\n\x3c!-- truncate --\x3e\\n\\n## File Structure\\n```\\nsrc/components/Skill/\\n\u251C\u2500\u2500 index.js           # Main React component\\n\u251C\u2500\u2500 styles.module.css  # Styles with CSS Modules\\n\u2514\u2500\u2500 README.md         # Documentation\\n```\\n\\n##  Component Code\\n\\n<Snippet filename=\\"src/components/Skill/index.js\\" source=\\"src/components/Skill/index.js\\" />\\n\\n<Snippet filename=\\"src/components/Skill/styles.module.css\\" source=\\"src/components/Skill/styles.module.css\\" />\\n\\n\\n\\n## When to Use the Skill Component\\n\\n### Display Types\\n- **Horizontal bars** (`type=\\"bar\\"`)\\n- **Progress circles** (`type=\\"circle\\"`)\\n\\n### Customization\\n- **Automatic colors** based on percentage (green\u2192yellow\u2192orange\u2192red)\\n- **Custom colors** with hex, RGB, or named colors\\n- **Gradients** (linear for bars, conic for circles)\\n- **Text positioning** (top, center, or around for circles)\\n- **Size control** (configurable width/height for bars, diameter for circles)\\n- **Thickness control** (stroke width for circles, height for bars)\\n- **Border styles** (rounded or sharp corners)\\n- **Animation control** (scroll-triggered or immediate, custom duration)\\n- **Percentage display** (show/hide percentage values)\\n- **Theme adaptation** (automatic light/dark mode support)\\n\\n\\n### Animations\\n- **Scroll animation** with Intersection Observer\\n- **Smooth transitions** with cubic-bezier\\n- **Fade-in appearance** with vertical translation\\n\\n## Automatic Color System\\n\\nThe component automatically generates colors based on percentage:\\n\\n- **80%+** : \u{1F7E2} Green (#4CAF50) - Expert\\n- **60-79%** : \u{1F7E1} Bright Yellow (#e5ff00ff) - Advanced  \\n- **40-59%** : \u{1F7E0} Orange (#FF9800) - Intermediate\\n- **20-39%** : \u{1F534} Bright Red (#ff4107ff) - Beginner\\n- **`<20%`** : \u{1F534} Dark Red (#f44336) - Very weak\\n\\n\\n### Themes\\n- **Light/dark mode** automatic\\n- **Adaptive CSS variables**\\n\\n## Available Props\\n<center>\\n\\n| Prop | Type | Default | Description |\\n|------|------|---------|-------------|\\n| `name` | string | - | Skill name |\\n| `value` | number | 0 | Percentage (0-100) |\\n| `type` | string | \\"bar\\" | \\"bar\\" or \\"circle\\" |\\n| `color` | string | auto | Custom color |\\n| `gradient` | object | - | `{from: \\"color1\\", to: \\"color2\\"}` |\\n| `rounded` | boolean | true | Rounded borders |\\n| `valuePosition` | string | \\"top\\" | \\"top\\", \\"center\\", \\"around\\" |\\n| `showPercentage` | boolean | true | Show % |\\n| `size` | number | 120 | Circle size (px) |\\n| `height` | number | 20 | Bar height (px) |\\n| `thickness` | number | 8 | Circle thickness (px) |\\n| `animationDuration` | number | 1.5 | Animation duration (s) |\\n| `animateOnScroll` | boolean | true | Scroll animation |\\n\\n</center>\\n\\n\\n## Bars\\n### Bars with automatic colours (based on percentage)\\n```html\\n<Skill name=\\"Expert\\" value={95} type=\\"bar\\" />\\n<Skill name=\\"Advanced\\" value={75} type=\\"bar\\" />\\n<Skill name=\\"Intermediate\\" value={50} type=\\"bar\\" />\\n<Skill name=\\"Beginner\\" value={25} type=\\"bar\\" />\\n<Skill name=\\"Very weak\\" value={10} type=\\"bar\\" />\\n```\\n<Skill name=\\"Expert\\" value={95} type=\\"bar\\" />\\n<Skill name=\\"Advanced\\" value={75} type=\\"bar\\" />\\n<Skill name=\\"Intermediate\\" value={50} type=\\"bar\\" />\\n<Skill name=\\"Beginner\\" value={25} type=\\"bar\\" />\\n<Skill name=\\"Very weak\\" value={10} type=\\"bar\\" />\\n\\n\\n### Bars with custom colors\\n```html\\n<Skill name=\\"JavaScript\\" value={85} type=\\"bar\\" color=\\"#F7DF1E\\" />\\n<Skill name=\\"React\\" value={75} type=\\"bar\\" color=\\"#61DAFB\\" />\\n<Skill name=\\"Vue.js\\" value={60} type=\\"bar\\" color=\\"#4FC08D\\" />\\n<Skill name=\\"Angular\\" value={45} type=\\"bar\\" color=\\"#DD0031\\" />\\n<Skill name=\\"Svelte\\" value={30} type=\\"bar\\" color=\\"#FF3E00\\" />\\n```\\n\\n<Skill name=\\"JavaScript\\" value={85} type=\\"bar\\" color=\\"#F7DF1E\\" />\\n<Skill name=\\"React\\" value={75} type=\\"bar\\" color=\\"#61DAFB\\" />\\n<Skill name=\\"Vue.js\\" value={60} type=\\"bar\\" color=\\"#4FC08D\\" />\\n<Skill name=\\"Angular\\" value={45} type=\\"bar\\" color=\\"#DD0031\\" />\\n<Skill name=\\"Svelte\\" value={30} type=\\"bar\\" color=\\"#FF3E00\\" />\\n\\n### Bars with gradients\\n```html   \\n<Skill name=\\"CSS3\\" value={90} type=\\"bar\\" gradient={{ from: \'#1572B6\', to: \'#33A9DC\' }} />\\n<Skill name=\\"HTML5\\" value={95} type=\\"bar\\" gradient={{ from: \'#e3d626ff\', to: \'#1ad843ff\' }} />\\n<Skill name=\\"Sass\\" value={80} type=\\"bar\\" gradient={{ from: \'#CC6699\', to: \'#910b52ff\' }} />\\n<Skill name=\\"Tailwind\\" value={70} type=\\"bar\\" gradient={{ from: \'#065fd4ff\', to: \'#0891B2\' }} />\\n```\\n<Skill name=\\"CSS3\\" value={90} type=\\"bar\\" gradient={{ from: \'#1572B6\', to: \'#33A9DC\' }} />\\n<Skill name=\\"HTML5\\" value={95} type=\\"bar\\" gradient={{ from: \'#e3d626ff\', to: \'#1ad843ff\' }} />\\n<Skill name=\\"Sass\\" value={80} type=\\"bar\\" gradient={{ from: \'#CC6699\', to: \'#910b52ff\' }} />\\n<Skill name=\\"Tailwind\\" value={70} type=\\"bar\\" gradient={{ from: \'#065fd4ff\', to: \'#0891B2\' }} />\\n\\n\\n### Bars with different heights\\n```html\\n<Skill name=\\"Thin\\" value={60} type=\\"bar\\" height={10} color=\\"#FF6B6B\\" />\\n<Skill name=\\"Normal\\" value={70} type=\\"bar\\" height={20} color=\\"#4ECDC4\\" />\\n<Skill name=\\"Thick\\" value={80} type=\\"bar\\" height={30} color=\\"#45B7D1\\" />\\n<Skill name=\\"Very thick\\" value={90} type=\\"bar\\" height={40} color=\\"#F9CA24\\" />\\n```\\n<Skill name=\\"Thin\\" value={60} type=\\"bar\\" height={10} color=\\"#FF6B6B\\" />\\n<Skill name=\\"Normal\\" value={70} type=\\"bar\\" height={20} color=\\"#4ECDC4\\" />\\n<Skill name=\\"Thick\\" value={80} type=\\"bar\\" height={30} color=\\"#45B7D1\\" />\\n<Skill name=\\"Very thick\\" value={90} type=\\"bar\\" height={40} color=\\"#F9CA24\\" />\\n\\n### Bars with and without rounded borders\\n\\n```html\\n<Skill name=\\"Rounded\\" value={75} type=\\"bar\\" rounded={true} color=\\"#6C5CE7\\" />\\n<Skill name=\\"Square\\" value={75} type=\\"bar\\" rounded={false} color=\\"#A29BFE\\" />\\n```\\n<Skill name=\\"Rounded\\" value={75} type=\\"bar\\" rounded={true} color=\\"#6C5CE7\\" />\\n<Skill name=\\"Square\\" value={75} type=\\"bar\\" rounded={false} color=\\"#A29BFE\\" />\\n\\n### Bars with different text positions\\n\\n```html\\n<Skill name=\\"Text at top\\" value={65} type=\\"bar\\" valuePosition=\\"top\\" color=\\"#00B894\\" />\\n<Skill name=\\"Centered text\\" value={75} type=\\"bar\\" valuePosition=\\"center\\" color=\\"#00CEC9\\" />\\n```\\n<Skill name=\\"Text at top\\" value={65} type=\\"bar\\" valuePosition=\\"top\\" color=\\"#00B894\\" />\\n<Skill name=\\"Centered text\\" value={75} type=\\"bar\\" valuePosition=\\"center\\" color=\\"#00CEC9\\" />\\n\\n### Bars with animation speeds\\n\\n```html\\n<Skill name=\\"Fast animation\\" value={60} type=\\"bar\\" animationDuration={0.5} color=\\"#E17055\\" />\\n<Skill name=\\"Normal animation\\" value={70} type=\\"bar\\" animationDuration={1.5} color=\\"#FDCB6E\\" />\\n<Skill name=\\"Slow animation\\" value={80} type=\\"bar\\" animationDuration={3.0} color=\\"#6C5CE7\\" />\\n```\\n<Skill name=\\"Fast animation\\" value={60} type=\\"bar\\" animationDuration={0.5} color=\\"#E17055\\" />\\n<Skill name=\\"Normal animation\\" value={70} type=\\"bar\\" animationDuration={1.5} color=\\"#FDCB6E\\" />\\n<Skill name=\\"Slow animation\\" value={80} type=\\"bar\\" animationDuration={3.0} color=\\"#6C5CE7\\" />\\n\\n\\n### Complete technology palette in bars\\n\\n```html\\n<div style={{display: \'grid\', gridTemplateColumns: \'1fr\', gap: \'10px\', marginTop: \'20px\'}}>\\n  <Skill name={<><LogoIcon name=\\"html-5\\" size=\'24\' /> HTML5</>} value={95} type=\\"bar\\" color=\\"#E34F26\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"css-3\\" size=\'24\' /> CSS3</>} value={90} type=\\"bar\\" color=\\"#1572B6\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"javascript\\" size=\'24\' /> JavaScript</>} value={85} type=\\"bar\\" color=\\"#F7DF1E\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"typescript-icon-round\\" size=\'24\' /> TypeScript</>} value={80} type=\\"bar\\" color=\\"#3178C6\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"react\\" size=\'24\' /> React</>} value={88} type=\\"bar\\" color=\\"#61DAFB\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"vue\\" size=\'24\' /> Vue.js</>} value={75} type=\\"bar\\" color=\\"#4FC08D\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"nodejs\\" size=\'24\' /> Node.js</>} value={82} type=\\"bar\\" color=\\"#339933\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"python\\" size=\'24\' /> Python</>} value={78} type=\\"bar\\" color=\\"#3776AB\\" height={25} />\\n</div>\\n```\\n\\n<div style={{display: \'grid\', gridTemplateColumns: \'1fr\', gap: \'10px\', marginTop: \'20px\'}}>\\n  <Skill name={<><LogoIcon name=\\"html-5\\" size=\'24\' /> HTML5</>} value={95} type=\\"bar\\" color=\\"#E34F26\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"css-3\\" size=\'24\' /> CSS3</>} value={90} type=\\"bar\\" color=\\"#1572B6\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"javascript\\" size=\'24\' /> JavaScript</>} value={85} type=\\"bar\\" color=\\"#F7DF1E\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"typescript-icon-round\\" size=\'24\' /> TypeScript</>} value={80} type=\\"bar\\" color=\\"#3178C6\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"react\\" size=\'24\' /> React</>} value={88} type=\\"bar\\" color=\\"#61DAFB\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"vue\\" size=\'24\' /> Vue.js</>} value={75} type=\\"bar\\" color=\\"#4FC08D\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"nodejs\\" size=\'24\' /> Node.js</>} value={82} type=\\"bar\\" color=\\"#339933\\" height={25} />\\n  <Skill name={<><LogoIcon name=\\"python\\" size=\'24\' /> Python</>} value={78} type=\\"bar\\" color=\\"#3776AB\\" height={25} />\\n</div>\\n\\n\\n### Bars at 0\\n\\n```html\\n<Skill name=\\"No animation\\" value={0} type=\\"bar\\"  color=\\"#2D3436\\" />\\n```\\n\\n<Skill name=\\"No animation\\" value={0} type=\\"bar\\"  color=\\"#2D3436\\" />\\n\\n\\n## Circles\\n### Circles with automatic colors\\n\\n```html\\n<Skill name=\\"Expert\\" value={95} type=\\"circle\\" valuePosition=\\"center\\" />\\n<Skill name=\\"Advanced\\" value={75} type=\\"circle\\" valuePosition=\\"center\\" />\\n<Skill name=\\"Intermediate\\" value={50} type=\\"circle\\" valuePosition=\\"center\\" />\\n<Skill name=\\"Beginner\\" value={25} type=\\"circle\\" valuePosition=\\"center\\" />\\n```\\n<Skill name=\\"Expert\\" value={95} type=\\"circle\\" valuePosition=\\"center\\" />\\n<Skill name=\\"Advanced\\" value={75} type=\\"circle\\" valuePosition=\\"center\\" />\\n<Skill name=\\"Intermediate\\" value={50} type=\\"circle\\" valuePosition=\\"center\\" />\\n<Skill name=\\"Beginner\\" value={25} type=\\"circle\\" valuePosition=\\"center\\" />\\n\\n\\n\\n### Circles with custom colors\\n```html\\n<Skill name=\\"Node.js\\" value={80} type=\\"circle\\" valuePosition=\\"center\\" color=\\"#fffb00ff\\" />\\n<Skill name=\\"Python\\" value={70} type=\\"circle\\" valuePosition=\\"center\\" color=\\"#3776AB\\" />\\n<Skill name=\\"Java\\" value={60} type=\\"circle\\" valuePosition=\\"center\\" color=\\"#fc0478ff\\" />\\n<Skill name=\\"C#\\" value={50} type=\\"circle\\" valuePosition=\\"center\\" color=\\"#d43c3cff\\" />\\n```\\n\\n<Skill name=\\"Node.js\\" value={80} type=\\"circle\\" valuePosition=\\"center\\" color=\\"#fffb00ff\\" />\\n<Skill name=\\"Python\\" value={70} type=\\"circle\\" valuePosition=\\"center\\" color=\\"#3776AB\\" />\\n<Skill name=\\"Java\\" value={60} type=\\"circle\\" valuePosition=\\"center\\" color=\\"#fc0478ff\\" />\\n<Skill name=\\"C#\\" value={50} type=\\"circle\\" valuePosition=\\"center\\" color=\\"#d43c3cff\\" />\\n\\n\\n### Circles with gradients\\n```html\\n<Skill name=\\"Docker\\" value={75} type=\\"circle\\" gradient={{ from: \'#0cb628ff\', to: \'#b7ed24ff\' }} valuePosition=\\"center\\" />\\n<Skill name=\\"Kubernetes\\" value={65} type=\\"circle\\" gradient={{ from: \'#1c4cb4ff\', to: \'#1A73E8\' }} valuePosition=\\"center\\" />\\n<Skill name=\\"AWS\\" value={70} type=\\"circle\\" gradient={{ from: \'#FF9900\', to: \'#f80929ff\' }} valuePosition=\\"center\\" />\\n```\\n\\n<Skill name=\\"Docker\\" value={75} type=\\"circle\\" gradient={{ from: \'#0cb628ff\', to: \'#b7ed24ff\' }} valuePosition=\\"center\\" />\\n<Skill name=\\"Kubernetes\\" value={65} type=\\"circle\\" gradient={{ from: \'#1c4cb4ff\', to: \'#1A73E8\' }} valuePosition=\\"center\\" />\\n<Skill name=\\"AWS\\" value={70} type=\\"circle\\" gradient={{ from: \'#FF9900\', to: \'#f80929ff\' }} valuePosition=\\"center\\" />\\n\\n\\n### Circles with different sizes\\n\\n```html\\n<Skill name=\\"Small\\" value={60} type=\\"circle\\" size={80} valuePosition=\\"center\\" color=\\"#FF6B6B\\" />\\n<Skill name=\\"Medium\\" value={70} type=\\"circle\\" size={120} valuePosition=\\"center\\" color=\\"#4ECDC4\\" />\\n<Skill name=\\"Large\\" value={80} type=\\"circle\\" size={160} valuePosition=\\"center\\" color=\\"#45B7D1\\" />\\n```\\n\\n<Skill name=\\"Small\\" value={60} type=\\"circle\\" size={80} valuePosition=\\"center\\" color=\\"#FF6B6B\\" />\\n<Skill name=\\"Medium\\" value={70} type=\\"circle\\" size={120} valuePosition=\\"center\\" color=\\"#4ECDC4\\" />\\n<Skill name=\\"Large\\" value={80} type=\\"circle\\" size={160} valuePosition=\\"center\\" color=\\"#45B7D1\\" />\\n\\n\\n\\n### Circles with different thicknesses\\n\\n```html\\n<Skill name=\\"Thin\\" value={65} type=\\"circle\\" thickness={4} valuePosition=\\"center\\" color=\\"#A29BFE\\" />\\n<Skill name=\\"Normal\\" value={75} type=\\"circle\\" thickness={8} valuePosition=\\"center\\" color=\\"#6C5CE7\\" />\\n<Skill name=\\"Thick\\" value={85} type=\\"circle\\" thickness={16} valuePosition=\\"center\\" color=\\"#5F3DC4\\" />\\n```\\n\\n<Skill name=\\"Thin\\" value={65} type=\\"circle\\" thickness={4} valuePosition=\\"center\\" color=\\"#A29BFE\\" />\\n<Skill name=\\"Normal\\" value={75} type=\\"circle\\" thickness={8} valuePosition=\\"center\\" color=\\"#6C5CE7\\" />\\n<Skill name=\\"Thick\\" value={85} type=\\"circle\\" thickness={16} valuePosition=\\"center\\" color=\\"#5F3DC4\\" />\\n\\n\\n### Circles with text positions\\n\\n```html\\n<Skill name=\\"Text at top\\" value={70} type=\\"circle\\" valuePosition=\\"top\\" color=\\"#00B894\\" />\\n<Skill name=\\"Centered text\\" value={80} type=\\"circle\\" valuePosition=\\"center\\" color=\\"#00CEC9\\" />\\n<Skill name=\\"Text around\\" value={90} type=\\"circle\\" valuePosition=\\"around\\" color=\\"#55A3FF\\" className=\\"margin-bottom--xl\\" />\\n```\\n<Skill name=\\"Text at top\\" value={70} type=\\"circle\\" valuePosition=\\"top\\" color=\\"#00B894\\" />\\n<Skill name=\\"Centered text\\" value={80} type=\\"circle\\" valuePosition=\\"center\\" color=\\"#00CEC9\\" />\\n<Skill name=\\"Text around\\" value={90} type=\\"circle\\" valuePosition=\\"around\\" color=\\"#55A3FF\\" className=\\"margin-bottom--xl\\" />\\n\\n\\n### Circles with and without rounded borders\\n\\n```html\\n<Skill name=\\"Rounded\\" value={75} type=\\"circle\\" rounded={true} valuePosition=\\"center\\" color=\\"#E17055\\" />\\n<Skill name=\\"Square\\" value={75} type=\\"circle\\" rounded={false} valuePosition=\\"center\\" color=\\"#FDCB6E\\" />\\n```\\n\\n<Skill name=\\"Rounded\\" value={75} type=\\"circle\\" rounded={true} valuePosition=\\"center\\" color=\\"#E17055\\" />\\n<Skill name=\\"Square\\" value={75} type=\\"circle\\" rounded={false} valuePosition=\\"center\\" color=\\"#FDCB6E\\" />\\n\\n\\n### Circles with and without percentage\\n```html\\n<Skill name=\\"With %\\" value={80} type=\\"circle\\" showPercentage={true} valuePosition=\\"center\\" color=\\"#00B894\\" />\\n<Skill name=\\"Without %\\" value={80} type=\\"circle\\" showPercentage={false} valuePosition=\\"center\\" color=\\"#E17055\\" />\\n```\\n\\n<Skill name=\\"With %\\" value={80} type=\\"circle\\" showPercentage={true} valuePosition=\\"center\\" color=\\"#00B894\\" />\\n<Skill name=\\"Without %\\" value={80} type=\\"circle\\" showPercentage={false} valuePosition=\\"center\\" color=\\"#E17055\\" />\\n\\n\\n### Circles with animation speeds\\n```html\\n<Skill name=\\"Fast\\" value={60} type=\\"circle\\" animationDuration={0.8} valuePosition=\\"center\\" color=\\"#FF6B6B\\" />\\n<Skill name=\\"Normal\\" value={70} type=\\"circle\\" animationDuration={1.5} valuePosition=\\"center\\" color=\\"#4ECDC4\\" />\\n<Skill name=\\"Slow\\" value={80} type=\\"circle\\" animationDuration={2.5} valuePosition=\\"center\\" color=\\"#45B7D1\\" />\\n```\\n\\n<Skill name=\\"Fast\\" value={60} type=\\"circle\\" animationDuration={0.8} valuePosition=\\"center\\" color=\\"#FF6B6B\\" />\\n<Skill name=\\"Normal\\" value={70} type=\\"circle\\" animationDuration={1.5} valuePosition=\\"center\\" color=\\"#4ECDC4\\" />\\n<Skill name=\\"Slow\\" value={80} type=\\"circle\\" animationDuration={2.5} valuePosition=\\"center\\" color=\\"#45B7D1\\" />\\n\\n\\n### Circles without animation at zero\\n\\n```html\\n<Skill name=\\"Static\\" value={0} type=\\"circle\\" animateOnScroll={false} valuePosition=\\"center\\" color=\\"#2D3436\\" />\\n```\\n\\n<Skill name=\\"Static\\" value={0} type=\\"circle\\" animateOnScroll={false} valuePosition=\\"center\\" color=\\"#2D3436\\" />\\n\\n\\n### Advanced combined examples\\n\\n```html\\n<Skill \\n  name=\\"Full Stack Developer\\" \\n  value={88} \\n  type=\\"circle\\" \\n  size={180}\\n  thickness={15}\\n  gradient={{ from: \'#667eea\', to: \'#764ba2\' }}\\n  valuePosition=\\"center\\" \\n  animationDuration={2.5}\\n  rounded={true}\\n/>\\n\\n<Skill \\n  name=\\"DevOps Master\\" \\n  value={92} \\n  type=\\"bar\\" \\n  height={35}\\n  gradient={{ from: \'#f093fb\', to: \'#f5576c\' }}\\n  valuePosition=\\"center\\" \\n  animationDuration={2.0}\\n  rounded={true}\\n/>\\n```\\n\\n<Skill \\n  name=\\"Full Stack Developer\\" \\n  value={88} \\n  type=\\"circle\\" \\n  size={180}\\n  thickness={15}\\n  gradient={{ from: \'#667eea\', to: \'#764ba2\' }}\\n  valuePosition=\\"center\\" \\n  animationDuration={2.5}\\n  rounded={true}\\n/>\\n\\n<Skill \\n  name=\\"DevOps Master\\" \\n  value={92} \\n  type=\\"bar\\" \\n  height={35}\\n  gradient={{ from: \'#f093fb\', to: \'#f5576c\' }}\\n  valuePosition=\\"center\\" \\n  animationDuration={2.0}\\n  rounded={true}\\n/>\\n\\n### Complete technology palette\\n\\n\\n```html\\n<div style={{display: \'grid\', gridTemplateColumns: \'repeat(auto-fit, minmax(150px, 1fr))\', gap: \'20px\', marginTop: \'20px\'}}>\\n  <Skill name={<><LogoIcon name=\\"html-5\\" size=\'24\' /> </>} value={95} type=\\"circle\\" color=\\"#E34F26\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"css-3\\" size=\'24\' /> </>} value={90} type=\\"circle\\" color=\\"#1572B6\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>} value={85} type=\\"circle\\" color=\\"#F7DF1E\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"typescript-icon-round\\" size=\'24\' /> </>} value={80} type=\\"circle\\" color=\\"#3178C6\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"react\\" size=\'24\' /> </>} value={88} type=\\"circle\\" color=\\"#61DAFB\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"vue\\" size=\'24\' /> </>} value={75} type=\\"circle\\" color=\\"#4FC08D\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"nodejs\\" size=\'24\' /> </>} value={82} type=\\"circle\\" color=\\"#339933\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"python\\" size=\'24\' /> </>} value={78} type=\\"circle\\" color=\\"#3776AB\\" valuePosition=\\"center\\" size={100} />\\n</div>\\n```\\n<div style={{display: \'grid\', gridTemplateColumns: \'repeat(auto-fit, minmax(150px, 1fr))\', gap: \'20px\', marginTop: \'20px\'}}>\\n  <Skill name={<><LogoIcon name=\\"html-5\\" size=\'24\' /> </>} value={95} type=\\"circle\\" color=\\"#E34F26\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"css-3\\" size=\'24\' /> </>} value={90} type=\\"circle\\" color=\\"#1572B6\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>} value={85} type=\\"circle\\" color=\\"#F7DF1E\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"typescript-icon-round\\" size=\'24\' /> </>} value={80} type=\\"circle\\" color=\\"#3178C6\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"react\\" size=\'24\' /> </>} value={88} type=\\"circle\\" color=\\"#61DAFB\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"vue\\" size=\'24\' /> </>} value={75} type=\\"circle\\" color=\\"#4FC08D\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"nodejs\\" size=\'24\' /> </>} value={82} type=\\"circle\\" color=\\"#339933\\" valuePosition=\\"center\\" size={100} />\\n  <Skill name={<><LogoIcon name=\\"python\\" size=\'24\' /> </>} value={78} type=\\"circle\\" color=\\"#3776AB\\" valuePosition=\\"center\\" size={100} />\\n</div>\\n\\n### Comparison bars vs circles\\n\\n**Same skill, two representations, make your choice**\\n\\n<Skill name=\\"Database Design\\" value={75} type=\\"bar\\" gradient={{ from: \'#667eea\', to: \'#764ba2\' }} />\\n<Skill name=\\"Database Design\\" value={75} type=\\"circle\\" gradient={{ from: \'#667eea\', to: \'#764ba2\' }} valuePosition=\\"center\\" />\\n\\n### Use with cards component\\n\\n:::warning\\n\\nThis part requires my [LogoIcon](/blog/logoicon-component-docusaurus/) & [Columns](#) & [Card](/blog/card-component-docusaurus-infima/) components to display technology logos.\\n\\n:::\\n\\n```html\\n<Columns>\\n    <Column>\\n        <Card>\\n            <CardBody>\\n                <center>\\n                    <Skill\\n                        name={<><LogoIcon name=\\"javascript\\" size=\'64\' /> </>}\\n                        value={85}\\n                        type=\\"circle\\"\\n                        color=\\"#F7DF1E\\"\\n                        valuePosition=\\"center\\"\\n                        size={200}/>\\n                </center>\\n            </CardBody>\\n        </Card>\\n    </Column>\\n    <Column>\\n        <Card>\\n            <CardBody>\\n                <Skill\\n                    name={<><LogoIcon name=\\"html-5\\" size=\'24\' /> HTML5</>}\\n                    value={95}\\n                    type=\\"bar\\"\\n                    color=\\"#E34F26\\"\\n                    height={25}/>\\n                <Skill\\n                    name={<><LogoIcon name=\\"css-3\\" size=\'24\' /> CSS3</>}\\n                    value={90}\\n                    type=\\"bar\\"\\n                    color=\\"#1572B6\\"\\n                    height={25}/>\\n                \\n            </CardBody>\\n        </Card>\\n    </Column>\\n</Columns>\\n```\\n<Columns>\\n    <Column>\\n        <Card>\\n            <CardBody>\\n                <center>\\n                    <Skill\\n                        name={<><LogoIcon name=\\"javascript\\" size=\'64\' /> </>}\\n                        value={85}\\n                        type=\\"circle\\"\\n                        color=\\"#F7DF1E\\"\\n                        valuePosition=\\"center\\"\\n                        size={200}/>\\n                </center>\\n            </CardBody>\\n        </Card>\\n    </Column>\\n    <Column>\\n        <Card>\\n            <CardBody>\\n                <Skill\\n                    name={<><LogoIcon name=\\"html-5\\" size=\'24\' /> HTML5</>}\\n                    value={95}\\n                    type=\\"bar\\"\\n                    color=\\"#E34F26\\"\\n                    height={25}/>\\n                <Skill\\n                    name={<><LogoIcon name=\\"css-3\\" size=\'24\' /> CSS3</>}\\n                    value={90}\\n                    type=\\"bar\\"\\n                    color=\\"#1572B6\\"\\n                    height={25}/>\\n                \\n            </CardBody>\\n        </Card>\\n    </Column>\\n</Columns>"},{"id":"logoicon-component-docusaurus","metadata":{"permalink":"/blog/logoicon-component-docusaurus","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/09/15/iconifycomponent/index.mdx","source":"@site/blog/2025/09/15/iconifycomponent/index.mdx","title":"Component LogoIcon","description":"A React component tutorial to easily display Iconify logos in Docusaurus MDX pages without individual imports.","date":"2025-09-15T00:00:00.000Z","tags":[{"inline":true,"label":"iconify","permalink":"/blog/tags/iconify"},{"inline":true,"label":"design","permalink":"/blog/tags/design"},{"inline":true,"label":"logos","permalink":"/blog/tags/logos"},{"inline":true,"label":"icons","permalink":"/blog/tags/icons"}],"readingTime":3.31,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Component LogoIcon","description":"A React component tutorial to easily display Iconify logos in Docusaurus MDX pages without individual imports.","schemaTypes":["HowTo","BlogPosting"],"slug":"logoicon-component-docusaurus","image":"/img/iconifycomponent.webp","authors":["docux"],"mainTag":"Design","tags":["iconify","design","logos","icons"],"date":"2025-09-15T00:00:00.000Z","last_update":{"date":"2025-09-15T00:00:00.000Z","author":"docux"},"difficulty":"Beginner","totalTime":"PT15M","prepTime":"PT5M","performTime":"PT10M","estimatedCost":"Free","tool":["React","Docusaurus","JavaScript","TypeScript","VSCode"],"supply":["Node.js","Docusaurus","Iconify","React Component"],"yield":"Reusable LogoIcon component for displaying logos in MDX","genre":"Technical Tutorial","inLanguage":"en","isAccessibleForFree":true,"readingTime":"5 min","articleSection":"Tutorial","copyrightYear":2025,"copyrightHolder":"Docux","category":"Web Development","keywords":["iconify","react","component","mdx","logos","icons","iconify"],"hide_table_of_contents":false,"series":"Design your site","blueSkyRecordKey":"3lyu7ntrct22o"},"unlisted":false,"prevItem":{"title":"Component Skill Bars & Circles","permalink":"/blog/skill-component-animated-progress-docusaurus"},"nextItem":{"title":"Plugin Simple Analytics","permalink":"/blog/simple-analytics-plugin-docusaurus"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Developement](https://img.shields.io/badge/Developement-validated-green.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 30%](https://img.shields.io/badge/AI-30%-blue.svg)](https://github.com/Juniors017)\\n\\n![](/img/iconifycomponent.webp)\\n</div>\\n</center>\\n\\n\\nThis component allows you to easily display **[Iconify](https://icon-sets.iconify.design/) icons** in **MDX** pages of Docusaurus.  \\nIt is particularly useful for displaying **logos** (GitHub, Airbnb, Google, etc.) without having to import each icon individually.\\n\x3c!--truncate--\x3e \\n\\n\\n## Installation\\n\\nIn your Docusaurus project, install the Iconify React library:\\n\\n<Tabs>\\n<TabItem value=\\"npm\\" label={<><LogoIcon name=\\"npm\\" size=\'32\' /> </>}>\\n\\n<Terminal title=\\"user@machine: ~/yourproject\\">\\n\\nnpm install @iconify/react\\n\\n</Terminal>\\n\\n</TabItem>\\n\\n<TabItem value=\\"yarn\\" label={<><LogoIcon name=\\"yarn\\" size=\'32\' /> </>}>\\n\\n<Terminal title=\\"user@machine: ~/yourproject\\">\\n\\nyarn add @iconify/react\\n\\n</Terminal>\\n\\n</TabItem>\\n</Tabs>\\n\\n\\n\\n##  File structure\\n\\n```\\nsrc/\\n \u251C\u2500 components/\\n \u2502   \u2514\u2500 LogoIcon.js       # React component that wraps Iconify\\n \u2514\u2500 theme/\\n     \u2514\u2500 MDXComponents.js  # Allows using <LogoIcon /> everywhere in MDX\\n```\\n\\n\\n## Component code for Logos category\\n\\n<Tabs>\\n<TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>}>\\n\\n```jsx title=\'src\\\\components\\\\LogoIcon.js\'\\nimport React from \\"react\\";\\nimport { Icon } from \\"@iconify/react\\";\\n\\nexport default function LogoIcon({ name, size = 48 }) {\\n  return <Icon icon={`logos:${name}`} width={size} height={size} />;\\n}\\n```\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size=\'24\' /> </>}>\\n\\n```ts title=\'src\\\\components\\\\LogoIcon.tsx\'\\nimport React from \\"react\\";\\nimport { Icon } from \\"@iconify/react\\";\\n\\ninterface LogoIconProps {\\n  name: string;\\n  size?: number;\\n}\\n\\nexport default function LogoIcon({ name, size = 48 }: LogoIconProps): JSX.Element {\\n  return <Icon icon={`logos:${name}`} width={size} height={size} />;\\n}\\n```\\n</TabItem>\\n</Tabs>\\n\\n##  Global declaration in MDX\\n\\n<Tabs>\\n<TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>}>\\n```jsx title=\'src\\\\theme\\\\MDXComponents.js\'\\n\\nimport React from \'react\';\\nimport MDXComponents from \'@theme-original/MDXComponents\';\\nimport LogoIcon from \'@site/src/components/LogoIcon\';\\n\\nexport default {\\n  ...MDXComponents,\\n  LogoIcon, // \u{1F448} makes <LogoIcon /> available everywhere\\n};\\n\\n\\n```\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size=\'24\' /> </>}>\\n\\n```ts title=\'src\\\\theme\\\\MDXComponents.tsx\'\\n\\nimport React from \'react\';\\nimport MDXComponents from \'@theme-original/MDXComponents\';\\nimport LogoIcon from \'@site/src/components/LogoIcon\';\\nimport type { MDXComponents as MDXComponentsType } from \'@mdx-js/react\';\\n\\nconst CustomMDXComponents: MDXComponentsType = {\\n  ...MDXComponents,\\n  LogoIcon,\\n};\\n\\nexport default CustomMDXComponents;\\n```\\n</TabItem>\\n</Tabs>\\n\\n\\n##  How to use it\\n\\n* The `name` corresponds to the icon name in the **Logos** set of Iconify.\\n  > Example: [logos:airbnb-icon](https://icon-sets.iconify.design/logos/airbnb-icon/) \u2192 `name=\\"airbnb-icon\\"`\\n\\n* The `size` (optional) defines the logo size in pixels.\\n  Default value: `48`.\\n\\n* You can easily customize the component (add a `color` prop, change the icon set, apply CSS classes, etc.).\\n\\nOnce configured, you can directly use the component without import:\\n\\n\\n## Usage example in MDX files\\n<Tabs>\\n<TabItem value=\\"js\\" label={<><LogoIcon name=\\"mdx\\" size=\'48\' /> </>}>\\n```mdx\\n<LogoIcon name=\\"docusaurus\\" size=\'256\' />\\n\\n<LogoIcon name=\\"react\\" size=\'124\' /> \\n\\n<LogoIcon name=\\"airbnb-icon\\" size=\'64\' />\\n\\n<LogoIcon name=\\"github-icon\\" />\\n\\n<LogoIcon name=\\"gitlab\\" size=\'32\' />\\n```\\n<LogoIcon name=\\"docusaurus\\" size=\'256\' />\\n\\n<LogoIcon name=\\"react\\" size=\'124\' /> \\n\\n<LogoIcon name=\\"airbnb-icon\\" size=\'64\' />\\n\\n<LogoIcon name=\\"github-icon\\" />\\n\\n<LogoIcon name=\\"gitlab\\" size=\'32\' />\\n</TabItem>\\n</Tabs>\\n\\n\\n\\n## Component code for all Logos category\\n\\n\\nI created this component to easily use [logos](https://icon-sets.iconify.design/logos/?category=Logos)\\nNaturally, you can create a similar component for other icon sets (Material Design, FontAwesome, etc.) by adapting the logic.\\nOr even have a global logic.\\n\\n### Global component for all Iconify categories\\n\\n<Tabs>\\n<TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>}>\\n\\n```jsx title=\'src\\\\components\\\\LogoIcon.js\'\\nimport React from \\"react\\";\\nimport { Icon } from \\"@iconify/react\\";\\n\\nexport default function LogoIcon({ name, size = 48 }) {\\n  return <Icon icon={`${name}`} width={size} height={size} />;\\n}\\n```\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size=\'24\' /> </>}>\\n\\n```ts title=\'src\\\\components\\\\LogoIcon.tsx\'\\nimport React from \\"react\\";\\nimport { Icon } from \\"@iconify/react\\";\\n\\ninterface LogoIconProps {\\n  name: string;\\n  size?: number;\\n}\\n\\nexport default function LogoIcon({ name, size = 48 }: LogoIconProps): JSX.Element {\\n  return <Icon icon={`${name}`} width={size} height={size} />;\\n}\\n```\\n</TabItem>\\n</Tabs>\\n\\n## Advantages of my component\\n\\n* No need to import each logo in every MDX file.\\n* Simple and readable syntax.\\n* Easy to customize globally (size, style, default color).\\n* Built on Iconify \u2192 access to **200k+ open source\\n\\n> look : https://icon-sets.iconify.design/"},{"id":"simple-analytics-plugin-docusaurus","metadata":{"permalink":"/blog/simple-analytics-plugin-docusaurus","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/09/14/simpleanalytics/index.mdx","source":"@site/blog/2025/09/14/simpleanalytics/index.mdx","title":"Plugin Simple Analytics","description":"A complete tutorial to integrate Simple Analytics into your Docusaurus site with a custom local plugin.","date":"2025-09-14T00:00:00.000Z","tags":[{"inline":true,"label":"simple-analytics","permalink":"/blog/tags/simple-analytics"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"navigation","permalink":"/blog/tags/navigation"},{"inline":true,"label":"analytics","permalink":"/blog/tags/analytics"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":4.51,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Plugin Simple Analytics","description":"A complete tutorial to integrate Simple Analytics into your Docusaurus site with a custom local plugin.","schemaTypes":["HowTo","BlogPosting"],"slug":"simple-analytics-plugin-docusaurus","image":"/img/simpleanalyticsplugin.webp","authors":["docux"],"mainTag":"analytics","tags":["simple-analytics","plugin","navigation","analytics","tutorial"],"date":"2025-09-14T00:00:00.000Z","last_update":{"date":"2025-09-14T00:00:00.000Z","author":"docux"},"difficulty":"Intermediate","totalTime":"PT30M","prepTime":"PT10M","performTime":"PT20M","estimatedCost":"Free","tool":["React","Docusaurus","JavaScript","Node.js","VSCode"],"supply":["Node.js","Docusaurus","Simple Analytics","Local Plugin"],"yield":"Functional Simple Analytics plugin for SPA tracking","genre":"Technical Tutorial","inLanguage":"en","isAccessibleForFree":true,"readingTime":"10 min","articleSection":"Tutorial","copyrightYear":2025,"copyrightHolder":"Docux","category":"Web Development","keywords":["simple analytics","plugin","docusaurus","spa","navigation","analytics"],"hide_table_of_contents":false,"series":"SEO & Analytics","blueSkyRecordKey":null},"unlisted":false,"prevItem":{"title":"Component LogoIcon","permalink":"/blog/logoicon-component-docusaurus"},"nextItem":{"title":"Component Card","permalink":"/blog/card-component-docusaurus-infima"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Developement](https://img.shields.io/badge/Developement-validated-green.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 80%](https://img.shields.io/badge/AI-80%-blue.svg)](https://github.com/Juniors017)\\n\\n![](/img/simpleanalyticsplugin.webp)\\n</div>\\n</center>\\n\\nWant to integrate [Simple Analytics](https://www.simpleanalytics.com/?utm_source=docuxlab.com&utm_content=badge&affiliate=babep) into your Docusaurus site and effectively track user navigation in a Single Page Application (SPA) context?\\n\\nThis guide explains how to create a local plugin for Docusaurus that handles the injection of the tracking script and tracks page changes.\\n\\nIt manages the injection of the main script as well as tracking page changes in the context of a Single Page Application (SPA), which is essential for Docusaurus.\\n\\nThis plugin is a local plugin. There\'s no need to install it via npm or yarn. Simply ensure that the `simpleAnalytics` folder is located in the `plugins` directory at the root of your project.\\n\\n\\n<center>\\n<a href=\\"https://www.simpleanalytics.com/?utm_source=docuxlab.com&utm_content=badge&affiliate=babep\\" referrerpolicy=\\"origin\\" target=\\"_blank\\"><picture><source srcset=\\"https://simpleanalyticsbadges.com/docuxlab.com?mode=dark\\" media=\\"(prefers-color-scheme: dark)\\" /><img src=\\"https://simpleanalyticsbadges.com/docuxlab.com?mode=light\\" loading=\\"lazy\\" referrerpolicy=\\"no-referrer\\" crossorigin=\\"anonymous\\" /></picture></a>\\n</center>\\n\x3c!--truncate--\x3e \\n## Plugin Structure\\n\\nThe plugin separates logic into two distinct files, as they run in different environments and at different times.\\n\\n### File Tree\\n\\n```\\nplugins/\\n\u2514\u2500\u2500 simpleAnalytics/\\n    \u251C\u2500\u2500 index.js      # Main Docusaurus plugin file\\n    \u2514\u2500\u2500 sa-client.js  # Client module for SPA navigation tracking\\n```\\n\\n## simpleAnalytics/index.js (Server Side / Build)\\n\\nThis file is the core of the plugin and runs in a Node.js environment during development server startup or site compilation.\\n\\n<Snippet filename=\\"plugins/simpleAnalytics/index.js\\" source=\\"plugins/simpleAnalytics/index.js\\" />\\n\\n\\n\\nIts role is to integrate into the Docusaurus build process:\\n\\n1.  **`injectHtmlTags()`**: This function injects the main Simple Analytics script and the `<noscript>` tag directly into the final HTML file. This is what allows tracking the **first visit** of a user to the site.\\n\\n2.  **`getClientModules()`**: This function tells Docusaurus that it should include another JavaScript file, `sa-client.js`, in the code that will be sent and executed by the user\'s browser.\\n\\nIn summary, `index.js` handles the initial and static configuration.\\n\\n## sa-client.js (Client Side / Browser)\\n\\nThis file executes **only in the user\'s browser**. Its existence is crucial because Docusaurus functions as a Single Page Application (SPA).\\n\\n<Snippet filename=\\"plugins/simpleAnalytics/sa-client.js\\" source=\\"plugins/simpleAnalytics/sa-client.js\\" />\\n\\n\\nIts role is to manage navigation tracking **after the initial page load**:\\n\\n1.  **Listening to route changes**: In an SPA, changing pages doesn\'t fully reload the HTML. This script therefore listens to Docusaurus internal navigation events.\\n\\n2.  **Triggering page views**: When a user navigates to a new page (for example, from `/home` to `/blog/my-article`), this script calls the Simple Analytics tracking function (e.g., `window.sa_pageview()`) to manually signal that a new \\"page view\\" has occurred.\\n\\n> Without `sa-client.js`, only the first site access would be counted, and all subsequent navigations within the site would be ignored by Simple Analytics.\\n\\n## Why two different tracking lines?\\n\\nIn the Simple Analytics plugin code, these two lines serve different but complementary purposes for tracking:\\n\\n### The main script\\n```\\nhttps://scripts.simpleanalyticscdn.com/latest.js\\n```\\nThis URL loads the main Simple Analytics JavaScript script which:\\n\\n- Collects navigation data (pages visited, time spent, etc.)\\n- Manages user events (clicks, scrolling, etc.)\\n- Sends data to the Simple Analytics server\\n- Only works if JavaScript is enabled in the browser\\n\\n### The fallback image\\n\\n```\\n<img src=\\"https://queue.simpleanalyticscdn.com/noscript.gif\\" alt=\\"\\" referrerpolicy=\\"no-referrer-when-downgrade\\" />\\n```\\nThis GIF image (1x1 pixel, invisible) serves as a fallback solution when:\\n\\n- JavaScript is disabled in the browser\\n- The main script cannot load (ad blocker, network issue)\\n- Very old browsers that don\'t support modern JavaScript\\n\\n### Why two different domains?\\n\\nSimple Analytics uses a distributed architecture:\\n\\n`https://scripts.simpleanalyticscdn.com/latest.js`: CDN optimized for serving JavaScript files\\n\\n`https://queue.simpleanalyticscdn.com/noscript.gif`: Specialized server for receiving tracking data\\n\\nThis separation allows:\\n\\n- Better performance (CDN optimized for each content type)\\n- Redundancy (if one server goes down, the other can continue)\\n- Blocker bypass (some block scripts but not images)\\n- The `<noscript>` tag ensures that at least a basic visit is recorded, even in the most restrictive environments.\\n\\n## Alternative: Why not modify the `Layout` component?\\n\\nAnother method for tracking navigation in a Single Page Application (SPA) like Docusaurus is to customize (swizzle) the `Layout` component and insert a React `useEffect` that listens to URL changes.\\n\\nHowever, this approach has drawbacks:\\n\\n*   **Tight coupling**: It mixes analytics tracking logic with your theme\'s presentation logic.\\n*   **Less robustness**: Any major modification to your theme or the `Layout` component could break tracking.\\n\\nThis plugin\'s approach, using `getClientModules`, is the method recommended by Docusaurus. It\'s cleaner and more robust because it completely decouples the tracking functionality from the theme and React components. Your tracking continues to work even if you radically change your site\'s appearance.\\n\\n## Configuration\\n\\nTo activate the plugin, add its path to the `plugins` array in your `docusaurus.config.js` file.\\n<Tabs> \\n<TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>}>\\n\\n```javascript title=\'docusaurus.config.js\'\\n\\nimport simpleAnalytics from \\"./plugins/simpleAnalytics/index.js\\"\\n// ...existing code...\\nconst config = {\\n  // ...\\n  plugins: [\\n    // ... other plugins\\n    [simpleAnalytics, {}],\\n  ],\\n  // ...\\n};\\n// ...existing code...\\n```\\n</TabItem>\\n</Tabs>\\n\\n:::info\\nYou can go further by adding different options such as a notrack option to avoid tracking certain pages.\\nAnd surely much more, however I wanted to keep it simple for this example.\\n:::\\n\\n## Useful Resources\\n\\n- [Official Simple Analytics Documentation](https://docs.simpleanalytics.com/)\\n- [Simple Analytics Dashboard](https://simpleanalytics.com/)\\n- [Docusaurus Plugin Documentation](https://docusaurus.io/docs/api/plugin-methods)"},{"id":"card-component-docusaurus-infima","metadata":{"permalink":"/blog/card-component-docusaurus-infima","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/09/07/card/index.mdx","source":"@site/blog/2025/09/07/card/index.mdx","title":"Component Card","description":"A complete tutorial to create customizable card components in Docusaurus using the Infima CSS framework. Includes React implementation, multiple card variants, and responsive design.","date":"2025-09-07T00:00:00.000Z","tags":[{"inline":true,"label":"card","permalink":"/blog/tags/card"},{"inline":true,"label":"infima","permalink":"/blog/tags/infima"},{"inline":true,"label":"component","permalink":"/blog/tags/component"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"front-end","permalink":"/blog/tags/front-end"},{"inline":true,"label":"css","permalink":"/blog/tags/css"},{"inline":true,"label":"design","permalink":"/blog/tags/design"}],"readingTime":23.68,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Component Card","description":"A complete tutorial to create customizable card components in Docusaurus using the Infima CSS framework. Includes React implementation, multiple card variants, and responsive design.","schemaTypes":["HowTo","BlogPosting"],"slug":"card-component-docusaurus-infima","image":"/img/card-component-docusaurus-infima.webp","authors":["docux"],"mainTag":"infima","tags":["card","infima","component","tutorial","front-end","css","design"],"date":"2025-09-07T00:00:00.000Z","last_update":{"date":"2025-09-07T00:00:00.000Z","author":"docux"},"difficulty":"Beginner","totalTime":"PT25M","prepTime":"PT5M","performTime":"PT20M","estimatedCost":"Free","tool":["React","Docusaurus","CSS","VSCode","Infima"],"supply":["Node.js","Docusaurus","React","Infima CSS"],"yield":"Customizable and reusable Card component system","genre":"Technical Tutorial","inLanguage":"en","isAccessibleForFree":true,"readingTime":"15 min","articleSection":"Tutorial","copyrightYear":2025,"copyrightHolder":"Docux","category":"Web Development","keywords":["docusaurus","react","card","infima","component","tutorial","front-end","css","ui","design"],"hide_table_of_contents":false,"series":"infima components","blueSkyRecordKey":"3lycislui2c2a"},"unlisted":false,"prevItem":{"title":"Plugin Simple Analytics","permalink":"/blog/simple-analytics-plugin-docusaurus"},"nextItem":{"title":"Component ImageOnClick","permalink":"/blog/imageonclick-component-docusaurus-lightbox"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Developement](https://img.shields.io/badge/Developement-validated-green.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 0%](https://img.shields.io/badge/AI-no-blue.svg)](https://github.com/Juniors017)\\n\\n![](/img/card-component-docusaurus-infima.webp)\\n</div>\\n</center>\\n\\n\\n\\n\\nWith [Infima CSS framework](https://infima.dev/), I\u2019ve created a reusable card component that you can use on your Docusaurus site. With it, you\u2019ll be able to customize each card with different colors and sizes. This component allows you to generate all the cards available in Infima as well as \u201CCustom\u201D cards, and you\u2019ll be able to create and personalize each card independently.\\n\\nThe component is in fact a set of small components that will admit to form the cards.\\n### Card : composition of the master folder\\n - Card component index.js (The container of alls parts)\\n - CardHeader component (Header parts of cards)\\n - CardBody component (Body parts of cards)\\n - CardImage component (Image cover parts of cards)\\n - CardFooter component (Footer parts of cards)\\n\\n\x3c!--truncate--\x3e \\n\\n We will discover that it pairs wonderfully with other components present in our library but this will be the subject of a dedicated page. \\n\\n## Creating the Card component \\n\\n\\n:::note Publication\\nThis article was originally published by DocuxLab on the [Docusaurus Community](https://community.docusaurus.io) and is republished here with new examples.\\n:::\\n\\nThink of this component as the container of all card parts\\n\\nFirst we will create the master folder in:  `\\\\src\\\\components\\\\Card\\\\`. Next we will start by creating a new component called Card. It will be the container component of our different parts to come. Also this will give the possibility to manage className and style for each part.\\n\\nThe component will accept the following props:\\n\\n- `shadow`: if you want to show a shadow under the map.\\n\\nCreating the file and adding the source code for the component.\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>}>\\n\\n```javascript title=\'\\\\src\\\\components\\\\Card\\\\index.js\'\\nimport React, {CSSProperties} from \'react\'; // CSSProperties allows inline styling with better type checking.\\nimport clsx from \'clsx\'; // clsx helps manage conditional className names in a clean and concise manner.\\n\\nconst Card = ({\\n    className, // classNamees for the container card\\n    style, // Custom styles for the container card\\n    children, // for include others parts in\\n    shadow, // for add shadow under your card Shadow levels: low (lw), medium (md), top-level (tl)\\n}) => {\\n    const cardShadow = shadow\\n        ? `item shadow--${shadow}`\\n        : \'\';\\n    return (\\n        <div className=\\"card-demo\\">\\n            <div className={clsx(\\"card\\", className, cardShadow)} style={style}>\\n                {children}\\n            </div>\\n        </div>\\n    );\\n};\\n\\nexport default Card;\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size=\'24\' /> </>}>\\n\\n```tsx title=\'\\\\src\\\\components\\\\Card\\\\index.tsx\'\\nimport React, {CSSProperties, ReactNode} from \'react\'; // Import types for props\\nimport clsx from \'clsx\'; // clsx helps manage conditional className names in a clean and concise manner.\\n\\n// Define an interface for the component props\\ninterface CardProps {\\n    className?: string; // Optional className names for the container card\\n    style?: CSSProperties; // Optional custom styles for the container card\\n    children: ReactNode; // Content to be included within the card\\n    shadow?: \'lw\' | \'md\' | \'tl\'; // Optional shadow levels: low (lw), medium (md), top-level (tl)\\n}\\n\\n// Build the card component with the specified props\\nconst Card: React.FC<CardProps> = ({\\n    className, // classNamees for the container card\\n    style, // Custom styles for the container card\\n    children, // Content to be included within the card\\n    shadow, // for add shadow under your card Shadow levels: low (lw), medium (md), top-level (tl)\\n}) => {\\n    const cardShadow = shadow\\n        ? `item shadow--${shadow}`\\n        : \'\';\\n    return (<div className = \\"card-demo\\" > <div className = {\\n        clsx(\\"card\\", className, cardShadow)\\n    }\\n    style = {\\n        style\\n    } > {\\n        children\\n    }</div></div>);\\n};\\n\\nexport default Card;\\n```\\n</TabItem>\\n\\n</Tabs>\\n\\n## Creating the CardHeader component\\nThink of this component as the header of your future cards. Create the file and add the source code for the component. The component will accept the following props:\\n\\n- `textAlign`: The option for text alignment `left` `right` `center` `justify`\\n- `variant`: (optional)This will be used to apply different colors to the text based on the Infima CSS utility classNamees. The default value is primary.\\n- `italic`: Default value is false, it\'s for italic text render\\n- `noDecoration`: Default value is false, it\'s for delete text decoration \\n- `transform`: The option for transform text to `UPPERCASE TEXT` `lowercase text` or `Capitalize Text` \\n- `truncate`: The option is for very long text that will be truncated if there is not enough space to display it in a single line on the screen.  It\'s truncated by adding &hellip; \\n- `weight`: The option for text weight `Bold` `Semibold` `Normal` `Light`\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>}>\\n\\n```javascript title=\'\\\\src\\\\components\\\\Card\\\\CardHeader\\\\index.js\'\\nimport React, {CSSProperties} from \'react\'; // CSSProperties allows inline styling with better type checking.\\nimport clsx from \'clsx\'; // clsx helps manage conditional className names in a clean and concise manner.\\nimport styles from \'../styles.module.css\';\\n\\nconst CardHeader = ({\\n    className, // classNamees for the container card\\n    style, // Custom styles for the container card\\n    children, // Content to be included within the card\\n    textAlign,\\n    variant,\\n    italic = false,\\n    noDecoration = false,\\n    transform,\\n    truncate = false,\\n    weight\\n}) => {\\n    const text = textAlign\\n        ? `text--${textAlign}`\\n        : \'\';\\n    const textColor = variant\\n        ? `text--${variant}`\\n        : \'\';\\n    const textItalic = italic\\n        ? \'text--italic\'\\n        : \'\';\\n    const textDecoration = noDecoration\\n        ? \'text-no-decoration\'\\n        : \'\';\\n    const textType = transform\\n        ? `text--${transform}`\\n        : \'\';\\n    const textTruncate = truncate\\n        ? styles.truncate\\n        : \'\';\\n    const textWeight = weight\\n        ? `text--${weight}`\\n        : \'\';\\n    return (\\n        <div\\n            className={clsx(\\n                \'card__header\',\\n                className,\\n                text,\\n                textType,\\n                textColor,\\n                textItalic,\\n                textDecoration,\\n                textTruncate,\\n                textWeight\\n            )}\\n            style={style}>\\n\\n            {children}\\n        </div>\\n    );\\n}\\n\\nexport default CardHeader;\\n\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size=\'24\' /> </>}>\\n\\n```tsx title=\'\\\\src\\\\components\\\\Card\\\\CardHeader\\\\index.tsx\'\\nimport React, {CSSProperties, ReactNode} from \'react\';\\nimport clsx from \'clsx\';\\nimport styles from \'../styles.module.css\';\\n\\ninterface CardHeaderProps {\\n    className?: string;\\n    style?: CSSProperties;\\n    children: ReactNode;\\n    textAlign?: string;\\n    variant?: string;\\n    italic?: boolean;\\n    noDecoration?: boolean;\\n    transform?: string;\\n    truncate?: boolean;\\n    weight?: string;\\n}\\n\\nconst CardHeader: React.FC<CardHeaderProps> = ({\\n    className,\\n    style,\\n    children,\\n    textAlign,\\n    variant,\\n    italic = false,\\n    noDecoration = false,\\n    transform,\\n    truncate = false,\\n    weight\\n}) => {\\n    const text = textAlign\\n        ? `text--${textAlign}`\\n        : \'\';\\n    const textColor = variant\\n        ? `text--${variant}`\\n        : \'\';\\n    const textItalic = italic\\n        ? \'text--italic\'\\n        : \'\';\\n    const textDecoration = noDecoration\\n        ? \'text-no-decoration\'\\n        : \'\';\\n    const textType = transform\\n        ? `text--${transform}`\\n        : \'\';\\n    const textTruncate = truncate\\n        ? styles.truncate\\n        : \'\';\\n    const textWeight = weight\\n        ? `text--${weight}`\\n        : \'\';\\n\\n    return (<div className = {\\n        clsx(\\n            \'card__header\',\\n            className,\\n            text,\\n            textType,\\n            textColor,\\n            textItalic,\\n            textDecoration,\\n            textTruncate,\\n            textWeight\\n        )\\n    }\\n    style = {\\n        style\\n    } > {\\n        children\\n    }</div>);\\n};\\n\\nexport default CardHeader;\\n\\n\\n```\\n</TabItem>\\n\\n</Tabs>\\n\\n## Creating the CardBody component\\nThink of this component as the body of your futurs cards. Creating the file and adding the source code for the component.The component will accept the following props:\\n\\n- `textAlign`: The option for text alignment `left` `right` `center` `justify`\\n- `variant`: (optional)This will be used to apply different colors to the text based on the Infima CSS utility classNamees. The default value is primary.\\n- `italic`: Default value is false, it\'s for italic text render\\n- `noDecoration`: Default value is false, it\'s for delete text decoration \\n- `transform`: The option for transform text to `UPPERCASE TEXT` `lowercase text` or `Capitalize Text` \\n- `truncate`: The option is for very long text that will be truncated if there is not enough space to display it in a single line on the screen.  It\'s truncated by adding &hellip; \\n- `weight`: The option for text weight `Bold` `Semibold` `Normal` `Light`\\n\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>}>\\n\\n```javascript title=\'\\\\src\\\\components\\\\Card\\\\CardBody\\\\index.js\'\\nimport React, {CSSProperties} from \'react\';\\nimport clsx from \'clsx\';\\nimport styles from \'../styles.module.css\';\\n\\nconst CardBody = ({\\n    className, // classNamees for the container card\\n    style, // Custom styles for the container card\\n    children, // Content to be included within the card\\n    textAlign,\\n    variant,\\n    italic = false,\\n    noDecoration = false,\\n    transform,\\n    truncate = false,\\n    weight\\n}) => {\\n    const text = textAlign\\n        ? `text--${textAlign}`\\n        : \'\';\\n    const textColor = variant\\n        ? `text--${variant}`\\n        : \'\';\\n    const textItalic = italic\\n        ? \'text--italic\'\\n        : \'\';\\n    const textDecoration = noDecoration\\n        ? \'text-no-decoration\'\\n        : \'\';\\n    const textType = transform\\n        ? `text--${transform}`\\n        : \'\';\\n    const textTruncate = truncate\\n        ? styles.truncate\\n        : \'\';\\n    const textWeight = weight\\n        ? `text--${weight}`\\n        : \'\';\\n    return (\\n        <div\\n            className={clsx(\\n                \'card__body\',\\n                className,\\n                text,\\n                textType,\\n                textColor,\\n                textItalic,\\n                textDecoration,\\n                textTruncate,\\n                textWeight\\n            )}\\n            style={style}>\\n            {children}\\n        </div>\\n    );\\n}\\n\\nexport default CardBody;\\n\\n\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size=\'24\' /> </>}>\\n\\n```tsx title=\'\\\\src\\\\components\\\\Card\\\\CardBody\\\\index.tsx\'\\nimport React, {CSSProperties, ReactNode} from \'react\';\\nimport clsx from \'clsx\';\\nimport styles from \'../styles.module.css\';\\n\\ninterface CardBodyProps {\\n    className?: string;\\n    style?: CSSProperties;\\n    children: ReactNode;\\n    textAlign?: string;\\n    variant?: string;\\n    italic?: boolean;\\n    noDecoration?: boolean;\\n    transform?: string;\\n    truncate?: boolean;\\n    weight?: string;\\n}\\n\\nconst CardBody: React.FC<CardBodyProps> = ({\\n    className,\\n    style,\\n    children,\\n    textAlign,\\n    variant,\\n    italic = false,\\n    noDecoration = false,\\n    transform,\\n    truncate = false,\\n    weight\\n}) => {\\n    const text = textAlign\\n        ? `text--${textAlign}`\\n        : \'\';\\n    const textColor = variant\\n        ? `text--${variant}`\\n        : \'\';\\n    const textItalic = italic\\n        ? \'text--italic\'\\n        : \'\';\\n    const textDecoration = noDecoration\\n        ? \'text-no-decoration\'\\n        : \'\';\\n    const textType = transform\\n        ? `text--${transform}`\\n        : \'\';\\n    const textTruncate = truncate\\n        ? styles.truncate\\n        : \'\';\\n    const textWeight = weight\\n        ? `text--${weight}`\\n        : \'\';\\n\\n    return (<div className = {\\n        clsx(\\n            \'card__body\',\\n            className,\\n            text,\\n            textType,\\n            textColor,\\n            textItalic,\\n            textDecoration,\\n            textTruncate,\\n            textWeight\\n        )\\n    }\\n    style = {\\n        style\\n    } > {\\n        children\\n    }</div>);\\n};\\n\\nexport default CardBody;\\n\\n\\n\\n```\\n</TabItem>\\n\\n</Tabs>\\n\\n\\n## Creating the CardImage component\\nThink of this component as the image cover of your futurs cards. Creating the file and adding the source code for the component.\\nThis component is optionnal, you can use image html and add ```className={clsx(\\"card__image\\")}```\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>}>\\n\\n```javascript title=\'\\\\src\\\\components\\\\Card\\\\CardImage\\\\index.js\'\\nimport React, {CSSProperties} from \'react\';\\nimport clsx from \'clsx\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\'; // Import the useBaseUrl function from Docusaurus\\n\\nconst CardImage = ({className, style, cardImageUrl, alt, title}) => {\\n\\n    const generatedCardImageUrl = useBaseUrl(cardImageUrl);\\n\\n    return (\\n\\n        <img\\n            className={clsx(\\"card__image\\", className)}\\n            style={style}\\n            src={generatedCardImageUrl}\\n            alt={alt}\\n            title={title}/>\\n\\n    );\\n}\\n\\nexport default CardImage;\\n\\n\\n\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size=\'24\' /> </>}>\\n\\n```tsx title=\'\\\\src\\\\components\\\\Card\\\\CardImage\\\\index.tsx\'\\nimport React, {CSSProperties} from \'react\';\\nimport clsx from \'clsx\';\\nimport useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\ninterface CardImageProps {\\n    className?: string;\\n    style?: CSSProperties;\\n    cardImageUrl: string;\\n    alt: string;\\n    title: string;\\n}\\n\\nconst CardImage: React.FC<CardImageProps> = (\\n    {className, style, cardImageUrl, alt, title}\\n) => {\\n    const generatedCardImageUrl = useBaseUrl(cardImageUrl);\\n\\n    return (< img className = {\\n        clsx(\\"card__image\\", className)\\n    }\\n    style = {\\n        style\\n    }\\n    src = {\\n        generatedCardImageUrl\\n    }\\n    alt = {\\n        alt\\n    }\\n    title = {\\n        title\\n    } />);\\n};\\n\\nexport default CardImage;\\n\\n\\n```\\n</TabItem>\\n\\n</Tabs>\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n## Creating the CardFooter component\\nThink of this component as the Footer of your futurs cards. Creating the file and adding the source code for the component.The component will accept the following props:\\n\\n- `textAlign`: The option for text alignment `left` `right` `center` `justify`\\n- `variant`: (optional)This will be used to apply different colors to the text based on the Infima CSS utility classNamees. The default value is primary.\\n- `italic`: Default value is false, it\'s for italic text render\\n- `noDecoration`: Default value is false, it\'s for delete text decoration \\n- `transform`: The option for transform text to `UPPERCASE TEXT` `lowercase text` or `Capitalize Text` \\n- `truncate`: The option is for very long text that will be truncated if there is not enough space to display it in a single line on the screen.  It\'s truncated by adding &hellip; \\n- `weight`: The option for text weight `Bold` `Semibold` `Normal` `Light`\\n\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>}>\\n\\n```javascript title=\'\\\\src\\\\components\\\\Card\\\\CardFooter\\\\index.js\'\\nimport React, {CSSProperties} from \'react\';\\nimport clsx from \'clsx\';\\nimport styles from \'../styles.module.css\';\\n\\nconst CardFooter = ({\\n    className,\\n    style,\\n    children,\\n    textAlign,\\n    variant,\\n    italic = false,\\n    noDecoration = false,\\n    transform,\\n    truncate = false,\\n    weight\\n}) => {\\n    const text = textAlign\\n        ? `text--${textAlign}`\\n        : \'\';\\n    const textColor = variant\\n        ? `text--${variant}`\\n        : \'\';\\n    const textItalic = italic\\n        ? \'text--italic\'\\n        : \'\';\\n    const textDecoration = noDecoration\\n        ? \'text-no-decoration\'\\n        : \'\';\\n    const textType = transform\\n        ? `text--${transform}`\\n        : \'\';\\n    const textTruncate = truncate\\n        ? styles.truncate\\n        : \'\';\\n    const textWeight = weight\\n        ? `text--${weight}`\\n        : \'\';\\n    return (\\n        <div\\n            className={clsx(\\n                \'card__footer\',\\n                className,\\n                text,\\n                textType,\\n                textColor,\\n                textItalic,\\n                textDecoration,\\n                textTruncate,\\n                textWeight\\n            )}\\n            style={style}>\\n            {children}\\n        </div>\\n    );\\n}\\n\\nexport default CardFooter;\\n\\n\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size=\'24\' /> </>}>\\n\\n```tsx title=\'\\\\src\\\\components\\\\Card\\\\CardFooter\\\\index.tsx\'\\nimport React, {CSSProperties, ReactNode} from \'react\';\\nimport clsx from \'clsx\';\\nimport styles from \'../styles.module.css\';\\n\\ninterface CardFooterProps {\\n    className?: string;\\n    style?: CSSProperties;\\n    children: ReactNode;\\n    textAlign?: string;\\n    variant?: string;\\n    italic?: boolean;\\n    noDecoration?: boolean;\\n    transform?: string;\\n    truncate?: boolean;\\n    weight?: string;\\n}\\n\\nconst CardFooter: React.FC<CardFooterProps> = ({\\n    className,\\n    style,\\n    children,\\n    textAlign,\\n    variant,\\n    italic = false,\\n    noDecoration = false,\\n    transform,\\n    truncate = false,\\n    weight\\n}) => {\\n    const text = textAlign\\n        ? `text--${textAlign}`\\n        : \'\';\\n    const textColor = variant\\n        ? `text--${variant}`\\n        : \'\';\\n    const textItalic = italic\\n        ? \'text--italic\'\\n        : \'\';\\n    const textDecoration = noDecoration\\n        ? \'text-no-decoration\'\\n        : \'\';\\n    const textType = transform\\n        ? `text--${transform}`\\n        : \'\';\\n    const textTruncate = truncate\\n        ? styles.truncate\\n        : \'\';\\n    const textWeight = weight\\n        ? `text--${weight}`\\n        : \'\';\\n\\n    return (<div className = {\\n        clsx(\\n            \'card__footer\',\\n            className,\\n            text,\\n            textType,\\n            textColor,\\n            textItalic,\\n            textDecoration,\\n            textTruncate,\\n            textWeight\\n        )\\n    }\\n    style = {\\n        style\\n    } > {\\n        children\\n    }</div>);\\n};\\n\\nexport default CardFooter;\\n\\n\\n\\n\\n```\\n</TabItem>\\n\\n</Tabs>\\n\\n\\n\\n## MDX Component Scope\\nTo follow the Docusaurus documentation, we create a theme folder that will host the `MDXComponents` file. This gives us `src\\\\theme\\\\MDXComponents.*`. You may already have a `src\\\\theme` folder or an `MDXComponents` file if so - merge the changes described here with yours.\\n\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size=\'24\' /> </>}>\\n    ```javascript title=\\"src\\\\theme\\\\MDXComponents.js\\"\\n     import React from \'react\';\\n// Importing the original mapper + our components according to the Docusaurus\\n// doc\\nimport MDXComponents from \'@theme-original/MDXComponents\';\\nimport Card from \'@site/src/components/Card/Card\';\\nimport CardBody from \'@site/src/components/Card/CardBody\';\\nimport CardFooter from \'@site/src/components/Card/CardFooter\';\\nimport CardHeader from \'@site/src/components/Card/CardHeader\';\\nimport CardImage from \'@site/src/components/Card/CardImage\';\\n\\nexport default {\\n    // Reusing the default mapping\\n    ...MDXComponents,\\n    Card,\\n    CardHeader,\\n    CardBody,\\n    CardFooter,\\n    CardImage\\n};\\n    ```\\n  </TabItem>\\n  <TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size=\'24\' /> </>}>\\n    ```tsx title=\\"src\\\\theme\\\\MDXComponents.tsx\\"\\n\\nimport React from \'react\';\\n// Importing the original mapper + our components according to the Docusaurus\\n// doc\\nimport MDXComponents from \'@theme-original/MDXComponents\';\\nimport Card from \'@site/src/components/Card/Card\';\\nimport CardBody from \'@site/src/components/Card/CardBody\';\\nimport CardFooter from \'@site/src/components/Card/CardFooter\';\\nimport CardHeader from \'@site/src/components/Card/CardHeader\';\\nimport CardImage from \'@site/src/components/Card/CardImage\';\\n\\nexport default {\\n    // Reusing the default mapping\\n    ...MDXComponents,\\n    Card,\\n    CardHeader,\\n    CardBody,\\n    CardFooter,\\n    CardImage\\n};\\n    ```\\n  </TabItem>\\n</Tabs>\\n\\n\\n## Using the Cards Component in an MDX File\\n\\n### Basic card\\n\\n<div className=\\"container \\">\\n<div className=\\"row \\">\\n<div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  <Card shadow=\'tl margin-bottom--lg\'>\\n    <CardHeader >\\n      <h3>Lorem Ipsum</h3>\\n    </CardHeader>\\n\\n  <CardBody> \\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\\n  tempor incididunt ut labore et dolore magna aliqua. Quis ipsum\\n  suspendisse ultrices gravida.\\n  </CardBody> \\n\\n\\n  <CardFooter>\\n\\n    <button className=\\"button button--secondary button--block\\">See All</button> \\n\\n  </CardFooter> \\n\\n  </Card>\\n\\n</div>\\n    </div>\\n\\n    \\n    <div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  ```html\\n  <Card shadow=\'tl\'>\\n    <CardHeader >\\n        <h3>Lorem Ipsum</h3>\\n    </CardHeader>\\n\\n    <CardBody>\\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\\n        incididunt ut labore et dolore magna aliqua. Quis ipsum suspendisse ultrices\\n        gravida.\\n    </CardBody>\\n\\n    <CardFooter>\\n\\n        <button className=\\"button button--secondary button--block\\">See All</button>\\n\\n    </CardFooter>\\n\\n</Card>\\n  ```\\n\\n</div>\\n    </div>\\n\\n\\n\\n\\n\\n### Feed card\\n\\n<div className=\\"container \\">\\n<div className=\\"row padding-bottom--xl\\">\\n<div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  <Card className=\'margin-bottom--lg\'>\\n  <CardHeader style={{ backgroundColor: \'#205d3b\' , color:\'black\'}}>\\n<div className=\\"avatar avatar--vertical\\">\\n  <img\\n    className=\\"avatar__photo avatar__photo--xl\\" \\n    src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" />\\n  <div className=\\"avatar__intro\\">\\n    <div className=\\"avatar__name\\">Docux</div>\\n    <small className=\\"avatar__subtitle\\">\\n      Curious explorer, a bit of a mad experimenter, and a bit of a contributor.\\n      <a  style={{ color:\'white\'}} href=\\"https://docuxlab.com/\\">@docuxlab.com</a>\\n    </small>\\n  </div>\\n</div>\\n </CardHeader>\\n<CardBody style={{ backgroundColor: \'black\' , color:\'silver\'}} className=\\"padding-vert--md\\" textAlign=\'center\' Transform= \'uppercase\'> \\n <h3>Docux Card component</h3>\\n \\nWelcome to DocuxLab, your space for tech discoveries, development tutorials, and tips to enhance your digital projects. Here, we break down code, explore web trends, and share practical resources for all tech enthusiasts.\\n\\nExplore our articles, guides, and interactive demos designed to help you stay at the forefront of innovation. Whether you are a beginner developer or an experienced pro, DocuxLab is here to inspire and support you in your digital projects.\\n </CardBody> \\n\\n\\n<CardFooter style={{ backgroundColor: \'#205d3b\' , color:\'black\'}} className=\'text--center\'> \\n<div className=\\"button-group button-group--block\\">\\n        <button className=\\"button button--secondary button--sm\\">Like</button>\\n        <button className=\\"button button--secondary button--sm\\">Comment</button>\\n        <button className=\\"button button--secondary button--sm\\">Share</button>\\n      </div>\\n</CardFooter> \\n\\n</Card>\\n\\n</div>\\n    </div>\\n    <div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  ```html\\n  <Card className=\'margin-bottom--lg\'>\\n    <CardHeader style={{ backgroundColor: \'#205d3b\' , color:\'black\'} }>\\n        <div className=\\"avatar avatar--vertical\\">\\n            <img\\n                className=\\"avatar__photo avatar__photo--xl\\"\\n                src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\"/>\\n            <div className=\\"avatar__intro\\">\\n                <div className=\\"avatar__name\\">Docux</div>\\n                <small className=\\"avatar__subtitle\\">\\n                    Curious explorer, a bit of a mad experimenter, and a bit of a contributor.\\n                    <a style={{ color:\'white\'} } href=\\"https://docuxlab.com/\\">@docuxlab.com</a>\\n                </small>\\n            </div>\\n        </div>\\n    </CardHeader>\\n    <CardBody\\n        style={{ backgroundColor: \'black\' , color:\'silver\'}}\\n        className=\\"padding-vert--md\\"\\n        textAlign=\'center\'\\n        Transform=\'uppercase\'>\\n        <h3>Docux Card component</h3>\\n\\n        Welcome to DocuxLab, your space for tech discoveries, development tutorials, and\\n        tips to enhance your digital projects. Here, we break down code, explore web\\n        trends, and share practical resources for all tech enthusiasts. Explore our\\n        articles, guides, and interactive demos designed to help you stay at the\\n        forefront of innovation. Whether you are a beginner developer or an experienced\\n        pro, DocuxLab is here to inspire and support you in your digital projects.\\n    </CardBody>\\n\\n    <CardFooter\\n        style={{ backgroundColor: \'#205d3b\' , color:\'black\'}}\\n        className=\'text--center\'>\\n        <div className=\\"button-group button-group--block\\">\\n            <button className=\\"button button--secondary button--sm\\">Like</button>\\n            <button className=\\"button button--secondary button--sm\\">Comment</button>\\n            <button className=\\"button button--secondary button--sm\\">Share</button>\\n        </div>\\n    </CardFooter>\\n\\n</Card>\\n```\\n</div>\\n    </div>\\n</div>\\n    </div>\\n\\n\\n\\n\\n### Mega Feed card \\n<div className=\\"container\\">\\n<div className=\\"row padding-bottom--xl\\">\\n<div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  <Card className=\'margin-bottom--lg\'>\\n  <CardHeader className=\'padding-top--lg\' style={{ backgroundColor: \'rgb(33 126 209)\' , color:\'black\'}}>\\n<div className=\\"avatar avatar--vertical\\">\\n  <img\\n    className=\\"avatar__photo avatar__photo--xl\\" \\n    src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" />\\n  <div className=\\"avatar__intro\\">\\n    <div className=\\"avatar__name\\">Docux</div>\\n    <small className=\\"avatar__subtitle\\">\\n      Curious explorer, a bit of a mad experimenter, and a bit of a contributor.\\n      <a style={{ color:\'white\'}} href=\\"https://docuxlab.com/\\">@docuxlab.com</a>\\n    </small>\\n  </div>\\n</div>\\n </CardHeader>\\n\\n <CardImage style={{ backgroundColor: \'rgb(33 126 209)\' , color:\'black\'}} cardImageUrl=\\"/img/learn-docker-in-avonture-blog.webp\\" />\\n\\n<CardBody style={{ backgroundColor: \'#fefacb\' , color:\'#8f600b\'}} className=\\"padding-vert--md\\" textAlign=\'center\' Transform= \'uppercase\'> \\n\\n <h3>New Discovery</h3>\\n\\nAmazing discovery! I\'ve found an incredible website: [avonture.be](https://www.avonture.be/). This comprehensive resource offers in-depth tutorials, practical examples, and expert insights into various development topics.\\n\\n </CardBody>  \\n\\n\\n\\n<CardFooter style={{ backgroundColor: \'#2887bf\' , color:\'black\'}} className=\'text--center\'> \\n<div className=\\"button-group button-group--block\\">\\n        <button className=\\"button button--secondary button--sm\\">Like</button>\\n        <button className=\\"button button--secondary button--sm\\">Comment</button>\\n        <button className=\\"button button--secondary button--sm\\">Share</button>\\n      </div>\\n</CardFooter> \\n\\n</Card>\\n\\n</div>\\n    </div>\\n    <div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  ```html\\n <Card>\\n    <CardHeader\\n        className=\'padding-top--lg\'\\n        style={{ backgroundColor: \'rgb(33 126 209)\' , color:\'black\'}}>\\n        <div className=\\"avatar avatar--vertical\\">\\n            <img\\n                className=\\"avatar__photo avatar__photo--xl\\"\\n                src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\"/>\\n            <div className=\\"avatar__intro\\">\\n                <div className=\\"avatar__name\\">Docux</div>\\n                <small className=\\"avatar__subtitle\\">\\n                    Curious explorer, a bit of a mad experimenter, and a bit of a contributor.\\n                    <a style={{ color:\'white\'} } href=\\"https://docuxlab.com/\\">@docuxlab.com</a>\\n                </small>\\n            </div>\\n        </div>\\n    </CardHeader>\\n\\n    <CardImage\\n        style={{ backgroundColor: \'rgb(33 126 209)\' , color:\'black\'}}\\n        cardImageUrl=\\"/img/learn-docker-in-avonture-blog.webp\\"/>\\n\\n    <CardBody\\n        style={{ backgroundColor: \'#fefacb\' , color:\'#8f600b\'}}\\n        className=\\"padding-vert--md\\"\\n        textAlign=\'center\'\\n        Transform=\'uppercase\'>\\n        <h3>New feature</h3>\\n\\n        Amazing discovery! I\'ve found an incredible website:\\n        [avonture.be](https://www.avonture.be/). This comprehensive resource offers\\n        in-depth tutorials, practical examples, and expert insights into various\\n        development topics.\\n\\n    </CardBody>\\n\\n    <CardFooter\\n        style={{ backgroundColor: \'#2887bf\' , color:\'black\'}}\\n        className=\'text--center\'>\\n        <div className=\\"button-group button-group--block\\">\\n            <button className=\\"button button--secondary button--sm\\">Like</button>\\n            <button className=\\"button button--secondary button--sm\\">Comment</button>\\n            <button className=\\"button button--secondary button--sm\\">Share</button>\\n        </div>\\n    </CardFooter>\\n\\n</Card>\\n\\n```\\n</div>\\n    </div>\\n</div>\\n    </div>\\n\\n\\n\\n### Photo card \\n<div className=\\"container\\">\\n<div className=\\"row padding-bottom--xl\\">\\n<div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  <Card className=\'margin-bottom--lg\'>\\n\\n <CardImage cardImageUrl=\\"/img/docux.webp\\" />\\n\\n<CardFooter style={{ backgroundColor: \'#07ac2aff\' , color:\'#eeff00ff\'}} className=\'text--center\'> \\n<div className=\\"button-group button-group--block\\">\\n  <button className=\\"button button--primary button--sm\\">Like</button>\\n  <button className=\\"button button--secondary button--sm\\">Comment</button>\\n  <button className=\\"button button--info button--sm\\">Share</button>\\n</div>\\n</CardFooter> \\n\\n</Card>\\n\\n</div>\\n    </div>\\n    \\n    <div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  ```html\\n   <Card className=\'margin-bottom--lg\'>\\n\\n    <CardImage cardImageUrl=\\"/img/docux.webp\\"/>\\n\\n    <CardFooter\\n        style={{ backgroundColor: \'#07ac2aff\' , color:\'#eeff00ff\' }}\\n        className=\'text--center\'>\\n        <div className=\\"button-group button-group--block\\">\\n            <button className=\\"button button--primary button--sm\\">Like</button>\\n            <button className=\\"button button--secondary button--sm\\">Comment</button>\\n            <button className=\\"button button--info button--sm\\">Share</button>\\n        </div>\\n    </CardFooter>\\n\\n</Card>\\n```\\n</div>\\n    </div>\\n</div>\\n    </div>\\n\\n\\n### Photo card Avatar\\n<div className=\\"container\\">\\n<div className=\\"row padding-bottom--xl\\">\\n<div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  <Card className=\'margin-bottom--lg\'>\\n\\n <CardImage cardImageUrl=\\"/img/learn-docusaurus-and-react.webp\\" />\\n\\n<CardFooter style={{ backgroundColor: \'white\' , color:\'black\'}} className=\'text--center\'> \\n<div className=\\"avatar\\">\\n  <img\\n    className=\\"avatar__photo avatar__photo--xs\\" \\n    src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" />\\n  <div className=\\"avatar__intro\\">\\n    <div className=\\"avatar__name\\">Learn Docusaurus</div>\\n    \\n  </div>\\n</div>\\n \\n</CardFooter> \\n\\n</Card>\\n\\n</div>\\n    </div>\\n    <div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  ```html\\n   <Card className=\'margin-bottom--lg\'>\\n\\n    <CardImage cardImageUrl=\\"/img/learn-docusaurus-and-react.webp\\"/>\\n\\n    <CardFooter\\n        style={{ backgroundColor: \'white\' , color:\'black\'}}\\n        className=\'text--center\'>\\n        <div className=\\"avatar\\">\\n            <img\\n                className=\\"avatar__photo avatar__photo--xs\\"\\n                src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\"/>\\n            <div className=\\"avatar__intro\\">\\n                <div className=\\"avatar__name\\">Learn Docusaurus</div>\\n\\n            </div>\\n        </div>\\n\\n    </CardFooter>\\n\\n</Card>\\n\\n```\\n</div>\\n    </div>\\n</div>\\n    </div>\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n### Other Post card\\n\\n\\n<div className=\\"container\\">\\n<div className=\\"row \\">\\n<div className=\\"col col--6\\">\\n<div className=\\"\\">\\n\\n  <Card shadow=\'tl margin-bottom--lg\'>\\n  <CardBody style={{ backgroundColor: \'white\' , color:\'black\'}} className=\\"padding-vert--md \\"Transform= \'uppercase\'> \\nThe Infima CSS  framework provides a set of utility classNames that can be used to style card in Docusaurus. This article will cover how to create a reusable card component for your Docusaurus site that can be customized with different colors and sizes.\\n </CardBody> \\n  <CardFooter style={{ backgroundColor: \'#7a9f3d\' , color:\'#d7de3d\'}} > \\n\\n<div className=\\"avatar padding-top--md\\">\\n        <img\\n          className=\\"avatar__photo\\"\\n          src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" />\\n        <div className=\\"avatar__intro\\">\\n          <div className=\\"avatar__name\\">Docux</div>\\n          <small className=\\"avatar__subtitle\\">\\n          Curious explorer, a bit of a mad experimenter, and a bit of a contributor.\\n          </small>\\n        </div>\\n</div>\\n  </CardFooter> \\n  </Card>\\n\\n</div>\\n    </div>\\n\\n    <div className=\\"col col--6\\">\\n<div className=\\"\\">\\n```html\\n<Card shadow=\'tl\'>\\n    <CardBody\\n        style={{ backgroundColor: \'white\' , color:\'black\'}}\\n        className=\\"padding-vert--md \\"\\n        Transform=\'uppercase\'>\\n        A must-visit site for developers looking to expand their knowledge and skills!\\n    </CardBody>\\n    <CardFooter style={{ backgroundColor: \'#7a9f3d\' , color:\'#d7de3d\'}}>\\n\\n        <div className=\\"avatar padding-top--md\\">\\n            <img\\n                className=\\"avatar__photo\\"\\n                src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\"/>\\n            <div className=\\"avatar__intro\\">\\n                <div className=\\"avatar__name\\">Docux</div>\\n                <small className=\\"avatar__subtitle\\">\\n                    Curious explorer, a bit of a mad experimenter, and a bit of a contributor.\\n                </small>\\n            </div>\\n        </div>\\n    </CardFooter>\\n</Card>\\n```\\n</div>\\n    </div>\\n</div>\\n    </div>\\n</div>\\n    </div>\\n\\n\\n\\n\\n### Multi demo card\\n\\n\\n<div className=\\"container\\">\\n<div className=\\"row padding-bottom--xl\\">\\n<div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  <Card className=\'margin-bottom--lg\'>\\n  <CardHeader className=\'padding-top--lg\' style={{ backgroundColor: \'#87dfb8\' , color:\'#2d2f4eff\'}}>\\n<div className=\\"avatar avatar--vertical\\">\\n  <img\\n    className=\\"avatar__photo avatar__photo--xs\\" \\n    src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" />\\n  <div className=\\"avatar__intro\\">\\n    <div className=\\"avatar__name\\">Docux</div>\\n    <small className=\\"avatar__subtitle\\" >\\n      Curious explorer, a bit of a mad experimenter, and a bit of a contributor.\\n      <a href=\\"https://docuxlab.com/\\" style={{ color:\'#1a8870\'}}>@docuxlab.com</a>\\n    </small>\\n  </div>\\n</div>\\n </CardHeader>\\n\\n <CardImage style={{ backgroundColor: \'#87dfb8\' , color:\'#2d2f4eff\'}} cardImageUrl=\\"/img/docux-and-christophe-learn-docusaurus.webp\\" />\\n\\n<CardBody style={{ backgroundColor: \'#87dfb8\' , color:\'#2d2f4eff\'}} className=\\"padding-vert--md\\" textAlign=\'right\' Transform= \'uppercase\' > \\n <h3>DocuxLab</h3>\\nA must-visit site for developers looking to expand their knowledge and skills!\\n </CardBody>  \\n\\n</Card>\\n\\n</div>\\n    </div>\\n    <div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  \\n  <Card className=\'margin-bottom--lg\'>\\n  <CardHeader className=\'padding-top--lg\' style={{ backgroundColor: \'#7a9f3d\' , color:\'black\'}}>\\n<div className=\\"avatar\\">\\n  <img\\n    className=\\"avatar__photo avatar__photo--lg\\" \\n    src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" />\\n  <div className=\\"avatar__intro\\">\\n    <div className=\\"avatar__name\\">Docux</div>\\n    <small className=\\"avatar__subtitle\\">\\n      Curious explorer, a bit of a mad experimenter, and a bit of a contributor.\\n      <a style={{ color:\'white\'}} href=\\"https://docuxlab.com/\\">@docuxlab.com</a>\\n    </small>\\n  </div>\\n</div>\\n </CardHeader>\\n\\n <CardImage style={{ backgroundColor: \'#7a9f3d\' , color:\'#d7de3d\'}} cardImageUrl=\\"/img/docux-and-christophe-learn-docusaurus.webp\\" />\\n\\n<CardBody style={{ backgroundColor: \'#d7de3d\' , color:\'#3d521cff\'}} className=\\"padding-vert--md\\" textAlign=\'justify\' Transform= \'uppercase\'> \\n \\n <h3 className=\'text--center\'>DocuxLab</h3>\\nA must-visit site for developers looking to expand their knowledge and skills!\\n </CardBody>  \\n\\n</Card>\\n\\n\\n</div>\\n    </div>\\n\\n      <div className=\\"col col--6\\">\\n<div className=\\"\\">\\n  \\n  <Card className=\'margin-top--lg\'>\\n\\n\\n <CardImage style={{ backgroundColor: \'black\' , color:\'black\'}}cardImageUrl=\\"/img/card-component-docusaurus-infima.webp\\" />\\n\\n<CardBody style={{ backgroundColor: \'#40c43b\' , color:\'#3d521cff\'}} className=\\"padding-vert--md\\" textAlign=\'center\' Transform= \'uppercase\'  > \\n <h3>Docux Card component</h3>\\n \\nWelcome to DocuxLab, your space for tech discoveries, development tutorials, and tips to enhance your digital projects. Here, we break down code, explore web trends, and share practical resources for all tech enthusiasts. Explore our articles, guides, and interactive demos designed to help you stay at the forefront of innovation. Whether you are a beginner developer or an experienced pro, DocuxLab is here to inspire and support you in your digital projects.\\n </CardBody>  \\n <CardFooter style={{  backgroundColor: \'#d7de3d\' , color:\'#3d521cff\'}} > \\n\\n<div className=\\"avatar padding-top--md\\">\\n        <img\\n          className=\\"avatar__photo\\"\\n          src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" />\\n        <div className=\\"avatar__intro\\">\\n          <div className=\\"avatar__name\\">Docux</div>\\n          <small className=\\"avatar__subtitle\\">\\n          Curious explorer, a bit of a mad experimenter, and a bit of a contributor.\\n          </small>\\n        </div>\\n</div>\\n  </CardFooter> \\n</Card>\\n\\n\\n</div>\\n    </div>\\n</div>\\n    </div>\\n    \\n    ## Why truncate in styles.module.css\\n\\nThe truncate functionality uses CSS Modules to provide better encapsulation and avoid conflicts with global styles. Here\'s a detailed breakdown of how the `.truncate p` CSS works:\\n\\n<Tabs groupId=\\"css-scss\\">\\n  <TabItem value=\\"css\\" label={<><LogoIcon name=\\"css-3\\" size=\'24\' /> </>}>\\n\\n```css title=\'\\\\src\\\\components\\\\Card\\\\styles.module.css\'\\n.truncate p {\\n  display: -webkit-box;\\n  -webkit-line-clamp: 3;\\n  line-clamp: 3;\\n  -webkit-box-orient: vertical;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  margin-bottom: 0;\\n  word-wrap: break-word;\\n  max-height: 4.5em; /* 3 lines \xd7 1.5em line-height */\\n  line-height: 1.5em;\\n}\\n```\\n\\n</TabItem>\\n  <TabItem value=\\"scss\\" label={<><LogoIcon name=\\"sass\\" size=\'24\' /> </>}>\\n    ```scss title=\\"\\\\src\\\\components\\\\Card\\\\styles.module.scss\\"\\n.truncate {\\n  p {\\n    display: -webkit-box;\\n    -webkit-line-clamp: 3;\\n    line-clamp: 3;\\n    -webkit-box-orient: vertical;\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n    margin-bottom: 0;\\n    word-wrap: break-word;\\n    max-height: 4.5em; /* 3 lines \xd7 1.5em line-height */\\n    line-height: 1.5em;\\n  }\\n}\\n    ```\\n</TabItem>\\n</Tabs>\\n\\n### Detailed CSS Properties Explanation:\\n\\n#### 1. **`display: -webkit-box;`**\\n- Enables the WebKit flexible box model (legacy syntax)\\n- Required for `-webkit-line-clamp` to function properly\\n- Foundation of the multi-line truncation system\\n\\n#### 2. **`-webkit-line-clamp: 3;` and `line-clamp: 3;`**\\n- Limits display to **3 lines maximum**\\n- `-webkit-line-clamp`: WebKit version (Safari, Chrome)\\n- `line-clamp`: Modern standard version\\n- Both included for cross-browser compatibility\\n\\n#### 3. **`-webkit-box-orient: vertical;`**\\n- Defines the orientation of \\"boxes\\" vertically\\n- Specifies that lines stack vertically\\n- Mandatory when using `-webkit-line-clamp`\\n\\n#### 4. **`overflow: hidden;`**\\n- Hides any content that exceeds the container\\n- Essential for concealing additional lines (beyond the 3rd)\\n\\n#### 5. **`text-overflow: ellipsis;`**\\n- Adds ellipsis (`...`) at the end of truncated text\\n- Only works with `overflow: hidden`\\n- Provides the visual \\"...\\" effect\\n\\n#### 6. **`margin-bottom: 0;`**\\n- Removes bottom margin from paragraphs\\n- Prevents unwanted spacing after truncated text\\n\\n#### 7. **`word-wrap: break-word;`**\\n- Allows long words to break when necessary\\n- Prevents words from overflowing container width\\n\\n#### 8. **`max-height: 4.5em;` and `line-height: 1.5em;`**\\n- **Fallback** for browsers that don\'t support `line-clamp`\\n- `4.5em = 3 lines \xd7 1.5em` per line\\n- Provides height limitation if `line-clamp` fails\\n\\n### Why Target `.truncate p`?\\n\\nThe selector specifically targets **paragraphs `<p>`** inside elements with the `.truncate` class. This approach provides:\\n\\n- **Precision**: Only text content gets truncated\\n- **Preservation**: Headings `<h1>`, `<h2>`, `<h3>` remain intact\\n- **Flexibility**: You can have non-truncated content in the same CardBody\\n\\n### basic Example:\\n\\n```jsx\\n<CardBody truncate> {/* = <true> */}\\n  <h3>Complete Title</h3>  {/* \u2190 Not truncated */}\\n  \\n  <p>                      {/* \u2190 Will be truncated */}\\n    Very long text that will be automatically \\n    truncated after 3 lines with ellipsis \\n    at the end...\\n  </p>\\n</CardBody>\\n```\\n\\n<Card className=\'margin-top--lg\'>\\n\\n\\n <CardImage style={{ backgroundColor: \'black\' , color:\'black\'}}cardImageUrl=\\"/img/card-component-docusaurus-infima.webp\\" />\\n\\n<CardBody style={{ backgroundColor: \'#40c43b\' , color:\'#3d521cff\'}} className=\\"padding-vert--md\\" textAlign=\'center\' Transform= \'uppercase\' truncate > \\n <h3>Docux Card component</h3>\\n \\nWelcome to DocuxLab, your space for tech discoveries, development tutorials, and tips to enhance your digital projects. Here, we break down code, explore web trends, and share practical resources for all tech enthusiasts. Explore our articles, guides, and interactive demos designed to help you stay at the forefront of innovation. Whether you are a beginner developer or an experienced pro, DocuxLab is here to inspire and support you in your digital projects.\\n </CardBody>  \\n <CardFooter style={{  backgroundColor: \'#d7de3d\' , color:\'#3d521cff\'}} > \\n\\n<div className=\\"avatar padding-top--md padding-bott--md\\">\\n        <img\\n          className=\\"avatar__photo\\"\\n          src=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" />\\n        <div className=\\"avatar__intro\\">\\n          <div className=\\"avatar__name\\">Docux</div>\\n          <small className=\\"avatar__subtitle\\">\\n          Curious explorer, a bit of a mad experimenter, and a bit of a contributor.\\n          </small>\\n        </div>\\n</div>\\n  </CardFooter> \\n</Card>\\n\\n\\nThis modern CSS technique provides effective multi-line truncation that works across different browsers and maintains clean, readable layouts in your card components.\\n\\n## Tricks and Tips\\n\\nThe columns are made according to the infima grid, they are hard coded on this page so that the card component is independent. But if you want to use an easy and quick system for managing your columns while using the Infima grid system look at our component [Columns component](/blog/card-component-docusaurus-infima/)"},{"id":"imageonclick-component-docusaurus-lightbox","metadata":{"permalink":"/blog/imageonclick-component-docusaurus-lightbox","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/09/04/Imageonclick/index.mdx","source":"@site/blog/2025/09/04/Imageonclick/index.mdx","title":"Component ImageOnClick","description":"A complete tutorial to create an interactive image lightbox component in Docusaurus. Includes React implementation, modern CSS animations, and responsive design.","date":"2025-09-05T00:00:00.000Z","tags":[{"inline":true,"label":"lightbox","permalink":"/blog/tags/lightbox"},{"inline":true,"label":"design","permalink":"/blog/tags/design"},{"inline":true,"label":"component","permalink":"/blog/tags/component"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"front-end","permalink":"/blog/tags/front-end"},{"inline":true,"label":"animation","permalink":"/blog/tags/animation"},{"inline":true,"label":"css","permalink":"/blog/tags/css"}],"readingTime":1.17,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Component ImageOnClick","description":"A complete tutorial to create an interactive image lightbox component in Docusaurus. Includes React implementation, modern CSS animations, and responsive design.","schemaTypes":["HowTo","BlogPosting"],"slug":"imageonclick-component-docusaurus-lightbox","image":"/img/imageonclick2.webp","authors":["docux"],"mainTag":"design","tags":["lightbox","design","component","tutorial","front-end","animation","css"],"date":"2025-09-05T00:00:00.000Z","last_update":{"date":"2025-09-05T00:00:00.000Z","author":"docux"},"difficulty":"Beginner","totalTime":"PT15M","prepTime":"PT3M","performTime":"PT12M","estimatedCost":"Free","tool":["React","Docusaurus","CSS","VSCode"],"supply":["Node.js","Docusaurus","React"],"yield":"Customizable and reusable ImageOnClick lightbox component","genre":"Technical Tutorial","inLanguage":"en","isAccessibleForFree":true,"readingTime":"10 min","articleSection":"Tutorial","copyrightYear":2025,"copyrightHolder":"Docux","category":"Web Development","keywords":["docusaurus","react","image","lightbox","modal","component","tutorial","front-end","animation","css"],"hide_table_of_contents":false,"series":"Design your site","blueSkyRecordKey":"3ly2zavvn4c2r"},"unlisted":false,"prevItem":{"title":"Component Card","permalink":"/blog/card-component-docusaurus-infima"},"nextItem":{"title":"Component Columns","permalink":"/blog/columns-component-docusaurus-infima"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Developement](https://img.shields.io/badge/Developement-validated-green.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 0%](https://img.shields.io/badge/AI-no-blue.svg)](https://github.com/Juniors017)\\n\\n![](/img/imageonclick2.webp)\\n\\n</div>\\n</center>\\n\\nAn amazing component to display your images on click! Lighten up your documentation presentations or blog articles - it\'s easy to implement and creates a clean, professional look.\\n\\n\x3c!--truncate--\x3e \\n\\n## Introduction\\n:::note Publication\\nThis article was originally published by DocuxLab on the [Docusaurus Community](https://community.docusaurus.io) and is republished here but here is an improved version.\\n:::\\nThe code for the component used for this functionality should be placed in `\\\\src\\\\components\\\\ImageOnClick\\\\index.js`.\\n\\n<Snippet filename=\\"src/components/ImageOnClick/index.js\\" source=\\"src/components/ImageOnClick/index.js\\" />\\n\\n\\n## CSS\\n\\nTo center the image and apply modern lightbox effects, we\'ll add some CSS:\\n\\n<Snippet filename=\\"src/components/ImageOnClick/styles.module.css\\" source=\\"src/components/ImageOnClick/styles.module.css\\" />\\n\\n\\n\\n\\n## Using the Component in an MDX File \\\\{#using}\\n\\n### Basic\\n\\n```html\\n<ImageOnClick imageUrl=\\"/img/friends.webp\\" altText=\\"Dinosaur\\" buttonName=\\"Click me\\" />\\n```\\n\\n<ImageOnClick imageUrl=\\"/img/friends.webp\\" altText=\\"Dinosaur\\" buttonName=\\"Click me\\" />\\n\\n### Emoji Button\\n\\n```html\\n<ImageOnClick imageUrl=\\"/img/friends.webp\\" altText=\\"Dinosaur\\" buttonName=\\"\u{1F50E}\\" />\\n```\\n\\nUsing markdown emoji: <ImageOnClick imageUrl=\\"/img/friends.webp\\" altText=\\"Dinosaur\\" buttonName=\\"\u{1F50E}\\" />\\n\\n<Tooltip model=\\"teacher\\" text=\\"Markdown\\" position=\\"top\\">\\nMarkdown is a lightweight markup language \\nwith plain-text-formatting \\nsyntax that can be converted \\nto HTML and many other formats.\\n</Tooltip>"},{"id":"columns-component-docusaurus-infima","metadata":{"permalink":"/blog/columns-component-docusaurus-infima","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/09/03/columnscomponent/index.mdx","source":"@site/blog/2025/09/03/columnscomponent/index.mdx","title":"Component Columns","description":"A complete tutorial to design and customize Columns components in Docusaurus, based on Infima grid system. Includes JS/TS examples, props, advanced layouts and best practices.","date":"2025-09-03T00:00:00.000Z","tags":[{"inline":true,"label":"columns","permalink":"/blog/tags/columns"},{"inline":true,"label":"grid","permalink":"/blog/tags/grid"},{"inline":true,"label":"layout","permalink":"/blog/tags/layout"},{"inline":true,"label":"infima","permalink":"/blog/tags/infima"},{"inline":true,"label":"component","permalink":"/blog/tags/component"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"front-end","permalink":"/blog/tags/front-end"},{"inline":true,"label":"customization","permalink":"/blog/tags/customization"}],"readingTime":10.5,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Component Columns","description":"A complete tutorial to design and customize Columns components in Docusaurus, based on Infima grid system. Includes JS/TS examples, props, advanced layouts and best practices.","schemaTypes":["HowTo","BlogPosting"],"slug":"columns-component-docusaurus-infima","image":"/img/columnscomponent.webp","authors":["docux"],"mainTag":"infima","tags":["columns","grid","layout","infima","component","tutorial","front-end","customization"],"date":"2025-09-03T00:00:00.000Z","last_update":{"date":"2025-09-03T00:00:00.000Z","author":"docux"},"difficulty":"Beginner to Intermediate","totalTime":"PT15M","prepTime":"PT3M","performTime":"PT12M","estimatedCost":"Free","tool":["React","Docusaurus","Infima","VSCode"],"supply":["Node.js","Docusaurus","Infima"],"yield":"Customizable and reusable Columns components","genre":"Technical Tutorial","inLanguage":"en","isAccessibleForFree":true,"readingTime":"10 min","articleSection":"Tutorial","copyrightYear":2025,"copyrightHolder":"Docux","category":"Web Development","keywords":["docusaurus","react","columns","grid","layout","infima","component","tutorial","front-end","customization"],"hide_table_of_contents":false,"series":"infima components","blueSkyRecordKey":"3lxxg43yei22z"},"unlisted":false,"prevItem":{"title":"Component ImageOnClick","permalink":"/blog/imageonclick-component-docusaurus-lightbox"},"nextItem":{"title":"Component Avatar","permalink":"/blog/avatarcomponent-docusaurus-infima"}},"content":"<center>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Developement](https://img.shields.io/badge/Developement-validated-green.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 0%](https://img.shields.io/badge/AI-no-blue.svg)](https://github.com/Juniors017)\\n[![Documentation](https://img.shields.io/badge/Documentation-validated-green.svg)](https://github.com/Juniors017/docux-blog/tree/main/src/components/columns)\\n\\n![](/img/columnscomponent.webp)\\n</center>\\n\\n:::note Publication\\nThis article was originally published by DocuxLab on the [Docusaurus Community](https://community.docusaurus.io) and is republished here.\\n:::\\n\\n\\nThis custom component consists of two parts:\\n\\n* A component for the container and the rows, \\n* The columns you want to create.\\n\x3c!--truncate--\x3e \\nThis is what will allow us to benefit from on demand columns.\\nThe code for the component used for this functionality for should be placed in `\\\\src\\\\components\\\\Columns\\\\index.*`.\\n\\nDocusaurus uses the Infima framework for styling layout. The components described here are fully based on the Infima grid system. More detail on the Infima grid can be found in the [Infima docs](https://infima.dev/docs/layout/grid)\\n\\n## Creating the Container and Row Component\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size={24} /> </>}>\\n    ```jsx title=\\"src\\\\components\\\\Columns\\\\index.js\\"\\n    import React from \'react\';\\n    // Import clsx library for conditional classes.\\n    import clsx from \'clsx\'; \\n    // Define the Columns component as a function \\n    // with children, className, and style as properties\\n    // className will allow you to pass either your custom classes or the native infima classes https://infima.dev/docs/layout/grid.\\n    // Style\\" will allow you to either pass your custom styles directly, which can be an alternative to the \\"styles.module.css\\" file in certain cases.\\n    export default function Columns({ children , className , style }) {\\n      return (\\n        // This section encompasses the columns that we will integrate with children from a dedicated component to allow the addition of columns as needed \\n        <div className=\\"container center\\">\\n              <div className={clsx(\'row\' , className)} style={style}} > \\n                {children}    \\n            </div>\\n        </div> \\n      );\\n    }\\n    ```\\n  </TabItem>\\n  <TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size={24} /> </>}>\\n    ```tsx title=\\"src\\\\components\\\\Columns\\\\index.tsx\\"\\n    import React, { ReactNode, CSSProperties } from \'react\';\\n    // Import clsx library for conditional classes.\\n    import clsx from \'clsx\'; \\n    interface ColumnsProps {\\n      children: ReactNode;\\n      className?: string;\\n      style?: CSSProperties;\\n    }\\n    // Define the Columns component as a function \\n    // with children, className, and style as properties\\n    // className will allow you to pass either your custom classes or the native infima classes https://infima.dev/docs/layout/grid.\\n    // Style\\" will allow you to either pass your custom styles directly, which can be an alternative to the \\"styles.module.css\\" file in certain cases.\\n    export default function Columns({ children, className, style }: ColumnsProps) {\\n      return (\\n      // This section encompasses the columns that we will integrate with children from a dedicated component to allow the addition of columns as needed \\n        <div className=\\"container center\\">\\n          <div className={clsx(\'row\', className)} style={style}>\\n            {children}    \\n          </div>\\n        </div>\\n      );\\n    }\\n    ```\\n  </TabItem>\\n</Tabs>\\n\\n## Creating the Column Component\\n\\nThe code for the component used for this functionality for should be placed in `\\\\src\\\\components\\\\Column\\\\index.*`.\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size={24} /> </>}>\\n    ```jsx title=\\"src\\\\components\\\\Column\\\\index.js\\"\\n    import React from \'react\';\\n    // Import clsx library for conditional classes.\\n    import clsx from \'clsx\'; \\n  \\n    // Define the Column component as a function \\n    // with children, className, style as properties\\n    // Look https://infima.dev/docs/ for learn more\\n    // Style only affects the element inside the column, but we could have also made the same distinction as for the classes.\\n    export default function Column({ children , className, style  }) {\\n      return (\\n      \\n          <div className={clsx(\'col\' , className)} style={style}>\\n            {children}\\n          </div>\\n      \\n      );\\n    }\\n    ```\\n  </TabItem>\\n  <TabItem value=\\"TS\\">\\n    ```tsx title=\\"src\\\\components\\\\Column\\\\index.tsx\\"\\n    import React, { ReactNode, CSSProperties } from \'react\';\\n    // Import clsx library for conditional classes.\\n    import clsx from \'clsx\'; \\n   \\n    interface ColumnProps {\\n      children: ReactNode;\\n      className?: string;\\n      style?: CSSProperties;\\n    }\\n    // Define the Column component as a function \\n    // with children, className, style as properties\\n    // Look https://infima.dev/docs/ for learn more.\\n    // Style only affects the element inside the column, but we could have also made the same distinction as for the classes.\\n    export default function Column({ children, className, style }: ColumnProps) {\\n      return (\\n      \\n          <div className={clsx(\'col\', className)} style={style}>\\n            {children}\\n          </div>\\n      \\n      );\\n    }\\n    ```\\n  </TabItem>\\n</Tabs>\\n\\nThis component is actually very simple but truly powerful because it utilizes native infima component classes to create columns in Docusaurus.\\n\\n## MDX Component Scope\\nTo follow the Docusaurus documentation, we create a theme folder that will host the `MDXComponents` file. This gives us `src\\\\theme\\\\MDXComponents.*`. You may already have a `src\\\\theme` folder or an `MDXComponents` file if so - merge the changes described here with yours.\\n\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size={24} /> </>}>\\n    ```javascript title=\\"src\\\\theme\\\\MDXComponents.js\\"\\n      import React from \'react\';\\n      // Importing the original mapper + our components according to the Docusaurus doc\\n      import MDXComponents from \'@theme-original/MDXComponents\';\\n      import Columns from \'@site/src/components/Columns\';\\n      import Column from \'@site/src/components/Column\';\\n      export default {\\n        // Reusing the default mapping\\n        ...MDXComponents,\\n        Columns,\\n        Column,\\n      };\\n    ```\\n  </TabItem>\\n  <TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size={24} /> </>}>\\n    ```tsx title=\\"src\\\\theme\\\\MDXComponents.tsx\\"\\n      import MDXComponents from \'@theme-original/MDXComponents\'\\n      import Columns from \'@site/src/components/Columns\';\\n      import Column from \'@site/src/components/Column\';\\n      export default {\\n        // Reusing the default mapping\\n        ...MDXComponents,\\n        Columns,\\n        Column,\\n      };\\n    ```\\n  </TabItem>\\n</Tabs>\\n\\n## Using the Component in an MDX File \\\\{#using}\\n\\n### Example With Text - Source\\n\\n```html\\n<Columns> \\n  <Column className=\'text--left\'>\\n    #### My First Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc.\\n  </Column>\\n  <Column className=\'text--center\'>\\n    #### My Second Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc.\\n  </Column>\\n  <Column className=\'text--justify\'>\\n    #### My Third Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc.\\n  </Column>\\n</Columns>\\n```\\n\\n### Example With Text - Result\\n\\n<Columns> \\n  <Column className=\'text--left\'>\\n    #### My First Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc.\\n  </Column>\\n  <Column className=\'text--center\'>\\n    #### My Second Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc.\\n  </Column>\\n  <Column className=\'text--justify\'>\\n    #### My Third Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc.\\n  </Column>\\n</Columns>\\n\\n### Example With Image - Source\\n\\n```html\\n<Columns> \\n  <Column className=\'text--center\'>\\n    ![](/img/logo.svg)\\n  </Column>\\n  <Column className=\'text--justify\'> \\n    #### My text column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nuncSit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc.\\n  </Column>\\n</Columns>\\n```\\n\\n### Example With Picture - Result\\n\\n<Columns> \\n  <Column className=\'text--center\'>\\n    ![](/img/logo.svg)\\n  </Column>\\n  <Column className=\'text--justify\'> \\n    #### My text column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nuncSit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc.\\n  </Column>\\n</Columns>\\n\\n### Example With Code Block - Source\\n\\n````tsx \\n<Columns> \\n  <Column className=\'col--8\'> \\n    ```ts\\n    import React from \'react\';\\n    import clsx from \'clsx\';\\n    import styles from \'./styles.module.scss\';\\n    import Link from \'@docusaurus/Link\';\\n    import DocusaurusLogo from \'@site/src/assets/Docusaurus.svg\'\\n\\n    type Props = {\\n        to: string;\\n        label: string;\\n    };\\n\\n    export default function DocusaurusButton(props: Props): JSX.Element {\\n    return (\\n      <div className={clsx(styles.docusaurusButton, \'text--center\')}>\\n        <p className=\\"text--center\\">\\n          <Link className={clsx(styles.docusaurusButtonButton, \\n          \'button button--secondary button--lg\')} to={props.to}>\\n            <span className={styles.docusaurusButtonIcon}><DocusaurusLogo /></span>\\n            <span className={styles.docusaurusButtonText}>{props.label}</span>\\n          </Link>\\n        </p>\\n      </div>\\n      );\\n    }\\n    ```\\n    </Column>\\n    <Column>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nuncSit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc. \\n    </Column>\\n</Columns>\\n````\\n\\n### Example With Code Block - Result\\n\\n<Columns> \\n  <Column className=\'col--8\'> \\n    ```ts\\n    import React from \'react\';\\n    import clsx from \'clsx\';\\n    import styles from \'./styles.module.scss\';\\n    import Link from \'@docusaurus/Link\';\\n    import DocusaurusLogo from \'@site/src/assets/Docusaurus.svg\'\\n\\n    type Props = {\\n      to: string;\\n      label: string;\\n    };\\n\\n    export default function DocusaurusButton(props: Props): JSX.Element {\\n    return (\\n      <div className={clsx(styles.docusaurusButton, \'text--center\')}>\\n        <p className=\\"text--center\\">\\n          <Link className={clsx(styles.docusaurusButtonButton, \\n          \'button button--secondary button--lg\')} to={props.to}>\\n            <span className={styles.docusaurusButtonIcon}><DocusaurusLogo /></span>\\n            <span className={styles.docusaurusButtonText}>{props.label}</span>\\n          </Link>\\n        </p>\\n      </div>\\n      );\\n    }\\n    ```\\n    </Column>\\n    <Column>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nuncSit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc. \\n    </Column>\\n</Columns>\\n\\n### Example Classes and Styling - Source\\n\\n```html\\n<Columns className=\'  padding--lg margin-bottom-xl \'> \\n  <Column className=\'text--success text--bold text--justify  item shadow--tl padding--lg\'> \\n    #### My First Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \\n    A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. \\n    Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc. \\n  </Column>\\n  <Column className=\'text--success text--bold text--justify  item shadow--tl padding--lg margin-top--xl\'  style={{ backgroundColor: \'green\', color: \'yellow\'  }}>\\n    #### My Second Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \\n    A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. \\n    Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc. \\n  </Column>\\n</Columns>\\n```\\n\\n### Example Classes and Styling - Result\\n\\n<Columns className=\'  padding--lg margin-bottom-xl \'> \\n  <Column className=\'text--success  text--bold text--justify  item shadow--tl padding--lg\'> \\n    #### My First Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \\n    A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. \\n    Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc. \\n  </Column>\\n  <Column className=\'text--success text--bold text--justify  item shadow--tl padding--lg margin-top--xl\'  style={{ backgroundColor: \'green\', color: \'yellow\'  }}>\\n    #### My Second Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \\n    A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. \\n    Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc. \\n  </Column>\\n</Columns>\\n\\n### Example Offsets - Source\\n\\n```html\\n<Columns> \\n  <Column className=\'text--center col--2 col--offset-2\'> \\n    ![](/img/logo.svg)\\n  </Column>\\n  <Column className=\'text--justify col--6 col--offset-1\'> \\n    #### My Text Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n    A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. \\n    Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc. \\n  </Column>\\n</Columns>\\n```\\n\\n### Example Offsets - Result\\n\\n<Columns> \\n  <Column className=\'text--center col--2 col--offset-2\'> \\n    ![](/img/logo.svg)\\n  </Column>\\n  <Column className=\'text--justify col--6 col--offset-1\'> \\n    #### My Text Column\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n    A diam maecenas sed enim ut. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. \\n    Sit amet porttitor eget dolor morbi. Varius vel pharetra vel turpis nunc. \\n  </Column>\\n</Columns>"},{"id":"avatarcomponent-docusaurus-infima","metadata":{"permalink":"/blog/avatarcomponent-docusaurus-infima","editUrl":"https://github.com/Juniors017/docux-blog/tree/main/blog/2025/08/29/avatarcomponent/index.mdx","source":"@site/blog/2025/08/29/avatarcomponent/index.mdx","title":"Component Avatar","description":"A complete tutorial to design and customize an Avatar component in Docusaurus, based on Infima. Includes JS/TS examples, props, advanced integration and best practices.","date":"2025-08-29T00:00:00.000Z","tags":[{"inline":true,"label":"avatar","permalink":"/blog/tags/avatar"},{"inline":true,"label":"infima","permalink":"/blog/tags/infima"},{"inline":true,"label":"component","permalink":"/blog/tags/component"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"},{"inline":true,"label":"front-end","permalink":"/blog/tags/front-end"},{"inline":true,"label":"customization","permalink":"/blog/tags/customization"}],"readingTime":20.23,"hasTruncateMarker":true,"authors":[{"name":"Docux","title":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor.","url":"https://docuxlab.com","page":{"permalink":"/blog/authors/docux"},"socials":{"github":"https://github.com/Juniors017","bluesky":"https://bsky.app/profile/docuxlab.com"},"bio":"Curious explorer, a bit of a mad experimenter, and a bit of a contributor for Docusaurus. I love creating tools to improve productivity and user experience.\\nAnd sharing my discoveries with the community.\\n","imageURL":"https://avatars.githubusercontent.com/u/97809069?v=4","key":"docux"}],"frontMatter":{"title":"Component Avatar","description":"A complete tutorial to design and customize an Avatar component in Docusaurus, based on Infima. Includes JS/TS examples, props, advanced integration and best practices.","schemaTypes":["HowTo","BlogPosting"],"slug":"avatarcomponent-docusaurus-infima","image":"/img/timeline.webp","authors":["docux"],"mainTag":"infima","tags":["avatar","infima","component","tutorial","front-end","customization"],"date":"2025-08-29T00:00:00.000Z","last_update":{"date":"2025-08-29T00:00:00.000Z","author":"docux"},"difficulty":"Beginner to Intermediate","totalTime":"PT10M","prepTime":"PT2M","performTime":"PT8M","estimatedCost":"Free","tool":["React","Docusaurus","Infima","VSCode"],"supply":["Node.js","Docusaurus","Infima"],"yield":"Customizable and reusable Avatar component","genre":"Technical Tutorial","inLanguage":"en","isAccessibleForFree":true,"readingTime":"7 min","articleSection":"Tutorial","copyrightYear":2025,"copyrightHolder":"Docux","category":"Web Development","keywords":["avatar","infima","component","tutorial","front-end","customization"],"hide_table_of_contents":false,"series":"infima components","blueSkyRecordKey":"3lxoqtinrbc2g"},"unlisted":false,"prevItem":{"title":"Component Columns","permalink":"/blog/columns-component-docusaurus-infima"}},"content":"<center>\\n<div>\\n[![Developer](https://img.shields.io/badge/Developer-Docux-green.svg)](https://github.com/Juniors017)\\n[![Developement](https://img.shields.io/badge/Developement-validated-green.svg)](https://github.com/Juniors017)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![AI 0%](https://img.shields.io/badge/AI-no-blue.svg)](https://github.com/Juniors017)\\n[![Documentation](https://img.shields.io/badge/Documentation-validated-green.svg)](https://github.com/Juniors017/docux-blog/tree/main/src/components/)\\n</div>\\n\\n![infima avatar component](/img/timeline.webp)\\n</center>\\n\\n\\nThe [Infima CSS framework](https://infima.dev/) provides a set of utility classNames that can be used to stylize avatar in Docusaurus. \\nThis article will cover how to create a reusable avatar component for your Docusaurus site which can be personalized with different colors, orientations and sizes. \\nThe component will create all the avatar design available in Infima and \\"Custom\\" disposition, you will be able to create and personalize each avatar independently of each other\\n\x3c!--truncate--\x3e \\n\\nDocusaurus uses the Infima framework for styling layout. The components described here are fully based on the Infima avatar system. More detail on the Infima avatar can be found in the [Infima docs](https://infima.dev/docs/components/avatar)\\n\\nThe component is in fact a set of small components that will admit to form the Avatar.\\n\\n## Avatar : composition of the master folder\\n - AvatarContainer (The container of alls parts)\\n - AvatarImage component (Image parts of Avatar)\\n - AvatarIntro component (Intro parts of Avatar)\\n - AvatarName component (Name parts of Avatar)\\n - AvatarSubtitle component (Subtitle parts of Avatar)\\n\\n We will discover that it pairs wonderfully with other components present in our library but this will be the subject of a dedicated page. \\n\\n## Creating the Avatar component \\nThink of this component as the container of all Avatar parts\\n\\nFirst we will create the master folder in:  `\\\\src\\\\components\\\\Avatar\\\\`. Next we will start by creating a new component called Avatar. It will be the container component of our different parts to come. Also this will give the possibility to manage className and style for each part.\\n\\nThe component will accept the following props:\\n\\n- `vertical`: if you want to change orientation.\\n\\nCreating the file and adding the source code for the component.\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"logos:javascript\\" size={24} /> </>}>\\n\\n```javascript title=\'\\\\src\\\\components\\\\Avatar\\\\AvatarContainer\\\\index.js\'\\nimport React,  { CSSProperties } from \'react\';\\nimport clsx from \'clsx\'; \\n\\nconst AvatarContainer = ({\\n  className, // Custom classes for the component\\n  style, // Custom styles for the component\\n  children, // Content of the component\\n  vertical = false, // Default to false for vertical position\\n  \\n}) => {   \\n  const avatarPosition = vertical ? `avatar--vertical` :\'\';\\n  \\n  return (\\n    <div className={clsx(\\n          \\"avatar\\", \\n          className,  \\n          avatarPosition\\n        )} \\n        \\n        style={style}>\\n   \\n    {children}\\n  </div>\\n  );\\n}\\n\\nexport default AvatarContainer ;\\n  \\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"logos:typescript-icon\\" size={24} /> </>}>\\n\\n```tsx title=\'\\\\src\\\\components\\\\Avatar\\\\AvatarContainer\\\\index.tsx\'\\nimport React, { CSSProperties, ReactNode } from \'react\';\\nimport clsx from \'clsx\';\\n\\ninterface AvatarContainerProps {\\n  className?: string; // Custom classes for the component\\n  style?: CSSProperties; // Custom styles for the component\\n  children: ReactNode; // Content of the component\\n  vertical?: boolean; // Option for vertical position\\n}\\n\\nconst AvatarContainer: React.FC<AvatarContainerProps> = ({\\n  className, // Custom classes for the component\\n  style, // Custom styles for the component\\n  children, // Content of the component\\n  vertical = false, // Default to false for vertical position\\n}) => {   \\n  const avatarPosition = vertical ? \'avatar--vertical\' : \'\';\\n\\n  return (\\n    <div className={clsx(\\n          \\"avatar\\", \\n          className, \\n          avatarPosition\\n        )} \\n        \\n        style={style}>\\n\\n      {children}\\n    </div>\\n  );\\n}\\n\\nexport default AvatarContainer;\\n\\n```\\n</TabItem>\\n\\n</Tabs>\\n\\n## Creating the AvatarImage component\\nThink of this component as the image of your futurs avatar element. Creating the file and adding the source code for the component.The component will accept the following props:\\n\\n- `avatarImageUrl`: The url of your image\\n- `avatarSize`: The option for avatar image size\\n- `alt`: The alt image text\\n- `title`: The title of image\\n- `link`: The option is for add link on your image, if link = true the component add link code and add Infima className `avatar__photo-link`\\n- `destination`: The option is if link is true for add url of link\\n\\nCreating the file and adding the source code for the component.\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"logos:javascript\\" size={24} /> </>}>\\n\\n```javascript title=\'\\\\src\\\\components\\\\Avatar\\\\AvatarImage\\\\index.js\'\\nimport React, { CSSProperties } from \'react\';\\nimport clsx from \'clsx\'; \\nimport useBaseUrl from \'@docusaurus/useBaseUrl\'; // Import the useBaseUrl function from Docusaurus for generate valide image url\\n\\nconst AvatarImage = ({\\n  className, // Custom classes for the component\\n  style, // Custom styles for the component\\n  avatarImageUrl, // URL of the avatar image\\n  alt, // Alt text for the image\\n  title, // Title text for the image\\n  link = false, // Default to false Determines if the image should be a link\\n  destination = \'#\', // Link URL if link = true, default value if destination is not provided\\n  avatarSize, // Size class for the avatar image\\n}) => {   \\n\\n  const generatedAvatarUrl = useBaseUrl(avatarImageUrl);\\n  const avatarimagesize = avatarSize ? `avatar__photo--${avatarSize}` :\'\';\\n  const imgElement = (\\n\\n    <img\\n      className={clsx(\\n        \\"avatar__photo\\", \\n        className, \\n        avatarimagesize\\n      )} \\n      \\n      style={style}\\n\\n      src={generatedAvatarUrl} \\n      alt={alt} \\n      title={title} />\\n\\n  );\\n\\n  return link ? (\\n    <a\\n      className=\\"avatar__photo-link \\"\\n      href={destination}>\\n      {imgElement}\\n    </a>\\n  ) : (\\n    imgElement\\n  );\\n};\\n\\nexport default AvatarImage;\\n  \\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size={24} /> </>}>\\n\\n```tsx title=\'\\\\src\\\\components\\\\Avatar\\\\AvatarImage\\\\index.tsx\'\\nimport React, { CSSProperties } from \'react\';\\nimport clsx from \'clsx\'; \\nimport useBaseUrl from \'@docusaurus/useBaseUrl\'; // Import the useBaseUrl function from Docusaurus for generate valide image url\\n\\ninterface AvatarImageProps {\\n  className?: string; // Custom classes for the component\\n  style?: CSSProperties; // Custom styles for the component\\n  avatarImageUrl: string; // URL of the avatar image\\n  alt: string; // Alt text for the image\\n  title?: string; // Title text for the image\\n  link?: boolean; // Determines if the image should be a link\\n  destination?: string; // Link URL if link = true\\n  avatarSize?: string; // Size class for the avatar image\\n}\\n\\nconst AvatarImage: React.FC<AvatarImageProps> = ({\\n  className, // Custom classes for the component\\n  style, // Custom styles for the component\\n  avatarImageUrl, // URL of the avatar image\\n  alt, // Alt text for the image\\n  title, // Title text for the image\\n  link = false, // Default to false Determines if the image should be a link\\n  destination = \'#\', // Link URL if link = true, default value if destination is not provided\\n  avatarSize, // Size class for the avatar image\\n}) => {   \\n  const generatedAvatarUrl = useBaseUrl(avatarImageUrl);\\n  const avatarImageSizeClass = avatarSize ? `avatar__photo--${avatarSize}` : \'\';\\n  \\n  const imgElement = (\\n    <img\\n      className={clsx(\\n        \\"avatar__photo\\", \\n        className, \\n        avatarImageSizeClass\\n      )}\\n\\n      style={style}\\n      src={generatedAvatarUrl}\\n      alt={alt}\\n      title={title}\\n\\n    />\\n  );\\n\\n  return link ? (\\n    <a className=\\"avatar__photo-link\\" href={destination}>\\n      {imgElement}\\n    </a>\\n  ) : (\\n    imgElement\\n  );\\n};\\n\\nexport default AvatarImage;\\n\\n\\n```\\n</TabItem>\\n\\n</Tabs>\\n\\n\\n## Creating the AvatarIntro component\\nThink of this component as the container of name and subtitle for your futurs avatar element. Creating the file and adding the source code for the component. The component will accept the following props:\\n\\n- `textAlign`: The option for text alignment `left` `right` `center` `justify`\\n- `variant`: (optional)This will be used to apply different colors to the text based on the Infima CSS utility classNames.\\n- `italic`: Default value is false, it\'s for italic text render\\n- `noDecoration`: Default value is false, it\'s for delete text decoration \\n- `transform`: The option for transform text to `UPPERCASE TEXT` `lowercase text` or `Capitalize Text` \\n- `breakWord`: The option for break text, the text will break at the a word boundary so it will not break in the middle of a word. \\n- `truncate`: The option is for very long text that will be truncated if there is not enough space to display it in a single line on the screen. It\'s truncated by adding... \\n- `weight`: The option for text weight `Bold` `Semibold` `Normal` `Light`\\n\\nCreating the file and adding the source code for the component.\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size={24} /> </>}>\\n\\n```javascript title=\'\\\\src\\\\components\\\\Avatar\\\\AvatarIntro\\\\index.js\'\\nimport React,  { CSSProperties } from \'react\';\\nimport clsx from \'clsx\'; \\n\\n\\nconst AvatarIntro = ({\\n  className, // Custom classes for the component\\n  style, // Custom styles for the component\\n  children, // Content of the component\\n  textAlign, // Text alignment \\n  variant, // Variant for text color \\n  italic = false, // Default to false for italic text\\n  noDecoration = false, // Default to false for no decoration\\n  transform, // Text transform option \\n  breakWord = false, // Default to false for break words\\n  truncate = false, // Default to false for truncate\\n  weight, // Weight of the text \\n}) => {   \\n\\n  const textAlignClass = textAlign ? `text--${textAlign}` :\'\';\\n  const textColor = variant ? `text--${variant}` : \'\';\\n  const textItalic = italic ? \'text--italic\' : \'\';\\n  const textDecoration = noDecoration ? \'text-no-decoration\' : \'\';\\n  const textType = transform ? `text--${transform}` : \'\';\\n  const textBreak = breakWord ? \'text--break\' : \'\';\\n  const textTruncate = truncate ? \'text--truncate\' : \'\';\\n  const textWeight = weight ? `text--${weight}` : \'\';\\n  \\n  return (\\n  \\n    <div className={clsx(\\n        \\"avatar__intro\\", \\n        className, \\n        textAlignClass, \\n        textType, \\n        textColor, \\n        textItalic, \\n        textDecoration, \\n        textBreak, \\n        textTruncate, \\n        textWeight\\n    )} \\n\\n    style={style}\\n    >\\n     {children}\\n\\n    </div>\\n\\n  );\\n}\\n\\nexport default AvatarIntro ;\\n\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"logos:typescript-icon\\" size={24} /> </>}>\\n\\n```tsx title=\'\\\\src\\\\components\\\\Avatar\\\\AvatarIntro\\\\index.tsx\'\\nimport React, { CSSProperties, ReactNode } from \'react\';\\nimport clsx from \'clsx\'; \\n\\ninterface AvatarIntroProps {\\n  className?: string; // Custom classes for the component\\n  style?: CSSProperties; // Custom styles for the component\\n  children: ReactNode; // Content of the component\\n  textAlign?: \'left\' | \'center\' | \'right\'; // Text alignment options\\n  variant?: \'primary\' | \'secondary\' | \'danger\' | \'warning\' | \'success\' | \'info\' | \'link\' | string;\\n  italic?: boolean; // Determines if the text is italic\\n  noDecoration?: boolean; // Determines if the text has no decoration\\n  transform?: string; // Text transform option\\n  breakWord?: boolean; // Determines if the text breaks words\\n  truncate?: boolean; // Determines if the text is truncated\\n  weight?: string; // Weight of the text \\n}\\n\\nconst AvatarIntro: React.FC<AvatarIntroProps> = ({\\n  className, // Custom classes for the component\\n  style, // Custom styles for the component\\n  children, // Content of the component\\n  textAlign, // Text alignment \\n  variant, // Variant for text color or style\\n  italic = false, // Default to false for italic text\\n  noDecoration = false, // Default to false for no decoration\\n  transform, // Text transform option\\n  breakWord = false, // Default to false for break words\\n  truncate = false, // Default to false for truncate\\n  weight, // Weight of the text \\n}) => {   \\n\\n  const textAlignClass = textAlign ? `text--${textAlign}` : \'\';\\n  const textColor = variant ? `text--${variant}` : \'\';\\n  const textItalic = italic ? \'text--italic\' : \'\';\\n  const textDecoration = noDecoration ? \'text-no-decoration\' : \'\';\\n  const textType = transform ? `text--${transform}` : \'\';\\n  const textBreak = breakWord ? \'text--break\' : \'\';\\n  const textTruncate = truncate ? \'text--truncate\' : \'\';\\n  const textWeight = weight ? `text--${weight}` : \'\';\\n  \\n  return (\\n    <div \\n      className={clsx(\\n          \\"avatar__intro\\",\\n          className,\\n          textAlignClass,\\n          textType,\\n          textColor,\\n          textItalic,\\n          textDecoration,\\n          textBreak,\\n          textTruncate,\\n          textWeight\\n      )}\\n      style={style}\\n    >\\n      {children}\\n    </div>\\n  );\\n}\\n\\nexport default AvatarIntro;\\n\\n\\n```\\n</TabItem>\\n\\n</Tabs>\\n\\n\\n\\n## Creating the AvatarName component\\nThink of this component as the Name or pseudonym of your futurs avatar element. Creating the file and adding the source code for the component. The component will accept the following props:\\n\\n- `textAlign`: The option for text alignment `left` `right` `center` `justify`\\n- `variant`: (optional)This will be used to apply different colors to the text based on the Infima CSS utility classNames.\\n- `italic`: Default value is false, it\'s for italic text render\\n- `noDecoration`: Default value is false, it\'s for delete text decoration \\n- `transform`: The option for transform text to `UPPERCASE TEXT` `lowercase text` or `Capitalize Text` \\n- `breakWord`: The option for break text, the text will break at the a word boundary so it will not break in the middle of a word. \\n- `truncate`: The option is for very long text that will be truncated if there is not enough space to display it in a single line on the screen. It\'s truncated by adding... \\n- `weight`: The option for text weight `Bold` `Semibold` `Normal` `Light`\\n\\nCreating the file and adding the source code for the component.\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size={24} /> </>}>\\n\\n```javascript title=\'\\\\src\\\\components\\\\Avatar\\\\AvatarName\\\\index.js\'\\nimport React,  { CSSProperties } from \'react\';\\nimport clsx from \'clsx\'; // Assurez-vous d\'avoir clsx install\xe9 et import\xe9 correctement\\n\\n\\nconst AvatarName = ({\\n  className, // Custom classes for the component\\n  style, // Custom styles for the component\\n  children, // Content of the component\\n  textAlign, // Text alignment \\n  variant, // Variant for text color or style\\n  italic = false, // Default to false for italic text\\n  noDecoration = false, // Default to false for no decoration\\n  transform, // Text transform option\\n  breakWord = false, // Default to false for break words\\n  truncate = false, // Default to false for truncate\\n  weight, // Weight of the text \\n  }) => {   \\n    const textAlignClass = textAlign ? `text--${textAlign}` :\'\';\\n    const textColor = variant ? `text--${variant}` : \'\';\\n    const textItalic = italic ? \'text--italic\' : \'\';\\n    const textDecoration = noDecoration ? \'text-no-decoration\' : \'\';\\n    const textType = transform ? `text--${transform}` : \'\';\\n    const textBreak = breakWord ? \'text--break\' : \'\';\\n    const textTruncate = truncate ? \'text--truncate\' : \'\';\\n    const textWeight = weight ? `text--${weight}` : \'\';\\n  return (\\n  \\n    <div className={clsx(\\n        \\"avatar__name\\", \\n        className, \\n        textAlignClass, \\n        textType, \\n        textColor, \\n        textItalic, \\n        textDecoration, \\n        textBreak, \\n        textTruncate, \\n        textWeight\\n    )} \\n    style={style}>\\n\\n     {children}\\n    </div>\\n\\n  );\\n}\\n\\nexport default AvatarName ;\\n\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size={24} /> </>}>\\n\\n```tsx title=\'\\\\src\\\\components\\\\Avatar\\\\AvatarName\\\\index.tsx\'\\nimport React, { CSSProperties, ReactNode } from \'react\';\\nimport clsx from \'clsx\'; \\n\\ninterface AvatarNameProps {\\n  className?: string; // Custom classes for the component\\n  style?: CSSProperties; // Custom styles for the component\\n  children: ReactNode; // Content of the component\\n  textAlign?: \'left\' | \'center\' | \'right\'; // Text alignment options\\n  variant?: \'primary\' | \'secondary\' | \'danger\' | \'warning\' | \'success\' | \'info\' | \'link\' | string;\\n  italic?: boolean; // Determines if the text is italic\\n  noDecoration?: boolean; // Determines if the text has no decoration\\n  transform?: string; // Text transform option \\n  breakWord?: boolean; // Determines if the text breaks words\\n  truncate?: boolean; // Determines if the text is truncated\\n  weight?: string; // Weight of the text\\n}\\n\\nconst AvatarName: React.FC<AvatarNameProps> = ({\\n  className, // Custom classes for the component\\n  style, // Custom styles for the component\\n  children, // Content of the component\\n  textAlign, // Text alignment \\n  variant, // Variant for text color or style\\n  italic = false, // Default to false for italic text\\n  noDecoration = false, // Default to false for no decoration\\n  transform, // Text transform option\\n  breakWord = false, // Default to false for break words\\n  truncate = false, // Default to false for truncate\\n  weight, // Weight of the text \\n}) => {   \\n  const textAlignClass = textAlign ? `text--${textAlign}` : \'\';\\n  const textColor = variant ? `text--${variant}` : \'\';\\n  const textItalic = italic ? \'text--italic\' : \'\';\\n  const textDecoration = noDecoration ? \'text-no-decoration\' : \'\';\\n  const textType = transform ? `text--${transform}` : \'\';\\n  const textBreak = breakWord ? \'text--break\' : \'\';\\n  const textTruncate = truncate ? \'text--truncate\' : \'\';\\n  const textWeight = weight ? `text--${weight}` : \'\';\\n  \\n  return (\\n    <div \\n      className={clsx(\\n        \\"avatar__name\\", \\n        className, \\n        textAlignClass, \\n        textType, \\n        textColor, \\n        textItalic, \\n        textDecoration, \\n        textBreak, \\n        textTruncate, \\n        textWeight\\n      )} \\n      style={style}\\n    >\\n      {children}\\n    </div>\\n  );\\n}\\n\\nexport default AvatarName;\\n\\n\\n```\\n</TabItem>\\n\\n</Tabs>\\n\\n\\n## Creating the AvatarSubtitle component\\nThink of this component as the Subtitle (for exemple : Company Position at the company or bio) of your futurs avatar element. Creating the file and adding the source code for the component. The component will accept the following props:\\n\\n- `textAlign`: The option for text alignment `left` `right` `center` `justify`\\n- `variant`: (optional)This will be used to apply different colors to the text based on the Infima CSS utility classNames.\\n- `italic`: Default value is false, it\'s for italic text render\\n- `noDecoration`: Default value is false, it\'s for delete text decoration \\n- `transform`: The option for transform text to `UPPERCASE TEXT` `lowercase text` or `Capitalize Text` \\n- `breakWord`: The option for break text, the text will break at the a word boundary so it will not break in the middle of a word. \\n- `truncate`: The option is for very long text that will be truncated if there is not enough space to display it in a single line on the screen. It\'s truncated by adding... \\n- `weight`: The option for text weight `Bold` `Semibold` `Normal` `Light`\\n\\nCreating the file and adding the source code for the component.\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size={24} /> </>}>\\n\\n```javascript title=\'\\\\src\\\\components\\\\Avatar\\\\AvatarSubtitle\\\\index.js\'\\nimport React,  { CSSProperties } from \'react\';\\nimport clsx from \'clsx\'; \\n\\n\\nconst AvatarSubtitle = ({\\n  className, // Custom classes for the component\\n  style, // Custom styles for the component\\n  children, // Content of the component\\n  textAlign, // Text alignment\\n  variant, // Variant for text color or style\\n  italic = false, // Default to false for italic text\\n  noDecoration = false, // Default to false for no decoration\\n  transform, // Text transform option\\n  breakWord = false, // Default to false for break words\\n  truncate = false, // Default to false for truncate\\n  weight, // Weight of the text \\n  }) => {   \\n    const text = textAlign ? `text--${textAlign}` :\'\';\\n    const textColor = variant ? `text--${variant}` : \'\';\\n    const textItalic = italic ? \'text--italic\' : \'\';\\n    const textDecoration = noDecoration ? \'text-no-decoration\' : \'\';\\n    const textType = transform ? `text--${transform}` : \'\';\\n    const textBreak = breakWord ? \'text--break\' : \'\';\\n    const textTruncate = truncate ? \'text--truncate\' : \'\';\\n    const textWeight = weight ? `text--${weight}` : \'\';\\n  return (\\n  \\n    <small  className={clsx(\\n          \\"avatar__subtitle\\", \\n          className,\\n          text, \\n          textType, \\n          textColor, \\n          textItalic, \\n          textDecoration, \\n          textBreak, \\n          textTruncate, \\n          textWeight\\n        )} \\n        style={style}>\\n\\n    <> {children}</>\\n    </small >\\n\\n  );\\n}\\n\\n\\nexport default AvatarSubtitle ;\\n\\n\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size={24} /> </>}>\\n\\n```tsx title=\'\\\\src\\\\components\\\\Avatar\\\\AvatarSubtitle\\\\index.tsx\'\\nimport React, { CSSProperties, ReactNode } from \'react\';\\nimport clsx from \'clsx\'; \\n\\ninterface AvatarSubtitleProps {\\n  className?: string; // Custom classes for the component\\n  style?: CSSProperties; // Custom styles for the component\\n  children: ReactNode; // Content of the component\\n  textAlign?: \'left\' | \'center\' | \'right\'; // Text alignment options\\n  variant?: \'primary\' | \'secondary\' | \'danger\' | \'warning\' | \'success\' | \'info\' | \'link\' | string;\\n  italic?: boolean; // Determines if the text is italic\\n  noDecoration?: boolean; // Determines if the text has no decoration\\n  transform?: string; // Text transform option \\n  breakWord?: boolean; // Determines if the text breaks words\\n  truncate?: boolean; // Determines if the text is truncated\\n  weight?: string; // Weight of the text\\n}\\n\\nconst AvatarSubtitle: React.FC<AvatarSubtitleProps> = ({\\n  className, // Custom classes for the component\\n  style, // Custom styles for the component\\n  children, // Content of the component\\n  textAlign, // Text alignment\\n  variant, // Variant for text color or style\\n  italic = false, // Default to false for italic text\\n  noDecoration = false, // Default to false for no decoration\\n  transform, // Text transform option\\n  breakWord = false, // Default to false for break words\\n  truncate = false, // Default to false for truncate\\n  weight, // Weight of the text \\n}) => {   \\n  const textAlignClass = textAlign ? `text--${textAlign}` : \'\';\\n  const textColor = variant ? `text--${variant}` : \'\';\\n  const textItalic = italic ? \'text--italic\' : \'\';\\n  const textDecoration = noDecoration ? \'text-no-decoration\' : \'\';\\n  const textType = transform ? `text--${transform}` : \'\';\\n  const textBreak = breakWord ? \'text--break\' : \'\';\\n  const textTruncate = truncate ? \'text--truncate\' : \'\';\\n  const textWeight = weight ? `text--${weight}` : \'\';\\n  \\n  return (\\n    <small\\n      className={clsx(\\n        \\"avatar__subtitle\\",\\n        className,\\n        textAlignClass,\\n        textType,\\n        textColor,\\n        textItalic,\\n        textDecoration,\\n        textBreak,\\n        textTruncate,\\n        textWeight\\n      )}\\n      style={style}\\n    >\\n      {children}\\n    </small>\\n  );\\n}\\n\\nexport default AvatarSubtitle;\\n\\n```\\n</TabItem>\\n\\n</Tabs>\\n\\n\\n\\n## MDX Component Scope\\nTo follow the Docusaurus documentation, we create a theme folder that will host the `MDXComponents` file. This gives us `src\\\\theme\\\\MDXComponents.*`. You may already have a `src\\\\theme` folder or an `MDXComponents` file if so - merge the changes described here with yours.\\n\\n\\n<Tabs groupId=\\"js-ts\\">\\n  <TabItem value=\\"js\\" label={<><LogoIcon name=\\"javascript\\" size={24} /> </>}>\\n    ```javascript title=\\"src\\\\theme\\\\MDXComponents.js\\"\\n      import React from \'react\';\\n      // Importing the original mapper + our components according to the Docusaurus doc\\n      import MDXComponents from \'@theme-original/MDXComponents\';\\n      import AvatarContainer from \'@site/src/components/Avatar/AvatarContainer\';\\n      import AvatarImage from \'@site/src/components/Avatar/AvatarImage\';\\n      import AvatarIntro from \'@site/src/components/Avatar/AvatarIntro\';\\n      import AvatarName from \'@site/src/components/Avatar/AvatarName\';\\n      import AvatarSubtitle from \'@site/src/components/Avatar/AvatarSubtitle\';\\n        \\n\\n      export default {\\n        // Reusing the default mapping\\n        ...MDXComponents,\\n        AvatarContainer, \\n        AvatarImage,\\n        AvatarIntro,\\n        AvatarName,\\n        AvatarSubtitle,\\n      };\\n    ```\\n  </TabItem>\\n  <TabItem value=\\"ts\\" label={<><LogoIcon name=\\"typescript-icon\\" size={24} /> </>}>\\n    ```tsx title=\\"src\\\\theme\\\\MDXComponents.tsx\\"\\n\\n\\n      import React from \'react\';\\n      // Importing the original mapper + our components according to the Docusaurus doc\\n      import MDXComponents from \'@theme-original/MDXComponents\';\\n      import AvatarContainer from \'@site/src/components/Avatar/AvatarContainer\';\\n      import AvatarImage from \'@site/src/components/Avatar/AvatarImage\';\\n      import AvatarIntro from \'@site/src/components/Avatar/AvatarIntro\';\\n      import AvatarName from \'@site/src/components/Avatar/AvatarName\';\\n      import AvatarSubtitle from \'@site/src/components/Avatar/AvatarSubtitle\';\\n\\n\\n      export default {\\n        // Reusing the default mapping\\n        ...MDXComponents,\\n        AvatarContainer, \\n        AvatarImage,\\n        AvatarIntro,\\n        AvatarName,\\n        AvatarSubtitle, \\n      };\\n    ```\\n  </TabItem>\\n</Tabs>\\n\\n\\n## Using the Avatar Component in an MDX File\\n\\n\\n### Avatar classic horizontal\\n<Columns>\\n<Column className=\'col--5\'>\\n\\n```html\\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\\n<AvatarContainer>  \\n<AvatarImage avatarSize=\'lg\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n<AvatarIntro>\\n<AvatarName style={{color:\'white\'}} > Docux </AvatarName>\\n<AvatarSubtitle  className=\'primary\'>humble contributor on :   <a style={{ color:\'white\'}}  href=\\"https://docusaurus.community/\\">@Doc.Community</a></AvatarSubtitle>\\n</AvatarIntro>\\n</AvatarContainer>\\n```\\n\\n</Column>\\n\\n<Column className=\'col--7 text--justify\'>\\n<p>Lorem ipsum dolor sit amet, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\\n<AvatarContainer>  \\n\\n<AvatarImage avatarSize=\'lg\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n<AvatarIntro>\\n<AvatarName style={{color:\'white\'}} > Docux </AvatarName>\\n<AvatarSubtitle  className=\'primary\'>humble contributor on :   <a style={{ color:\'white\'}}  href=\\"https://docusaurus.community/\\">@Doc.Community</a></AvatarSubtitle>\\n</AvatarIntro>\\n\\n</AvatarContainer>\\n\\n</Column>\\n\\n</Columns>\\n\\n### Avatar type post horizontal\\n<Columns>\\n<Column className=\'col--6\'>\\n\\n```html\\n<AvatarContainer>  \\n<AvatarImage avatarSize=\'xs\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n<AvatarIntro>\\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\\n<AvatarName style={{color:\'white\'}} > Docux </AvatarName>\\n<AvatarSubtitle  className=\'primary\'>humble contributor on :   <a style={{ color:\'white\'}}  href=\\"https://docusaurus.community/\\">@Doc.Community</a></AvatarSubtitle>\\n</AvatarIntro>\\n</AvatarContainer>\\n```\\n\\n</Column>\\n\\n<Column className=\'col--6 text--justify\'>\\n<AvatarContainer>  \\n\\n<AvatarImage avatarSize=\'xs\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n<AvatarIntro>\\n<p>Lorem ipsum dolor sit amet, eprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\\n\\n<AvatarName style={{color:\'white\'}} > Docux </AvatarName>\\n<AvatarSubtitle  className=\'primary\'>humble contributor on :   <a style={{ color:\'white\'}}  href=\\"https://docusaurus.community/\\">@Doc.Community</a></AvatarSubtitle>\\n</AvatarIntro>\\n\\n</AvatarContainer>\\n\\n</Column>\\n</Columns>\\n\\n\\n### Avatar classic vertical\\n<Columns>\\n<Column className=\'col--5\'>\\n\\n```html\\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\\n<AvatarContainer vertical>  \\n<AvatarImage  avatarSize=\'lg\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n<AvatarIntro>\\n<AvatarName className=\'text--info\' > Docux </AvatarName>\\n<AvatarSubtitle  className=\'text--primary\'>humble contributor on :   <a style={{ color:\'white\'}}  href=\\"https://docusaurus.community/\\">@Doc.Community</a></AvatarSubtitle>\\n</AvatarIntro>\\n</AvatarContainer>\\n```\\n\\n</Column>\\n\\n<Column className=\'col--7 text--justify\'>\\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\\n\\n---\\n\\n<AvatarContainer vertical>  \\n<AvatarImage  avatarSize=\'lg\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n<AvatarIntro>\\n<AvatarName className=\'text--info\' > Docux </AvatarName>\\n<AvatarSubtitle  className=\'text--primary\'>humble contributor on :   <a style={{ color:\'white\'}}  href=\\"https://docusaurus.community/\\">@Doc.Community</a></AvatarSubtitle>\\n</AvatarIntro>\\n\\n</AvatarContainer>\\n\\n</Column>\\n</Columns>\\n\\n### Various  styles\\n<Columns>\\n<Column className=\'col--6\'>\\n```html\\n<AvatarContainer vertical>  \\n<AvatarIntro>\\n<AvatarName className=\'text--danger\' > Docux </AvatarName>\\n<AvatarSubtitle  className=\'text--danger\'>humble contributor on :   <a style={{ color:\'white\'}}  href=\\"https://docusaurus.community/\\">@Doc.Community</a></AvatarSubtitle>\\n</AvatarIntro>\\n<AvatarImage  avatarSize=\'xs\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n</AvatarContainer>\\n```\\n</Column>\\n<Column>\\n\\n<AvatarContainer vertical className=\'padding-vert--lg\'>  \\n<AvatarIntro>\\n<AvatarName className=\'text--danger\' > Docux </AvatarName>\\n<AvatarSubtitle  className=\'text--danger\'>humble contributor on :   <a style={{ color:\'white\'}}  href=\\"https://docusaurus.community/\\">@Doc.Community</a></AvatarSubtitle>\\n</AvatarIntro>\\n<AvatarImage  avatarSize=\'xs\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n\\n</AvatarContainer>\\n\\n\\n</Column>\\n<Column className=\'col--6\'>\\n```html\\n<AvatarContainer className=\'padding-vert--lg\' > \\n<AvatarIntro>\\n<AvatarName className=\'text--warning\' > Docux </AvatarName>\\n</AvatarIntro>\\n<AvatarImage  avatarSize=\'xs\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n</AvatarContainer>\\n```\\n</Column>\\n\\n<Column className=\'col--6\'>\\n<center>\\n<AvatarContainer className=\'padding-vert--lg padding-horiz--xl\' > \\n<AvatarIntro>\\n<AvatarName className=\'text--warning\' > Docux </AvatarName>\\n</AvatarIntro>\\n<AvatarImage  avatarSize=\'xs\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n\\n</AvatarContainer>\\n</center>\\n</Column>\\n</Columns>\\n\\n<Columns>\\n<Column className=\'col--8\'>\\n```html\\n<AvatarContainer vertical>  \\n<AvatarIntro>\\n<AvatarImage  avatarSize=\'xs\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n<AvatarName className=\'text--warning\' >Docux</AvatarName>\\n</AvatarIntro>\\n</AvatarContainer>\\n```\\n</Column>\\n<Column className=\'col--4\'>\\n\\n<AvatarContainer className=\'padding-vert--lg\' vertical>  \\n<AvatarIntro>\\n<AvatarImage  avatarSize=\'xs\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n<AvatarName className=\'text--warning\' >Docux</AvatarName>\\n</AvatarIntro>\\n\\n</AvatarContainer>\\n\\n</Column>\\n\\n\\n</Columns>\\n\\n\\n### Various sizes\\n\\n\\n\\n<AvatarContainer>  \\n\\n<AvatarImage  avatarSize=\'xl\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n<AvatarIntro>\\n<AvatarName className=\'text--info\' > Docux </AvatarName>\\n<AvatarSubtitle  className=\'text--primary\'>humble contributor on :   <a style={{ color:\'white\'}}  href=\\"https://docusaurus.community/\\">@Doc.Community</a></AvatarSubtitle>\\n</AvatarIntro>\\n\\n</AvatarContainer>\\n\\n\\n\\n<AvatarContainer>  \\n\\n<AvatarImage  avatarSize=\'lg\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n<AvatarIntro>\\n<AvatarName className=\'text--info\' > Docux </AvatarName>\\n<AvatarSubtitle  className=\'text--primary\'>humble contributor on :   <a style={{ color:\'white\'}}  href=\\"https://docusaurus.community/\\">@Doc.Community</a></AvatarSubtitle>\\n</AvatarIntro>\\n\\n</AvatarContainer>\\n\\n\\n\\n<AvatarContainer>  \\n\\n<AvatarImage  avatarSize=\'xs\' avatarImageUrl=\\"https://avatars.githubusercontent.com/u/97809069?v=4\\" link destination=\'https://github.com/Juniors017\'/>\\n<AvatarIntro>\\n<AvatarName className=\'text--info\' > Docux </AvatarName>\\n<AvatarSubtitle  className=\'text--primary\'>humble contributor on :   <a style={{ color:\'white\'}}  href=\\"https://docusaurus.community/\\">@Doc.Community</a></AvatarSubtitle>\\n</AvatarIntro>\\n\\n</AvatarContainer>"}]}}')}}]);